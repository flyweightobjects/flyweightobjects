<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlyweightObjects.NET</name>
    </assembly>
    <members>
        <member name="T:FlyweightObjects.BinarySerializer">
            <summary>
            Performs binary serialization routines.
            </summary>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                // Retrieve a product from storage
                var p1 = context.Select<Product>(1).ToSingle();
                Console.WriteLine("ProductID: {0}", p1.Name);
                       
                // Serialize the object as a byte array
                var[] bytes = BinarySerializer.Serialize(p1);
                
                // Deserialize the product 
                Product p2 = BinarySerializer.Deserialize<Product>(bytes);
                Console.WriteLine("ProductID: {0}", p2.Name);
            }
            ]]>
            </code>
            </example>   
        </member>
        <member name="M:FlyweightObjects.BinarySerializer.Serialize(System.Object)">
            <summary>
            Serializes the object into a byte array.
            </summary>
            <param name="source">The object to serialize.</param>
        </member>
        <member name="M:FlyweightObjects.BinarySerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes an object into the type of T.
            </summary>
            <typeparam name="T">The type of object to be deserialized.</typeparam>
            <param name="bytes">The byte array of the object.</param>
        </member>
        <member name="T:FlyweightObjects.BusinessLogicBase`1">
            <summary>
            Serves as the base class for all business logic implementation.
            </summary>
            <typeparam name="TSource">The domain type for the business logic.</typeparam>
        </member>
        <member name="T:FlyweightObjects.DataContext">
            <summary>
            Represents the class by which all storage operations are performed.
            </summary>
            <exception cref="T:FlyweightObjects.StorageProviderException"/>
        </member>
        <member name="T:FlyweightObjects.IDataContext">
            <summary>
            Represents a context by which storage operations can be performed.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IDataContext.TrySelect``1(``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.TrySelect``1(System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.TrySelect``1(FlyweightObjects.PropertyExpression{``0},``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.TrySelect``1(FlyweightObjects.PropertyExpression{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> criteria used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.TrySelect``1(FlyweightObjects.IQueryExpression{``0},``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.TrySelect``1(FlyweightObjects.IQueryExpression{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.TrySelect``1(FlyweightObjects.IStorageCommand,``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.  Note the value for sql may be any object which implements 
            the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.TrySelect``1(FlyweightObjects.IStorageCommand,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be an 
            IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.  Note the value for 
            sql may be any object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Exists``1(``0)">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Exists``1(FlyweightObjects.PropertyExpression{``0})">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Exists``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Exists``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.  Note the value for sql may be any 
            object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1">
            <summary>
            Returns all objects for the specified type of T contained in storage.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1(System.Int32)">
            <summary>
            Returns all objects for the specified type of T contained in storage constrained by the amount as specified
            by limit.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1(System.Int32,FlyweightObjects.PropertyExpression{``0})">
            <summary>
            Returns all objects for the specified type of T contained in storage constrained by the amount as specified
            by limit and using the criteria as specified by whereExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1(FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions. Additional objects will be retrieved in the graph according to their level as specified
            by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions. Additional objects will be retrieved in the graph according to their level as specified
            by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1(System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1(FlyweightObjects.PreloadOptions{``0},System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions. Additional objects will be retrieved in the graph 
            according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1(FlyweightObjects.PreloadDepth,System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions. Additional objects will be retrieved in the graph 
            according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth of the object graph to prefectch.</param>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IStorageCommand"/>.  Note the value for 
            sql may be any object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IStorageCommand"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.  Note the value for sql may be any 
            object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Insert``1(``0)">
            <summary>
            Performs an insert into the target entity with the values as given by the source object's properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to insert.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Insert``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Performs an insert into the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. 
            </summary>
            <typeparam name="T">The type parameter of the objects to insert.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the objects.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs multiple inserts into the target entity using the supplied source.
            </summary>
            <typeparam name="T">The type parameter of the objects to insert.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Update``1(``0)">
            <summary>
            Performs an update of the target entity with the values as given by the source object's properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to update.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Update``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Performs an update of the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <typeparam name="T">The type parameter of the object to update.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the object.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Update``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs multiple updates of the target entity using the supplied source.
            </summary>
            <typeparam name="T">The type parameter of the objects to update.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Upsert``1(``0)">
            <summary>
            If the object exiss, performs an update of the target entity with the values as given by the source 
            object's properties, otherwise performs an insert.
            </summary>
            <typeparam name="T">The type parameter of the objects to update.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Upsert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            For each object in source, if the object alrady exists, performs an update of the target entity using 
            the supplied source, otherwise an insert is applied.
            </summary>
            <typeparam name="T">The type parameter of the objects to either update or insert.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Delete``1(``0)">
            <summary>
            Deletes the source from storage.
            </summary>
            <typeparam name="T">The type parameter of the objects to delete.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Deletes all instances contained within source from storage.
            </summary>
            <typeparam name="T">The type parameter of the objects to delete.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Delete``1(FlyweightObjects.PropertyExpression{``0})">
            <summary>
            Performs a delete on the target entity given the supplied filter criteria.
            </summary>
            <typeparam name="T">The type parameter of the objects to delete.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used as the filter for the delete.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Delete``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Performs a delete on the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <typeparam name="T">The type parameter of the object to update.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to delete the object.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Persist``1(FlyweightObjects.FlyweightSet{``0})">
            <summary>
            Performs all necessary operations on the supplied <see cref="T:FlyweightObjects.IFlyweightSet`1"/> object. Note that all objects which
            have been removed from the <see cref="T:FlyweightObjects.IFlyweightSet`1"/> will be deleted, while the others will either be inserted
            or deleted based upon their status in storage.
            </summary>
            <typeparam name="T">The type parameter of the changed objects to persist.</typeparam>
            <param name="source">An instance of a <see cref="T:FlyweightObjects.FlyweightSet`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.IDataContext.Reload``1(``0)">
            <summary>
            Reloads the source object based upon its identifiers as specified by its <see cref="T:FlyweightObjects.DataColumnAttribute"/> Identifer properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to reload.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="P:FlyweightObjects.IDataContext.DomainName">
            <summary>
            Gets or sets the unique name of the domain which identifies the context with specific object types. Parity must exist between
            the value of this property and objects with a <see cref="T:System.Data.DataTable"/>.DomainName in order for deferred loading to work correctly
            acrosss multiple domains.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ILoadOnDemand">
            <summary>
            Represents objects which can enable the deferred loading of related objects.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ILoadOnDemand.LoadOnDemand">
            <summary>
            Gets or sets whether the deferred loading of objects should be enabled.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ITransactional">
            <summary>
            Represents transactional functionality.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ITransactional.BeginTransaction">
            <summary>
            Starts a new <see cref="T:System.Data.IDbTransaction"/> if one is not already present, otherwise it will enlist.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ITransactional.RollbackTransaction">
            <summary>
            Rolls back all changes to the current <see cref="T:System.Data.IDbTransaction"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ITransactional.CommitTransaction">
            <summary>
            Commits the current transaction to storage if the current implementing class is the owner.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ITransactional.CommitTransaction(System.Boolean)">
            <summary>
            Commits the current transaction to storage. If force is equal to true, the transaction will be commited even though the current instance may not be the owner.
            </summary>
            <param name="force">A value indicating whether to force the commit regardless of ownership.</param>
        </member>
        <member name="P:FlyweightObjects.ITransactional.ActiveTransaction">
            <summary>
            Gets the current active transaction if one if present, otherwise returns null.
            </summary>
        </member>
        <member name="F:FlyweightObjects.DataContext.DISTINCT">
             <summary>
            Returns true to specify distinct values.
             </summary>
        </member>
        <member name="F:FlyweightObjects.DataContext.TOP">
            <summary>
            Returns the integer specified as input.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataContext.BeginTransaction">
            <summary>
            Starts a new transaction for the current context.
            </summary>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                // Begin a new transaction
                context.BeginTransaction();
                try
                {
                    // Retrieve a collection of products
                    var products = context.Select<Product>(100).ToFlyweightSet();
                    
                    // Set the ModifiedDate of each product
                    foreach (Product product in products)
                    {
                        product.ModifiedDate = DateTime.Now;
                    }
                    
                    // Update the target entity and commit changes
                    context.Update<Product>(products);
                    context.CommitTransaction();
                }
                catch (Exception e)
                {
                    // Rollback the changes if one is present
                    context.RollbackTransaction();
                    Console.WriteLine("Exception: {0}", e.ToString());
                    throw;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.CommitTransaction">
            <summary>
            Commits the current transaction if one is present.
            </summary>
            <remarks>
            Note that calling RollbackTransaction() is an innocuous event if BeginTransaction() has not been called. Therefore, it is not necessary to examine the <see cref="P:FlyweightObjects.DataContext.ActiveTransaction"/>
            property prior to calling this method.
            </remarks>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                // Begin a new transaction
                context.BeginTransaction();
                try
                {
                    // Retrieve a collection of products
                    var products = context.Select<Product>(100).ToFlyweightSet();
                    
                    // Set the ModifiedDate of each product
                    foreach (Product product in products)
                    {
                        product.ModifiedDate = DateTime.Now;
                    }
                    
                    // Update the target entity and commit changes
                    context.Update<Product>(products);
                    context.CommitTransaction();
                }
                catch (Exception e)
                {
                    // Rollback the changes if one is present
                    context.RollbackTransaction();
                    Console.WriteLine("Exception: {0}", e.ToString());
                    throw;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.CommitTransaction(System.Boolean)">
            <summary>
            Commits the current transaction to storage. If force is equal to true, the transaction will be commited even though the current instance may not be the owner.
            </summary>
            <param name="force">A value indicating whether to force the commit regardless of ownership.</param>
        </member>
        <member name="M:FlyweightObjects.DataContext.RollbackTransaction">
            <summary>
            Rolls back the current transaction if one is present.
            </summary>
            <remarks>
            Note that calling RollbackTransaction() is an innocuous event if BeginTransaction() has not been called. Therefore, it is not necessary to examine the <see cref="P:FlyweightObjects.DataContext.ActiveTransaction"/>
            property prior to calling this method.
            </remarks>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                // Begin a new transaction
                context.BeginTransaction();
                try
                {
                    // Retrieve a collection of products
                    var products = context.Select<Product>(100).ToFlyweightSet();
                    
                    // Set the ModifiedDate of each product
                    foreach (Product product in products)
                    {
                        product.ModifiedDate = DateTime.Now;
                    }
                    
                    // Update the target entity and commit changes
                    context.Update<Product>(products);
                    context.CommitTransaction();
                }
                catch (Exception e)
                {
                    // Rollback the changes if one is present
                    context.RollbackTransaction();
                    Console.WriteLine("Exception: {0}", e.ToString());
                    throw;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.#ctor">
            <summary>
            Constructs a new instance of a <see cref="T:FlyweightObjects.DataContext"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataContext.#ctor(System.String,FlyweightObjects.StorageProviderType)">
            <summary>
            Constructs a new instance of a <see cref="T:FlyweightObjects.DataContext"/>.
            </summary>
            <param name="connectionString">The connection string for the StorageProvider.</param>
            <param name="providerType">The StorageProviderType enumerated value.</param>
        </member>
        <member name="M:FlyweightObjects.DataContext.#ctor(System.String,FlyweightObjects.StorageProviderType,System.Boolean)">
            <summary>
            Constructs a new instance of a <see cref="T:FlyweightObjects.DataContext"/>.
            </summary>
            <param name="connectionString">The connection string for the StorageProvider.</param>
            <param name="providerType">The StorageProviderType enumerated value.</param>
            <param name="loadOnDemand">A boolean value indicating whether deferred loading of objects should be enabled.</param>
        </member>
        <member name="M:FlyweightObjects.DataContext.#ctor(System.String,FlyweightObjects.StorageProviderType,System.Boolean,System.String)">
            <summary>
            Constructs a new instance of a <see cref="T:FlyweightObjects.DataContext"/>.
            </summary>
            <param name="connectionString">The connection string for the StorageProvider.</param>
            <param name="providerType">The StorageProviderType enumerated value.</param>
            <param name="loadOnDemand">A boolean value indicating whether deferred loading of objects should be enabled.</param>
            <param name="domainName">A unique name that identifies a domain for which this instance of the <see cref="T:FlyweightObjects.DataContext"/> is responsible.</param>
        </member>
        <member name="M:FlyweightObjects.DataContext.TrySelect``1(``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                Product product = null;
                if (context.TrySelect<Product>(out product))
                {
                    Console.WriteLine("First returned name is {0}", product.Name);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.TrySelect``1(System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                IEnumerable<Product> products = null;
                if (context.TrySelect<Product>(out products))
                {
                    Console.WriteLine("Count is {0}", products.Count<Product>());
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.TrySelect``1(FlyweightObjects.PropertyExpression{``0},``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                Product product = null;
                if (context.TrySelect<Product>(Product.Properties.ProductID == 355, out product))
                {
                    Console.WriteLine("Product name is {0}", product.Name);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.TrySelect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                Product product = null;
                if (context.TrySelect<Product>(p => p.ProductID == 355, out product))
                {
                    Console.WriteLine("Product name is {0}", product.Name);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.TrySelect``1(FlyweightObjects.PropertyExpression{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> criteria used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                IEnumerable<Product> products = null;
                if (context.TrySelect<Product>(Product.Properties.ProductLine.Trim().Length() > 0 && Product.Properties.ListPrice > 0, out products))
                {
                    Console.WriteLine("Count is {0}", products.Count<Product>());
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.TrySelect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                IEnumerable<Product> products = null;
                if (context.TrySelect<Product>(p => p.ProductLine.Trim().Length() > 0 && p.ListPrice > 0, out products))
                {
                    Console.WriteLine("Count is {0}", products.Count<Product>());
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.TrySelect``1(FlyweightObjects.IQueryExpression{``0},``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                Product product = null;
                if (context.TrySelect<Product>(new QueryExpression<Product>().Select().From<Product>().Where(Product.Properties.ProductID == 355), out product))
                {
                    Console.WriteLine("Product name is {0}", product.Name);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.TrySelect``1(FlyweightObjects.IQueryExpression{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                IEnumerable<Product> products = null;
                if (context.TrySelect<Product>(new QueryExpression<Product>().Select().From<Product>().Where(Product.Properties.ProductLine.Trim().Length() > 0), out products))
                {
                    Console.WriteLine("Count is {0}", products.Count<Product>());
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.TrySelect``1(FlyweightObjects.IStorageCommand,``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.  Note the value for sql may be any object which implements 
            the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                Product product = null;
                if (context.TrySelect<Product>(new StorageCommand("SELECT * FROM Production.Product WHERE ProductID = 355"), out product))
                {
                    Console.WriteLine("Product name is {0}", product.Name);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.TrySelect``1(FlyweightObjects.IStorageCommand,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be an 
            IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.  Note the value for 
            sql may be any object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                IEnumerable<Product> products = null;
                if (context.TrySelect<Product>(new StorageCommand("SELECT * FROM Production.Product WHERE ProductLine IS NOT NULL"), out products))
                {
                    Console.WriteLine("Count is {0}", products.Count<Product>());
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Exists``1(``0)">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                Product product = context.Select<Product>(Product.Properties.ProductID == 355).ToSingle();
                if (context.Exists<Product>(product))
                {
                    Console.WriteLine("Product exists");
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Exists``1(FlyweightObjects.PropertyExpression{``0})">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                if (context.Exists<Product>(Product.Properties.ProductID == 355))
                {
                    Console.WriteLine("Product exists");
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Exists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                if (context.Exists<Product>(p => p.ProductID == 355))
                {
                    Console.WriteLine("Product exists");
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Exists``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                if (context.Exists<Product>(new QueryExpression<Product>().Select().From<Product>().Where(Product.Properties.ProductID == 355)))
                {
                    Console.WriteLine("Product exists");
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Exists``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.  Note the value for sql may be any 
            object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                if (context.Exists<Product>(new StorageCommand("SELECT * FROM Production.Product WHERE ProductID = 355")))
                {
                    Console.WriteLine("Product exists");
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1">
            <summary>
            Returns all objects for the specified type of T contained in storage.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>();
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(System.Int32)">
            <summary>
            Returns all objects for the specified type of T contained in storage constrained by the amount as specified
            by limit.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(100);
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(p => p.ModifiedDate > DateTime.Now.AddYears(-10));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(System.Int32,FlyweightObjects.PropertyExpression{``0})">
            <summary>
            Returns all objects for the specified type of T contained in storage constrained by the amount as specified
            by limit and using the criteria as specified by whereExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(100, Product.Properties.ProductLine.Trim().Length() > 0);
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns all objects for the specified type of T contained in storage constrained by the amount as specified
            by limit and using the criteria as specified by whereExpression. 
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(100, p => p.ProductLine.Trim().Length() > 0);
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(Product.Properties.ModifiedDate > DateTime.Now.AddYears(-10), Product.Properties.ProductNumber.Desc());
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions. Additional objects will be retrieved in the graph according to their level as specified
            by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(PreloadDepth.FirstRelatives, Product.Properties.ProductID.Between(350, 375), Product.Properties.ProductID.Asc());
                foreach (Product product in products)
                {
                    foreach (ProductInventory productInventory in product.ProductInventories)
                    {
                        Console.WriteLine("ProductID: {0}, LocationID: {1}, Quantity: {2}", product.ProductID, productInventory.LocationID, productInventory.Quantity);
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions. Additional objects will be retrieved in the graph according to their level as specified
            by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(PreloadOptions<Product>.LoadWith(p => p.ProductProductPhoto), Product.Properties.ProductID.Between(350, 375), Product.Properties.ProductID.Asc());
                foreach (Product product in products)
                {
                    foreach (ProductInventory productInventory in product.ProductInventories)
                    {
                        Console.WriteLine("ProductID: {0}, LocationID: {1}, Quantity: {2}", product.ProductID, productInventory.LocationID, productInventory.Quantity);
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(PreloadDepth.FirstRelatives, Product.Properties.ProductID.Between(350, 375), Product.Properties.ProductID.Asc());
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductID: {0}", product.ProductID);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.PreloadDepth,System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions. Additional objects will be retrieved in the graph 
            according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="depth">The depth of the object graph to prefectch.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(true, 10, PreloadDepth.FirstRelatives, Product.Properties.ProductLine.Trim().Length() > 0, Product.Properties.ModifiedDate.Desc())
                foreach (Product product in products)
                {
                    foreach (ProductInventory productInventory in product.ProductInventories)
                    {
                        Console.WriteLine("ProductID: {0}, LocationID: {1}, Quantity: {2}", product.ProductID, productInventory.LocationID, productInventory.Quantity);
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.PreloadOptions{``0},System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions. Additional objects will be retrieved in the graph 
            according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(true, 10, PreloadOptions<Product>.LoadWith(p => p.ProductProductPhotos), Product.Properties.ProductLine.Trim().Length() > 0, Product.Properties.ModifiedDate.Desc())
                foreach (Product product in products)
                {
                    foreach (ProductInventory productInventory in product.ProductInventories)
                    {
                        Console.WriteLine("ProductID: {0}, LocationID: {1}, Quantity: {2}", product.ProductID, productInventory.LocationID, productInventory.Quantity);
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.IQueryExpression{``0})">
             <summary>
             Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
             </summary>
             <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
             <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 var qe = new QueryExpression<Product>()
            
                 .Select(true, 10, ProductCategory.Properties.Name)
                 .From<Product>()
                 .LeftJoin<ProductCategory>(Product.Properties.ProductSubcategoryID == ProductCategory.Properties.ProductCategoryID)
                 .Where(Product.Properties.ProductID.Between(100, 500))
                 .OrderBy(ProductCategory.Properties.Name);
            
                 var products = context.Select<Product>(qe);
                 Console.WriteLine("Count is {0}", products.Count<Product>());
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.IQueryExpression{``0})">
             <summary>
             Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
             will be retrieved in the graph according to their level as specified by depth.
             </summary>
             <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
             <param name="depth">The depth limit of the object graph.</param>
             <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 var qe = new QueryExpression<Product>()
            
                 .Select(true, 0, ProductCategory.Properties.Name)
                 .From<Product>()
                 .Join<ProductCategory>(Product.Properties.ProductSubcategoryID == ProductCategory.Properties.ProductCategoryID)
                 .Where(Product.Properties.ProductID.Between(350, 360))
                 .OrderBy(ProductCategory.Properties.Name);
            
                 var products = context.Select<Product>(PreloadDepth.FirstRelatives, qe);
                 foreach (Product product in products)
                 {
                     Console.WriteLine("ProductNumber: {0}, ProductSubcategory Name: {1}", product.ProductNumber, product.ProductSubcategory.Name);
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.IQueryExpression{``0})">
             <summary>
             Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
             will be retrieved in the graph according to their level as specified by depth.
             </summary>
             <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
             <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
             <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 var qe = new QueryExpression<Product>()
            
                 .Select(true, 0, ProductCategory.Properties.Name)
                 .From<Product>()
                 .Join<ProductCategory>(Product.Properties.ProductSubcategoryID == ProductCategory.Properties.ProductCategoryID)
                 .Where(Product.Properties.ProductID.Between(350, 360))
                 .OrderBy(ProductCategory.Properties.Name);
            
                 var products = context.Select<Product>(PreloadOptions<Product>.LoadWith(p => p.ProductProductPhotos), qe);
                 foreach (Product product in products)
                 {
                     Console.WriteLine("ProductNumber: {0}, ProductSubcategory Name: {1}", product.ProductNumber, product.ProductSubcategory.Name);
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IStorageCommand"/>.  Note the value for 
            sql may be any object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> by which to retrieve the objects.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var product = context.Select<Product>(new StorageCommand("SELECT * FROM Production.Product WHERE ProductID = 355")).ToSingle();
                Console.WriteLine("ProductNumber is {0}", product.ProductNumber);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IStorageCommand"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.  Note the value for sql may be any 
            object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> by which to retrieve the objects.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var product = context.Select<Product>(PreloadDepth.FirstRelatives, new StorageCommand("SELECT * FROM Production.Product WHERE ProductID = 355")).ToSingle();
                Console.WriteLine("Inventory location count is {0}", product.ProductInventories.Count);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(PreloadOptions<Product>.LoadWith(p => p.ProductProductPhotos), new StorageCommand("SELECT * FROM Production.Product"));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}, ProductSubcategory Name: {1}", product.ProductNumber, product.ProductSubcategory.Name);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Reload``1(``0)">
            <summary>
            Reloads the source object based upon its identifiers as specified by its <see cref="T:FlyweightObjects.DataColumnAttribute"/> Identifer properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to reload.</typeparam>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                // Retrieve a product and change its ModifiedDate value
                var product = context.Select<Product>(Product.Properties.ProductID == 355).ToSingle();
                product.ModifiedDate = DateTime.Now;
                Console.WriteLine("Product ModifiedDate is {0}", product.ModifiedDate);
                
                // Abandon the change and refresh the object
                product = context.Reload<Product>(product);
                Console.WriteLine("Product ModifiedDate is {0}", product.ModifiedDate);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Execute(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an <see cref="T:FlyweightObjects.IStorageCommand"/> against storage.
            </summary>
            <param name="command">The command to execute.</param>
        </member>
        <member name="M:FlyweightObjects.DataContext.Insert``1(``0)">
            <summary>
            Performs an insert into the target entity with the values as given by the source object's properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to insert.</typeparam>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                // Retrieve a product by ProductID
                var product = context.Select<Product>(Product.Properties.ProductID == 355).ToSingle();
                
                // Ensure that the retrieved product exists
                if (product != null)
                {
                    // Clone the product and change its properties to satisfy the constraints in the underlying entity
                    Product product1 = ObjectCloner.Clone<Product>(product);
                    product1.ProductID = 0;
                    product1.ProductNumber = Guid.NewGuid().ToString().Substring(0, 5);
                    product1.Name = "My New Product";
                    product1.rowguid = Guid.NewGuid();
                    
                    // Insert the new product and print its surrogate primary key
                    context.Insert<Product>(product1);
                    Console.WriteLine("ProductID is {0}", product1.ProductID);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Insert``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Performs multiple inserts into the target entity using the supplied source.
             </summary>
             <typeparam name="T">The type parameter of the objects to insert.</typeparam>
             <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a new empty list of products to be inserted
                 var list = new List<Product>();
            
                 // Loop through a collection of products
                 foreach (Product p in context.Select<Product>(Product.Properties.ProductID.Between(300, 349)))
                 {
                     // Create a new product from a clone and add it to the list
                     Product p1 = ObjectCloner.Clone<Product>(product);
                     p1.ProductID = 0;
                     p1.ProductNumber = Guid.NewGuid().ToString().Substring(0, 5);
                     p1.Name = product.ProductNumber;
                     p1.rowguid = Guid.NewGuid();
                     list.Add(p1);
                 }
            
                 // Insert the new list of products and print their surrogate primary keys
                 context.Insert<Product>(list);
                 foreach (Product p in list)
                 {
                     Console.WriteLine("ProductID: {0}", p.ProductID);
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Insert``1(FlyweightObjects.IQueryExpression{``0})">
             <summary>
             Performs an insert into the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. 
             </summary>
             <typeparam name="T">The type parameter of the objects to insert.</typeparam>
             <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the objects.</param>
             <example>
             The following example uses a Department class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Construct an insert QueryExpression object
                 var qe = new QueryExpression<Department>()
            
                 .Insert<Department>(Department.Properties.Name, Department.Properties.GroupName, Department.Properties.ModifiedDate)
                 .Values("My New Department", "My New Group", DateTime.Now);
                 
                 // Insert the values
                 context.Insert<Department>(qe);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
             <summary>
             Performs multiple inserts into the target entity using the supplied source and batch size. Note that this
             functionality is only available for a subset of <see cref="T:FlyweightObjects.IStorageProvider"/>s. 
             </summary>
             <typeparam name="T">The type parameter of the objects to insert.</typeparam>
             <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
             <param name="batchSize">The number of inserts contained within a batch.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a new empty list of products to be inserted
                 var list = new List<Product>();
            
                 // Loop through a collection of products
                 foreach (Product p in context.Select<Product>(Product.Properties.ProductID.Between(300, 349)))
                 {
                     // Create a new product from a clone and add it to the list
                     Product p1 = ObjectCloner.Clone<Product>(product);
                     p1.ProductID = 0;
                     p1.ProductNumber = Guid.NewGuid().ToString().Substring(0, 5);
                     p1.Name = product.ProductNumber;
                     p1.rowguid = Guid.NewGuid();
                     list.Add(p1);
                 }
            
                 // Insert the new list of products by batches of 10 and print their surrogate primary keys
                 context.Insert<Product>(list, 10);
                 foreach (Product p in list)
                 {
                     Console.WriteLine("ProductID: {0}", p.ProductID);
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Update``1(FlyweightObjects.IQueryExpression{``0})">
             <summary>
             Performs an update of the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
             </summary>
             <typeparam name="T">The type parameter of the object to update.</typeparam>
             <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the object.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Construct a QueryExpression object with the criteria for the update
                 var qe = new QueryExpression<Product>()
            
                 .Update()
                 .Set(Product.Properties.ModifiedDate == DateTime.Now, Product.Properties.MakeFlag == true)
                 .From<Product>()
                 .Join<ProductInventory>(ProductInventory.Properties.ProductID == Product.Properties.ProductID)
                 .Where(ProductInventory.Properties.Quantity > 0);
            
                 // Update the products directly without retrieving them
                 context.Update<Product>(qe);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Update``1(``0)">
            <summary>
            Performs an update of the target entity with the values as given by the source object's properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to update.</typeparam>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var product = context.Select<Product>(Product.Properties.ProductID == 355).ToSingle();
                product.ModifiedDate = DateTime.Now;
                context.Update<Product>(product);
                Console.WriteLine("Product ModifiedDate is {0}", product.ModifiedDate);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Update``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs multiple updates of the target entity using the supplied source.
            </summary>
            <typeparam name="T">The type parameter of the objects to update.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                // Retrieve the top 100 products
                var products = context.Select<Product>(100);
                Console.WriteLine("Count is {0}", products.Count<Product>());
                
                // Change the ModifiedDate of each product
                foreach (product product in products)
                {
                    products.ModifiedDate = DateTime.Now;
                }
                   
                // Update the products
                context.Update<Product>(products);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Update``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
             <summary>
             Performs multiple updates of the target entity using the supplied source and batch size. Note that this
             functionality is only available for a subset of <see cref="T:FlyweightObjects.IStorageProvider"/>s. 
             </summary>
             <typeparam name="T">The type parameter of the objects to update.</typeparam>
             <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
             <param name="batchSize">The number of updates contained within a batch.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Retrieve the top 100 products
                 var products = context.Select<Product>(100);
                 
                 // Change the ModifiedDate of each product
                 foreach (Product product in products)
                 {
                     product.ModifiedDate = DateTime.Now;
                 }
            
                 // Update the products in batches of 20
                 context.Update<Product>(products, 20);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Upsert``1(``0)">
            <summary>
            If the object alrady exists, performs an update of the target entity using the supplied source, otherwise
            an insert is applied.
            </summary>
            <typeparam name="T">The type parameter of the object to either update or insert.</typeparam>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                // Create a new product and set required properties
                var product = new Product()
                {
                    Name = Guid.NewGuid().ToString().Substring(0, 5),
                    ProductNumber = product.Name,
                    SafetyStockLevel = 1,
                    ReorderPoint = 1
                };
                
                // Perform an upsert on the target entity using the newly created product
                context.Upsert<Product>(product);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Upsert``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
             For each object in source, if the object alrady exists, performs an update of the target entity using 
             the supplied source, otherwise an insert is applied.
             </summary>
             <typeparam name="T">The type parameter of the objects to either update or insert.</typeparam>
             <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Retrieve a list of products
                 var products = context.Select<Product>(Product.Properties.ListPrice > 0).ToFlyweightSet();
            
                 // Change the ModifiedDate of each product
                 foreach (var product in products)
                 {
                     product.ModifiedDate = DateTime.Now;
                 }
                    
                 // Create a new product and set required properties
                 var product = new Product()
                 {
                     Name = Guid.NewGuid().ToString().Substring(0, 5),
                     ProductNumber = product.Name,
                     SafetyStockLevel = 1,
                     ReorderPoint = 1
                 };
                 
                 // Add the new product to the list
                 products.Add(product);
                   
                 // Update the target entity with the list of products
                 context.Upsert<Product>(products);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Delete``1(FlyweightObjects.IQueryExpression{``0})">
             <summary>
             Performs a delete on the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
             </summary>
             <typeparam name="T">The type parameter of the object to update.</typeparam>
             <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to delete the object.</param>
             <example>
             The following example uses a Department class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a new department and set required properties
                 var department = new Department()
                 {
                     Name = "My New Department",
                     GroupName = "My New Department Group",
                     ModifiedDate = DateTime.Now
                 };
            
                 // Insert the new department
                 context.Insert<Department>(department);
            
                 // Delete the department using a QueryExpression, specifying the newly created department
                 context.Delete<Department>(new QueryExpression<Department>().Delete<Department>().Where(Department.Properties.DepartmentID == department.DepartmentID));
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Delete``1(``0)">
             <summary>
             Deletes the source from storage.
             </summary>
             <typeparam name="T">The type parameter of the objects to delete.</typeparam>
             <param name="source">An instance of T.</param>
             <example>
             The following example uses a Department class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a new department and set required properties
                 var department = new Department()
                 {
                     Name = "My New Department",
                     GroupName = "My New Department Group",
                     ModifiedDate = DateTime.Now,
                     ModifiedDate = DateTime.Now
                 };
            
                 // Insert the new department
                 context.Insert<Department>(department);
            
                 // Delete the department
                 context.Delete<Department>(department);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Delete``1(FlyweightObjects.PropertyExpression{``0})">
             <summary>
             Performs a delete on the target entity given the supplied filter criteria.
             </summary>
             <typeparam name="T">The type parameter of the objects to delete.</typeparam>
             <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used as the filter for the delete.</param>
             <example>
             The following example uses a Department class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a new department and set required properties
                 var department = new Department()
                 {
                     Name = "My New Department",
                     GroupName = "My New Department Group",
                     ModifiedDate = DateTime.Now,
                     ModifiedDate = DateTime.Now
                 };
            
                 // Insert the new department
                 context.Insert<Department>(department);
            
                 // Delete the department
                 context.Delete<Department>(Department.Properties.DepartmentID == department.DepartmentID);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
             <summary>
             Performs a delete on the target entity given the supplied filter criteria.
             </summary>
             <typeparam name="T">The type parameter of the objects to delete.</typeparam>
             <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
             <example>
             The following example uses a Department class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a new department and set required properties
                 var department = new Department()
                 {
                     Name = "My New Department",
                     GroupName = "My New Department Group",
                     ModifiedDate = DateTime.Now,
                     ModifiedDate = DateTime.Now
                 };
            
                 // Insert the new department
                 context.Insert<Department>(department);
            
                 // Delete the department
                 context.Delete<Department>(d => d.DepartmentID == department.DepartmentID);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Delete``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Deletes all instances contained within source from storage.
             </summary>
             <typeparam name="T">The type parameter of the objects to delete.</typeparam>
             <param name="source">An instance of T.</param>
             <example>
             The following example uses a Department class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a list of departments
                 var departments = new List<Department>();
            
                 // Create 10 new departments, set their required properties and add each to the list
                 for (int i = 0; i < 10; i++)
                 {
                     var department = new Department()
                     {
                         Name = "My New Department",
                         GroupName = "My New Department Group",
                         ModifiedDate = DateTime.Now,
                         ModifiedDate = DateTime.Now
                     };
                     departments.Add(department);
                 }
            
                 // create the new departments
                 context.Insert<Department>(departments);
                 
                 // Delete the newly created departments
                 context.Delete<Department>(departments);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Delete``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
             <summary>
             Performs multiple deletes on the target entity using the supplied source and batch size. Note that this
             functionality is only available for a subset of <see cref="T:FlyweightObjects.IStorageProvider"/>s. 
             </summary>
             <typeparam name="T">The type parameter of the objects to delete.</typeparam>
             <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
             <param name="batchSize">The number of deletes contained within a batch.</param>
             <example>
             The following example uses a Department class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a list of departments
                 var departments = new List<Department>();
            
                 // Create 50 new departments, set their required properties and add each to the list
                 for (int i = 0; i < 50; i++)
                 {
                     var department = new Department()
                     {
                         Name = "My New Department",
                         GroupName = "My New Department Group",
                         ModifiedDate = DateTime.Now,
                         ModifiedDate = DateTime.Now
                     };
                     departments.Add(department);
                 }
            
                 // create the new departments
                 context.Insert<Department>(departments);
                 
                 // Delete the newly created departments in bacthes of 10
                 context.Delete<Department>(departments, 10);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Truncate``1">
             <summary>
             Truncates a target entity located in storage.
             </summary>
             <typeparam name="T">The type abstracting the table to truncate.</typeparam>
             <example>
             The following example uses a ErrrorLog class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Truncate the table
                 context.Truncate<ErrorLog>();
                 
                 // Get the count for the ErrorLog table
                 var qe = new QueryExpression<ErrorLog>()
            
                 .Select(ErrorLog.Properties.ErrorLogID.Count().As("Count"))
                 .From<ErrorLog>();
            
                 // Ensure that the table has been truncated
                 int count = this.Context.Select<QueryResult>(qe).ToList()[0].GetField<int>("Count");
                 Console.WriteLine("Count is {0}", count);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Persist``1(FlyweightObjects.FlyweightSet{``0})">
             <summary>
             Performs all necessary operations on the supplied <see cref="T:FlyweightObjects.IFlyweightSet`1"/> object. Note that all objects which
             have been removed from the <see cref="T:FlyweightObjects.IFlyweightSet`1"/> will be deleted, while the others will either be inserted
             or updated based upon whether or not they exist in storage.
             </summary>
             <typeparam name="T">The type parameter of the changed objects to persist.</typeparam>
             <param name="source">An instance of a <see cref="T:FlyweightObjects.FlyweightSet`1"/>.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Retrieve an IEnumerable<Product>
                 var products = context.Select<Product>(100).ToFlyweightSet();
                 
                 // Update the ModifiedDate property on each product
                 foreach (Product p in products)
                 {
                     p.ModifiedDate = DateTime.Now;
                 }
            
                 // Create a product from a clone
                 Product product = ObjectCloner.Clone<Product>(products[0]);
                 product.ProductID = 0;
                 product.ProductNumber = Guid.NewGuid().ToString().Substring(0, 5);
                 product.Name = "My New Product";
                 product.rowguid = Guid.NewGuid();
                 
                 // Add the product to the IFlyweightSet
                 products.Add(product);
                 
                 // Persist changes
                 context.Persist<Product>(products);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="sortExpressions">An <see cref="T:System.Linq.Expressions.Expression"/> used to qualify the property and direction of the sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>new SortExpression<Product>(p => p.ProductModelId, SortDirection.Desc));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage sorted by sortExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="sortExpressions">An <see cref="T:System.Linq.Expressions.Expression"/> used to qualify the property and direction of the sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>new SortExpression<Product>(p => p.ModifiedDate > DateTime.Now.AddYears(-10), new SortExpression<Product>(p => p.ProductModelId));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.PreloadDepth,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.SortExpression`1"/> used to qualify the properties and sorting directions.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(p => p.ModifiedDate > DateTime.Now.AddYears(-10), new SortExpression<Product>(p => p.ProductModelId, SortDirection.Desc));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> used to filter the objects to be retrieved.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.SortExpression`1"/> used to qualify the properties and sorting directions.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(true, 100, p => p.ModifiedDate > DateTime.Now.AddYears(-10), new SortExpression<Product>(p => p.ProductModelId));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductID: {0}", product.ProductID);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.PreloadDepth,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth of the object graph to prefectch.</param>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> used to filter the objects to be retrieved.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.SortExpression`1"/> used to qualify the properties and sorting directions.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(true, 100, PreloadDepth.FirstRelatives, p => p.ModifiedDate > DateTime.Now.AddYears(-10), new SortExpression<Product>(p => p.ProductModelId));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductID: {0}", product.ProductID);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.PreloadOptions{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.SortExpression`1"/> used to qualify the properties and sorting directions.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = this.Context.Select<Product>(PreloadOptions<Product>.LoadWith(p => p.ProductProductPhotos), p => p.ProductID > 900, SortExpression<Product>.Sort(p => p.ProductID));
                foreach (var product in products)
                {
                    Console.WriteLine(product.ProductProductPhotos.Count);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.Select``1(FlyweightObjects.PreloadOptions{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.SortExpression`1"/> used to qualify the properties and sorting directions.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = this.Context.Select<Product>(true, 10, PreloadOptions<Product>.LoadWith(p => p.ProductProductPhotos), p => p.ProductID > 900, SortExpression<Product>.Sort(p => p.ProductID));
                foreach (var product in products)
                {
                    Console.WriteLine(product.ProductProductPhotos.Count);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataContext.StartTimer">
            <summary>
            Starts a new timer used to calculate response times and resets the last ExecutionTime value.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataContext.StopTimer(System.Diagnostics.Stopwatch)">
            <summary>
            Stops the supplied and sets the current ExecutionTime. 
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataContext.SetResponseMessage``1(FlyweightObjects.IResponseMessage)">
            <summary>
            Sets the <see cref="T:FlyweightObjects.ResponseMessage"/> for an object that implements <see cref="T:FlyweightObjects.IResponseMessage"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataContext.SetResponseMessage``1(``0)">
            <summary>
            Sets the <see cref="T:FlyweightObjects.ResponseMessage"/> for an object that implements <see cref="T:FlyweightObjects.IResponseMessage"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataContext.SetResponseMessage``1(``0,System.Exception)">
            <summary>
            Sets the <see cref="T:FlyweightObjects.ResponseMessage"/> for an object that implements <see cref="T:FlyweightObjects.IResponseMessage"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataContext.InvokeListMethod``1(``0,System.Reflection.MethodBase)">
            <summary>
            Automatically interates a collection if T is an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The type parameter of the source.</typeparam>
            <param name="source">An instance of T.</param>
            <param name="targetMethod">The target <see cref="T:System.Reflection.MethodBase"/> to invoke.</param>
        </member>
        <member name="M:FlyweightObjects.DataContext.OnSelecting``1(FlyweightObjects.DataOperationEventArgs{``0})">
            <summary>
            Called prior to a select operation.
            </summary>
            <typeparam name="T">The type to be selected.</typeparam>
            <param name="e">The <see cref="T:FlyweightObjects.DataOperationEventArgs`1"/> for the operation.</param>
        </member>
        <member name="M:FlyweightObjects.DataContext.OnInserting``1(FlyweightObjects.DataOperationEventArgs{``0})">
            <summary>
            Called prior to performing an insert operation.
            </summary>
            <typeparam name="T">The type to be inserted.</typeparam>
            <param name="e">The <see cref="T:FlyweightObjects.DataOperationEventArgs`1"/> for the operation.</param>
        </member>
        <member name="M:FlyweightObjects.DataContext.OnUpdating``1(FlyweightObjects.DataOperationEventArgs{``0})">
            <summary>
            Called prior to performing an update operation.
            </summary>
            <typeparam name="T">The type to be updated.</typeparam>
            <param name="e">The <see cref="T:FlyweightObjects.DataOperationEventArgs`1"/> for the operation.</param>
        </member>
        <member name="M:FlyweightObjects.DataContext.OnDeleting``1(FlyweightObjects.DataOperationEventArgs{``0})">
            <summary>
            Called prior to performing a delete operation.
            </summary>
            <typeparam name="T">The type to be deleted.</typeparam>
            <param name="e">The <see cref="T:FlyweightObjects.DataOperationEventArgs`1"/> for the operation.</param>
        </member>
        <member name="M:FlyweightObjects.DataContext.OnTruncating``1(FlyweightObjects.DataOperationEventArgs{``0})">
            <summary>
            Called prior to performing a truncate operation.
            </summary>
            <typeparam name="T">The type to be truncated.</typeparam>
            <param name="e">The <see cref="T:FlyweightObjects.DataOperationEventArgs`1"/> for the operation.</param>
        </member>
        <member name="M:FlyweightObjects.DataContext.OnExecuting(FlyweightObjects.DataOperationEventArgs)">
            <summary>
            Called prior to performing an Execute operation.
            </summary>
            <param name="e">The <see cref="T:FlyweightObjects.DataOperationEventArgs"/> for the operation.</param>
        </member>
        <member name="M:FlyweightObjects.DataContext.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="E:FlyweightObjects.DataContext.Selecting">
            <summary>
            Called prior to performing a select operation.
            </summary>
        </member>
        <member name="E:FlyweightObjects.DataContext.Inserting">
            <summary>
            Called prior to performing an insert operation.
            </summary>
        </member>
        <member name="E:FlyweightObjects.DataContext.Updating">
            <summary>
            Called prior to performing an update operation.
            </summary>
        </member>
        <member name="E:FlyweightObjects.DataContext.Deleting">
            <summary>
            Called prior to performing a delete operation.
            </summary>
        </member>
        <member name="E:FlyweightObjects.DataContext.Truncating">
            <summary>
            Called prior to performing a truncate operation.
            </summary>
        </member>
        <member name="E:FlyweightObjects.DataContext.Executing">
            <summary>
            Called prior to executing an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataContext.ConnectionString">
            <summary>
            Gets the string used to connect to the current <see cref="P:FlyweightObjects.DataContext.StorageProvider"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataContext.AutoCloneObjects">
            <summary>
            Gets or sets whether objects retrieved from the <see cref="P:FlyweightObjects.DataContext.StorageProvider"/> should be cloned before returning to the caller.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataContext.ExecutionTime">
            <summary>
            Gets the <see cref="T:System.TimeSpan"/> representing the execution time of the last operation.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataContext.ActiveTransaction">
            <summary>
            Gets the IDbTransaction for the current context if one exists.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataContext.IsTransactionOwner">
            <summary>
            Gets whether the current context is the initiator of the current transaction.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataContext.DomainName">
            <summary>
            Gets or sets the unique name of the domain which identifies the context with specific object types. Parity must exist between
            the value of this property and objects with a <see cref="T:System.Data.DataTable"/>.DomainName in order for deferred loading to work correctly
            acrosss multiple domains.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataContext.UpdateUnchangedObjects">
            <summary>
            Gets or sets a value indicating whether updates should occur for objects which have not been changed.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataContext.MaxDebugListSize">
            <summary>
            Gets or sets the peek size of any returned <see cref="T:FlyweightObjects.FlyweightSet`1"/> collections for debugging purposes.
            The default value for this property is 1000.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataContext.MachineName">
            <summary>
            Gets the local machine name for the instance of the context.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataContext.StorageProvider">
            <summary>
            Gets or sets the <see cref="T:FlyweightObjects.IStorageProvider"/> for the current context.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataContext.CacheManager">
            <summary>
            Gets or sets the <see cref="T:FlyweightObjects.ICacheManager"/> for the context.
            </summary>
            <example>
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                context.CacheManager.Enabled = true;
            }     
            ]]>
            </code>
            </example>
        </member>
        <member name="P:FlyweightObjects.DataContext.ConcurrencyManager">
             <summary>
             Gets or sets the <see cref="T:FlyweightObjects.IConcurrencyManager"/> for the context.
             </summary>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a reusable QueryExpression, selecting a product by ProductID
                 var qe = new QueryExpression<Product>().Select().From<Product>().Where(Product.Properties.ProductID == 355);
                 
                 // Retrieve the product into two separate instances
                 Product p1 = context.Select<Product>(qe).ToSingle();
                 Product p2 = context.Select<Product>(qe).ToSingle();
                 
                 // Set the ConcurrencyManager mode so that it will fail on concurrency issues
                 context.ConcurrencyManager.Mode = ConcurrencyViolationMode.FailOnConflict;
            
                 try
                 {
                     // Set the ModifiedDate of the first product and update it
                     p1.ModifiedDate = DateTime.Now;
                     context.Update<Product>(p1);
                     
                     // Set the ModifiedDate of the second product and attempt to update it
                     p2.ModifiedDate = DateTime.Now;
                     context.Update<Product>(p2);
                 }
                 catch (ConcurrencyException e)
                 {
                     // Display the exception and throw
                     Console.WriteLine("Exception: {0}", e.ToString());
                     throw;
                 }
             }     
             ]]>
             </code>
             </example>
        </member>
        <member name="P:FlyweightObjects.DataContext.LoadOnDemand">
            <summary>
            Gets or sets whether the deferred loading of objects should be enabled.
            </summary>
        </member>
        <member name="T:FlyweightObjects.IBusinessLogic`1">
            <summary>
            Represents the required members for a generic business logic class.
            <typeparam name="TSource">The type of object for which the buisness logic implementation represents.</typeparam>
            </summary>
        </member>
        <member name="T:FlyweightObjects.IBusinessLogic">
            <summary>
            Represents the required members for a business logic class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IBusinessLogic.ValidatePrincipal(FlyweightObjects.ISecurityPrincipal)">
            <summary>
            Returns whether the current <see cref="T:FlyweightObjects.ISecurityPrincipal"/> is valid for the operation.
            </summary>
            <param name="principal">The current principal.</param>
        </member>
        <member name="P:FlyweightObjects.IBusinessLogic.CurrentPrincipal">
            <summary>
            Gets the <see cref="T:FlyweightObjects.ISecurityPrincipal"/> for the current operation.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IBusinessLogic.DefaultBusinessLogicType">
            <summary>
            Gets or sets the default type of the business logic.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IBusinessLogic.StorageProvider">
            <summary>
            Gets or sets the IStorageProvider instance for the context.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IBusinessLogic`1.Select(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IStorageCommand"/>.  Note the value for 
            sql may be any object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.IBusinessLogic`1.Insert(`0)">
            <summary>
            Performs an insert into the target entity with the values as given by the source object's properties.
            </summary>
            <param name="source">An instance of TSource.</param>
        </member>
        <member name="M:FlyweightObjects.IBusinessLogic`1.Insert(FlyweightObjects.IQueryExpression{`0})">
            <summary>
            Performs an insert into the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. 
            </summary>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the objects.</param>
        </member>
        <member name="M:FlyweightObjects.IBusinessLogic`1.Update(`0)">
            <summary>
            Updates the target storage with all instances contained within source.
            </summary>
            <param name="source">An instance of TSource.</param>
        </member>
        <member name="M:FlyweightObjects.IBusinessLogic`1.Update(FlyweightObjects.IQueryExpression{`0})">
            <summary>
            Performs an update of the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the object.</param>
        </member>
        <member name="M:FlyweightObjects.IBusinessLogic`1.Delete(`0)">
            <summary>
            Deletes the source from storage.
            </summary>
            <param name="source">An instance of TSource.</param>
        </member>
        <member name="M:FlyweightObjects.IBusinessLogic`1.Delete(FlyweightObjects.IQueryExpression{`0})">
            <summary>
            Performs a delete on the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to delete the object.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.ValidatePrincipal(FlyweightObjects.ISecurityPrincipal)">
            <summary>
            Returns whether the current <see cref="T:FlyweightObjects.ISecurityPrincipal"/> is valid for the operation.
            </summary>
            <param name="principal">The current principal.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.#ctor(System.String,FlyweightObjects.StorageProviderType)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString">The storage's connection string.</param>
            <param name="providerType">The StorageProviderType.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.#ctor(FlyweightObjects.DataContext)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="context">The object context from which to construct the new instance.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Select``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IStorageCommand"/>.  Note the value for 
            sql may be any object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Insert``1(``0)">
            <summary>
            Inserts into the target storage the instance of source.
            </summary>
            <typeparam name="T">The domain type to insert.</typeparam>
            <param name="source">The instance of domain type to insert.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs multiple inserts into the target entity using the supplied source.
            </summary>
            <typeparam name="T">The type parameter of the objects to insert.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Performs multiple inserts into the target entity using the supplied source and batch size. Note that this
            functionality is only available for a subset of <see cref="T:FlyweightObjects.IStorageProvider"/>s.
            </summary>
            <typeparam name="T">The type parameter of the objects to insert.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="batchSize">The number of inserts contained within a batch.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Insert``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Performs an insert into the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. 
            </summary>
            <typeparam name="T">The type parameter of the objects to insert.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the objects.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Update``1(``0)">
            <summary>
            Updates the target storage with all instances contained within source.
            </summary>
            <typeparam name="T">The domain type to update.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Update``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs multiple updates of the target entity using the supplied source.
            </summary>
            <typeparam name="T">The type parameter of the objects to update.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Update``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Performs multiple updates of the target entity using the supplied source and batch size. Note that this
            functionality is only available for a subset of <see cref="T:FlyweightObjects.IStorageProvider"/>s. 
            </summary>
            <typeparam name="T">The type parameter of the objects to update.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="batchSize">The number of updates contained within a batch.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Update``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Performs an update of the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <typeparam name="T">The type parameter of the object to update.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the object.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Delete``1(``0)">
            <summary>
            Deletes the source from storage.
            </summary>
            <typeparam name="T">The domain type to delete.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Deletes all instances contained within source from storage.
            </summary>
            <typeparam name="T">The type parameter of the objects to delete.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Delete``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Performs multiple deletes on the target entity using the supplied source and batch size. Note that this
            functionality is only available for a subset of <see cref="T:FlyweightObjects.IStorageProvider"/>s. 
            </summary>
            <typeparam name="T">The type parameter of the objects to delete.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="batchSize">The number of deletes contained within a batch.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Delete``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Performs a delete on the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <typeparam name="T">The type parameter of the object to update.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to delete the object.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Truncate``1">
            <summary>
            Truncates a target entity located in storage.
            </summary>
            <typeparam name="T">The type abstracting the table to truncate.</typeparam>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Select(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IStorageCommand"/>.  Note the value for 
            sql may be any object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Insert(`0)">
            <summary>
            Performs an insert into the target entity with the values as given by the source object's properties.
            </summary>
            <param name="source">An instance of TSource.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Insert(FlyweightObjects.IQueryExpression{`0})">
            <summary>
            Performs an insert into the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. 
            </summary>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the objects.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Update(`0)">
            <summary>
            Updates the target storage with all instances contained within source.
            </summary>
            <param name="source">An instance of TSource.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Update(FlyweightObjects.IQueryExpression{`0})">
            <summary>
            Performs an update of the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the object.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Delete(`0)">
            <summary>
            Deletes the source from storage.
            </summary>
            <param name="source">An instance of TSource.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicBase`1.Delete(FlyweightObjects.IQueryExpression{`0})">
            <summary>
            Performs a delete on the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to delete the object.</param>
        </member>
        <member name="P:FlyweightObjects.BusinessLogicBase`1.DefaultBusinessLogicType">
            <summary>
            Gets or sets the default type of the business logic.
            </summary>
        </member>
        <member name="P:FlyweightObjects.BusinessLogicBase`1.AutoDetectBusinessLogic">
            <summary>
            Gets or sets a boolean value indicating whether the business logic class for a given type should be automatically
            detected, instantiated and invoked for an operation.
            </summary>
        </member>
        <member name="P:FlyweightObjects.BusinessLogicBase`1.FlyweightObjects#IBusinessLogic#StorageProvider">
            <summary>
            Gets or sets the IStorageProvider instance for the context.
            </summary>
        </member>
        <member name="P:FlyweightObjects.BusinessLogicBase`1.CurrentPrincipal">
            <summary>
            Gets the <see cref="T:FlyweightObjects.ISecurityPrincipal"/> for the current operation.
            </summary>
        </member>
        <member name="T:FlyweightObjects.BusinessLogicFactory">
            <summary>
            Creates new instances of business logic classes given a type parameter and business logic assembly.
            </summary>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicFactory.GetBusinessLogic(System.Type)">
            <summary>
            Returns an <see cref="T:FlyweightObjects.IBusinessLogic"/> using the supplied default business logic type.
            </summary>
            <param name="defaultBusinessLogicType">The default business logic type to create.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicFactory.GetBusinessLogic(FlyweightObjects.IBusinessLogic)">
            <summary>
            Returns an <see cref="T:FlyweightObjects.IBusinessLogic"/> using the supplied default business logic type.
            </summary>
            <param name="context">The current calling context.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicFactory.GetBusinessLogic``1(FlyweightObjects.IBusinessLogic)">
            <summary>
            Returns an appropriate business logic instance for the specified type of T.
            </summary>
            <typeparam name="T">The type of business logic to create.</typeparam>
            <param name="context">The current calling context.</param>
        </member>
        <member name="M:FlyweightObjects.BusinessLogicFactory.GetBusinessLogic``1(System.Type)">
            <summary>
            Returns an appropriate business logic instance for the specified type of T.
            </summary>
            <typeparam name="T">The type of business logic to create.</typeparam>
            <param name="defaultBusinessLogicType">The default business logic type to create if one for T cannot be found.</param>
        </member>
        <member name="T:FlyweightObjects.CacheManager">
            <summary>
            Provides the default caching functionality to be used by the <see cref="T:FlyweightObjects.DataContext"/>. Note that the domain model must be adorned with a <see cref="T:FlyweightObjects.DataTableAttribute"/> 
            and the attribute itself must have <see cref="P:FlyweightObjects.DataTableAttribute.EnableCaching"/> set to true.
            </summary>
            <example>
            <code>
            <![CDATA[
            [DataTable("Production.Product", EnableCaching=true, CacheTimeout=300)]
            public class MyProduct : IRedundancyCheck
            {
                [DataColumn("ProductID", Identifier = true)]
                public int ProductID { get; set; }
                
                [DataColumn("ModifiedDate")]
                public DateTime ModifiedDate { get; set; }
                
            	[PropertyTorage]
                public string Checksum { get; set; }
                
            	[Computed]
                public bool IsChanged
                {
                    get { return new ChecksumBuilder().BuildChecksum(this) != this.Checksum; }
                }
            }
            
            class Program
            {
                static void Main(string[] args)
                {
                    using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
                    {
                        context.CacheManager.Enabled = true;
                        MyProduct p1 = context.Select<MyProduct>(1).ToSingle();
                        Console.Writeline("Elapsed Time: {0}", context.ElapsedMilliseconds);
                        MyProduct p2 = context.Select<MyProduct>(1).ToSingle();
                        Console.Writeline("Elapsed Time: {0}", context.ElapsedMilliseconds);
                    }     
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:FlyweightObjects.ICacheManager">
            <summary>
            Represents all required functionality to manage a cache of objects.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ICacheManager.BuildCacheKey``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns a string representing a key which may used to uniquely identify a command, including the depth by which it was retrieved.
            </summary>
            <typeparam name="T">The type for which the cache key should be built.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used as the command.</param>
        </member>
        <member name="M:FlyweightObjects.ICacheManager.BuildCacheKey``1(FlyweightObjects.PreloadDepth,FlyweightObjects.IStorageCommand)">
            <summary>
            Returns a string representing a key which may used to uniquely identify a command, including the depth by which it was retrieved.
            </summary>
            <typeparam name="T">The type for which the cache key should be built.</typeparam>
            <param name="depth">The depth by which to interrogate the object graph.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used as the command.</param>
        </member>
        <member name="M:FlyweightObjects.ICacheManager.BuildCacheKey``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.IStorageCommand)">
            <summary>
            Returns a string representing a key which may used to uniquely identify a command, including the options associated to its retrieval.
            </summary>
            <typeparam name="T">The type for which the cache key should be built.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used as the command.</param>
        </member>
        <member name="M:FlyweightObjects.ICacheManager.AddObject``1(System.String,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the supplied object to the cache.
            </summary>
            <typeparam name="T">The type to add.</typeparam>
            <param name="key">The unique key to give to the item.</param>
            <param name="timeToLive">The length of time the object should live in the cache.</param>
            <param name="source">The instance object to cache.</param>
        </member>
        <member name="M:FlyweightObjects.ICacheManager.TryGetObject``1(System.String,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether teh object exists in the cache. If it does, result
            be set to the object, otherwise if will its default value.
            </summary>
            <typeparam name="T">The type to search.</typeparam>
            <param name="key">The unique key for the item.</param>
            <param name="result">The item if it exists in the cache, otherwise its default value.</param>
            <returns></returns>
        </member>
        <member name="M:FlyweightObjects.ICacheManager.GetObject``1(System.String)">
            <summary>
            Returns the object from the cache.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <param name="key">The unique key for the item.</param>
        </member>
        <member name="M:FlyweightObjects.ICacheManager.RemoveObject(System.String)">
            <summary>
            Removes the object from the cache using the provided key.
            </summary>
            <param name="key">The unique key for the item.</param>
        </member>
        <member name="M:FlyweightObjects.ICacheManager.Contains(System.String)">
            <summary>
            Returns a boolean value indicating whether the item exists in the cache based upon the supplied key.
            </summary>
            <param name="key">The unique key for the item.</param>
            <returns></returns>
        </member>
        <member name="M:FlyweightObjects.ICacheManager.Flush">
            <summary>
            Clears the cache of all items.
            </summary>
        </member>
        <member name="E:FlyweightObjects.ICacheManager.ItemAdded">
            <summary>
            Represents an event that is fired when an item is added to the cache.
            </summary>
        </member>
        <member name="E:FlyweightObjects.ICacheManager.ItemRemoved">
            <summary>
            Represents an event that is fired when an item is removed from the cache.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ICacheManager.Enabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:FlyweightObjects.ICacheManager"/> should be enabled.
            </summary>
        </member>
        <member name="M:FlyweightObjects.CacheManager.BuildCacheKey``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns a string representing a key which may used to uniquely identify a command.
            </summary>
            <typeparam name="T">The type for which the cache key should be built.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used as the command.</param>
        </member>
        <member name="M:FlyweightObjects.CacheManager.BuildCacheKey``1(FlyweightObjects.PreloadDepth,FlyweightObjects.IStorageCommand)">
            <summary>
            Returns a string representing a key which may used to uniquely identify a command.
            </summary>
            <typeparam name="T">The type for which the cache key should be built.</typeparam>
            <param name="depth">The depth by which to interrogate the object graph.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used as the command.</param>
        </member>
        <member name="M:FlyweightObjects.CacheManager.BuildCacheKey``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.IStorageCommand)">
            <summary>
            Returns a string representing a key which may used to uniquely identify a command, including the options associated to its retrieval.
            </summary>
            <typeparam name="T">The type for which the cache key should be built.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used as the command.</param>
        </member>
        <member name="M:FlyweightObjects.CacheManager.AddObject``1(System.String,System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a new object to the cache. Be sure to call the Contains method to circumvent
            any key conflicts. This method will hold objects in memory which will self-expire
            provided that their time-to-live value is greater than zero.
            </summary>
            <param name="key">The key that uniquely defines the object.</param>
            <param name="timeToLive">The time in seconds that the object should live in the cache.</param>
            <param name="source">The object to cache.</param>
        </member>
        <member name="M:FlyweightObjects.CacheManager.GetObject``1(System.String)">
            <summary>
            Returns the object from the cache.
            </summary>
            <param name="key">The key that uniquely defines the object.</param>
        </member>
        <member name="M:FlyweightObjects.CacheManager.TryGetObject``1(System.String,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean indicating whether or not the method was successful at retrieving
            ths object from the cache.
            </summary>
            <param name="key">The key that uniquely defines the object.</param>
            <param name="result">The object to return if it exists in the cache.</param>
        </member>
        <member name="M:FlyweightObjects.CacheManager.Flush">
            <summary>
            Clears the cache of all objects.
            </summary>
        </member>
        <member name="M:FlyweightObjects.CacheManager.RemoveObject(System.String)">
            <summary>
            Removes the object from the cache.
            </summary>
            <param name="key">The key that uniquely defines the object.</param>
        </member>
        <member name="M:FlyweightObjects.CacheManager.Contains(System.String)">
            <summary>
            Returns a boolean indicating whether the object exists in the cache.
            </summary>
            <param name="key">The key that uniquely defines the object.</param>
        </member>
        <member name="E:FlyweightObjects.CacheManager.ItemAdded">
            <summary>
            Represents an event that is fired when an item is added to the cache.
            </summary>
        </member>
        <member name="E:FlyweightObjects.CacheManager.ItemRemoved">
            <summary>
            Represents an event that is fired when an item is removed from the cache.
            </summary>
        </member>
        <member name="P:FlyweightObjects.CacheManager.Enabled">
            <summary>
            Gets or sets a boolean value indicating whether the cache is enabled.
            </summary>
        </member>
        <member name="T:FlyweightObjects.CacheItem">
            <summary>
            Provides an encapsulating structure for a cached object.
            </summary>
        </member>
        <member name="M:FlyweightObjects.CacheItem.#ctor(System.Object)">
            <summary>
            Constructs a new CacheItem.
            </summary>
            <param name="obj">The object to cache.</param>
        </member>
        <member name="M:FlyweightObjects.CacheItem.#ctor(System.String,System.DateTime,System.Int32,System.Object)">
            <summary>
            Constructs a new CacheItem.
            </summary>
            <param name="key">The unique key that is used to identify this item in the cache.</param>
            <param name="timeCached">The date and time the object was placed in cache.</param>
            <param name="timeToLive">The duration that the item should be cached.</param>
            <param name="obj">The object to cache.</param>
        </member>
        <member name="M:FlyweightObjects.CacheItem._timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Removes the instance of itself once the timer has expired.
            </summary>
            <param name="sender">Timer</param>
            <param name="e">ElapsedEventArgs</param>
        </member>
        <member name="E:FlyweightObjects.CacheItem.TimeElapsed">
            <summary>
            Represents an event called when an object has expired.
            </summary>
        </member>
        <member name="P:FlyweightObjects.CacheItem.Key">
            <summary>
            Gets the key that corresponds to this cache item.
            </summary>
        </member>
        <member name="P:FlyweightObjects.CacheItem.TimeCached">
            <summary>
            Gets the DateTime value the object was placed in cache.
            </summary>
        </member>
        <member name="P:FlyweightObjects.CacheItem.TimeToLive">
            <summary>
            Gets the duration that the item should be cached.
            </summary>
        </member>
        <member name="P:FlyweightObjects.CacheItem.Item">
            <summary>
            Gets the object held in memory.
            </summary>
        </member>
        <member name="T:FlyweightObjects.IPropertyChangedTrackable">
            <summary>
            Represents a class with the ability to track changes to individual properties.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IPropertyChangedTrackable.ChangedProperties">
            <summary>
            Gets the collection of properties that have been changed.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ISecurityPrincipal">
            <summary>
            Represents information about the current principal who has made a request to the server.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ISecurityPrincipal.MachineName">
            <summary>
            Gets the local host name of the client's machine.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ISecurityPrincipal.RuntimeVersion">
            <summary>
            Gets the current version of the .NET runtime.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ISecurityPrincipal.Properties">
            <summary>
            Gets a serializable dictionary of dynamic properties.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ILiteral">
            <summary>
            Represents the interface for a literal value to be specified in a SELECT statement.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ILiteral.Constant">
            <summary>
            The constant value of the selection.
            </summary>
        </member>
        <member name="T:FlyweightObjects.Literal`1">
            <summary>
            Represents a class for a literal value to be specified in a SELECT statement.
            </summary>
            <typeparam name="T">The primitive type for the constant value which should be selected.</typeparam>
        </member>
        <member name="T:FlyweightObjects.PropertyExpression">
            <summary>
            Represents a property for an object which can be used in creating <see cref="T:FlyweightObjects.QueryExpression`1"/> queries.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.#ctor">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.#ctor(System.Type,System.String)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="parentType">The class that contains the specified property.</param>
            <param name="propertyName">The property name that is adorned with a <see cref="P:FlyweightObjects.PropertyExpression.DataColumnAttribute"/>.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.op_Addition(FlyweightObjects.PropertyExpression,System.Double)">
            <summary>
            Overrides the addition operator.
            </summary>
            <param name="expression">The expression to be added to.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.op_Subtraction(FlyweightObjects.PropertyExpression,System.Double)">
            <summary>
            Overrides the substraction operator.
            </summary>
            <param name="expression">The expression from which to subtract.</param>
            <param name="value">The value to subtract.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.op_Multiply(FlyweightObjects.PropertyExpression,System.Double)">
            <summary>
            Overrides the multiplication operator.
            </summary>
            <param name="expression">The expression to multiply.</param>
            <param name="value">The value to multiply.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.op_Division(FlyweightObjects.PropertyExpression,System.Double)">
            <summary>
            Overrides the division operator.
            </summary>
            <param name="expression">The expression to divide.</param>
            <param name="value">The value by which to divide.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.op_Equality(FlyweightObjects.PropertyExpression,System.Object)">
            <summary>
            Overrides the equal to operator.
            </summary>
            <param name="expression">The first expression in the comparison.</param>
            <param name="value">The object to be compared.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.op_Inequality(FlyweightObjects.PropertyExpression,System.Object)">
            <summary>
            Overrides the not equal to operator.
            </summary>
            <param name="expression">The first expression in the comparison.</param>
            <param name="value">The object to be compared.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.op_GreaterThan(FlyweightObjects.PropertyExpression,System.Object)">
            <summary>
            Overrides the greater than operator.
            </summary>
            <param name="expression">The first expression in the comparison.</param>
            <param name="value">The object to be compared.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.op_LessThan(FlyweightObjects.PropertyExpression,System.Object)">
            <summary>
            Overrides the less than operator.
            </summary>
            <param name="expression">The first expression in the comparison.</param>
            <param name="value">The object to be compared.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.op_GreaterThanOrEqual(FlyweightObjects.PropertyExpression,System.Object)">
            <summary>
            Overrides the greater than or equal to operator.
            </summary>
            <param name="expression">The first expression in the comparison.</param>
            <param name="value">The object to be compared.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.op_LessThanOrEqual(FlyweightObjects.PropertyExpression,System.Object)">
            <summary>
            Overrides the less than or equal to operator.
            </summary>
            <param name="expression">The first expression in the comparison.</param>
            <param name="value">The object to be compared.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.op_BitwiseAnd(FlyweightObjects.PropertyExpression,FlyweightObjects.PropertyExpression)">
            <summary>
            Overrides the Or operator.
            </summary>
            <param name="expression1">The original expression to receive the and-ing.</param>
            <param name="expression2">The additional expression to be and-ed.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.op_BitwiseOr(FlyweightObjects.PropertyExpression,FlyweightObjects.PropertyExpression)">
            <summary>
            Overrides the And operator.
            </summary>
            <param name="expression1">The original expression to receive the or-ing.</param>
            <param name="expression2">The additional expression to be or-ed.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.op_True(FlyweightObjects.PropertyExpression)">
            <summary>
            Overrides the true operator.
            </summary>
            <param name="expression">The expression to be true-ed.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.op_False(FlyweightObjects.PropertyExpression)">
            <summary>
            Overrides the false operator.
            </summary>
            <param name="expression">The expression to be false-ed.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Equals(System.Object)">
            <summary>
            Determines whether the current object equals obj.
            </summary>
            <param name="obj">The object to compare.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.GetHashCode">
            <summary>
            Serves as a hash function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.ToString">
            <summary>
            Returns the abstracted member name of the expression if applicable, otherwise the type name.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Add(System.Double)">
            <summary>
            Represents the addition operator.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Subtract(System.Double)">
            <summary>
            Represents the subtraction operator.
            </summary>
            <param name="value">The value to subtract.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Multiply(System.Double)">
            <summary>
            Represents the multiplication operator.
            </summary>
            <param name="value">The value to multiply.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Divide(System.Double)">
            <summary>
            Represents the division operator.
            </summary>
            <param name="value">The value by which to divide.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.EqualTo(System.Object)">
            <summary>
            Represents the equal operator.
            </summary>
            <param name="value">The value to be evaluated or the source of the set.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.NotEqualTo(System.Object)">
            <summary>
            Represents the not equal to operator.
            </summary>
            <param name="value">The value to be evaluated.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.GreaterThan(System.Object)">
            <summary>
            Represents the greater than operator.
            </summary>
            <param name="value">The value to be evaluated.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.LessThan(System.Object)">
            <summary>
            Represents the less than operator.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.In(System.Object[])">
            <summary>
            Represents a Data Manipulation Language (DML) IN keyword.
            </summary>
            <param name="values">The values to search for.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.NotIn(System.Object[])">
            <summary>
            Represents a Data Manipulation Language (DML) NOT IN keywords.
            </summary>
            <param name="values">The values to search for.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.In(System.Collections.IEnumerable)">
            <summary>
            Represents a Data Manipulation Language (DML) IN keyword.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IEnumerable"/> of values.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.NotIn(System.Collections.IEnumerable)">
            <summary>
            Represents a Data Manipulation Language (DML) NOT IN keywords.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IEnumerable"/> of values.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Represents the greater than or equal to operator.
            </summary>
            <param name="value">The value to be evaluated.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.LessThanOrEqualTo(System.Object)">
            <summary>
            Represents the less than or equal to operator.
            </summary>
            <param name="value">The value to be evaluated.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Like(System.String)">
            <summary>
            Represents the Data Manipulation Language (DML) LIKE keyword. Note you must provide a wild-card character when
            calling this method.
            </summary>
            <param name="value">The value to be evaluated.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.NotLike(System.String)">
            <summary>
            Represents the Data Manipulation Language (DML) NOT LIKE keywords. Note you must provide a wild-card character when
            calling this method.
            </summary>
            <param name="value">The value to be evaluated.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Contains(System.String)">
            <summary>
            Represents the Data Manipulation Language (DML) Like operator with wildcards on both sides of value. 
            </summary>
            <param name="value">The value to search for.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.StartsWith(System.String)">
            <summary>
            Determines if the beginning of the string in storage matches the specified string.
            </summary>
            <param name="value">The value to search for.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.EndsWith(System.String)">
            <summary>
            Determines if the ending of the string in storage matches the specified string.
            </summary>
            <param name="value">The value to search for.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.NotContains(System.String)">
            <summary>
            Represents the Data Manipulation Language (DML) Not Like operator with wildcards on both sides of value. 
            </summary>
            <param name="value">The value to search for.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.IsNull">
            <summary>
            Represents the Data Manipulation Language (DML) IS NULL keywords.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.IsNotNull">
            <summary>
            Represents the Data Manipulation Language (DML) IS NOT NULL keywords.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Between(System.Object,System.Object)">
            <summary>
             Represents the Data Manipulation Language (DML) BETWEEN keyword.
            </summary>
            <param name="value1">The lowest value.</param>
            <param name="value2">The highest value.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.NotBetween(System.Object,System.Object)">
            <summary>
             Represents the Data Manipulation Language (DML) NOT BETWEEN keywords.
            </summary>
            <param name="value1">The lowest value.</param>
            <param name="value2">The highest value.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.As(System.String)">
            <summary>
            Represents the Data Manipulation Language (DML) AS keyword.
            </summary>
            <param name="alias">The alias name.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Count">
            <summary>
            Represents the Data Manipulation Language (DML) COUNT aggregate function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Count(System.Boolean)">
            <summary>
            Represents the Data Manipulation Language (DML) COUNT DISTINCT aggregate function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Avg">
            <summary>
            Represents the Data Manipulation Language (DML) AVG aggregate function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Min">
            <summary>
            Represents the Data Manipulation Language (DML) MIN aggregate function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Max">
            <summary>
            Represents the Data Manipulation Language (DML) MAX aggregate function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Length">
            <summary>
            Represents the Data Manipulation Language (DML) Length function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.ToUpper">
            <summary>
            Converts the value to upper case.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.ToLower">
            <summary>
            Converts the value to lower case.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Trim">
            <summary>
            Removes beginning and trailing white space.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.TrimStart">
            <summary>
            Removes beginning white space.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.TrimEnd">
            <summary>
            Removes trailing white space.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Substring(System.Int32)">
            <summary>
             Represents the Data Manipulation Language (DML) SUBSTR function.
            </summary>
            <param name="startIndex">The starting first character in the string.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Substring(System.Int32,System.Int32)">
            <summary>
             Represents the Data Manipulation Language (DML) SUBSTR function.
            </summary>
            <param name="startIndex">The starting first character in the string.</param>
            <param name="length">Determines how many characters to return in the string.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Sum">
            <summary>
            Represents the Data Manipulation Language (DML) SUM aggregate function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.And(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the Data Manipulation Language (DML) AND keyword to be used as part of a WHERE condition.
            </summary>
            <param name="expression">The additional criteria to serve as the search criteria.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Or(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the Data Manipulation Language (DML) OR operator to be used as part of a WHERE condition.
            </summary>
            <param name="expression">The additional criteria to serve as the search criteria.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Asc">
            <summary>
            Represents the Data Manipulation Language (DML) ASC keyword.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression.Desc">
            <summary>
            Represents the Data Manipulation Language (DML) DESC operator.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.IsEmpty">
            <summary>
            Gets a boolean value indicating whether or not the <see cref="T:FlyweightObjects.PropertyExpression"/> has been initialized.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.PropertyAlias">
            <summary>
            Gets or sets the alias for the selected property.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.ParentType">
            <summary>
            Gets the type which exposes the property being expressed.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.Name">
            <summary>
            Gets the name of the property being expressed.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.DataColumnAttribute">
            <summary>
            Gets the <see cref="P:FlyweightObjects.PropertyExpression.DataColumnAttribute"/> for the currrent <see cref="T:FlyweightObjects.PropertyExpression"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.DataTableAttribute">
            <summary>
            Gets the <see cref="P:FlyweightObjects.PropertyExpression.DataTableAttribute"/> of the expressed property's <see cref="P:FlyweightObjects.PropertyExpression.DataColumnAttribute"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.DataColumnName">
            <summary>
            Gets the name of the column for the currrent <see cref="T:FlyweightObjects.PropertyExpression"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.OperatorExpression">
            <summary>
            Gets or sets the operator expression for the currrent <see cref="T:FlyweightObjects.PropertyExpression"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.ArgumentData">
            <summary>
            Gets or sets the arguments specified for the currrent <see cref="T:FlyweightObjects.PropertyExpression"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.Functions">
            <summary>
            Gets or sets the functions for the currrent <see cref="T:FlyweightObjects.PropertyExpression"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.ChildExpressions">
            <summary>
            Gets or sets the child expressions for the currrent <see cref="T:FlyweightObjects.PropertyExpression"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.LogicalExpression">
            <summary>
            Gets or sets the logical expression for the currrent <see cref="T:FlyweightObjects.PropertyExpression"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.UnaryExpression">
            <summary>
            Gets or sets the unary expressions for the currrent <see cref="T:FlyweightObjects.PropertyExpression"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.SortingExpression">
            <summary>
            Gets or sets the sorting expressions for the currrent <see cref="T:FlyweightObjects.PropertyExpression"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression.ExpressionType">
            <summary>
            Gets the <see cref="T:FlyweightObjects.PropertyExpressionType"/> for the current <see cref="T:FlyweightObjects.PropertyExpression"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.Literal`1.#ctor(`0)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="value">The primitive type for the constant value which should be selected.</param>
        </member>
        <member name="M:FlyweightObjects.Literal`1.Value(`0)">
            <summary>
            Specifies the literal value which should be selected.
            </summary>
            <param name="value">The constant value which should be selected.</param>
        </member>
        <member name="P:FlyweightObjects.Literal`1.Constant">
            <summary>
            The constant value of the selection.
            </summary>
        </member>
        <member name="P:FlyweightObjects.Literal`1.IsEmpty">
            <summary>
            Gets a boolean value indicating whether or not the <see cref="T:FlyweightObjects.Literal`1"/> has been initialized.
            </summary>
        </member>
        <member name="P:FlyweightObjects.Literal`1.FlyweightObjects#ILiteral#Constant">
            <summary>
            
            </summary>
        </member>
        <member name="T:FlyweightObjects.Pagination">
            <summary>
            Represents pagination details for a <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.Pagination.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="minValue">The starting minimum value for the paging.</param>
            <param name="maxValue">The maximum ending value for the paging.</param>
        </member>
        <member name="M:FlyweightObjects.Pagination.#ctor(System.Int32,System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="minValue">The starting minimum value for the paging.</param>
            <param name="maxValue">The maximum ending value for the paging.</param>
            <param name="sortingExpressions">The sorting expression for the row number field.</param>
        </member>
        <member name="P:FlyweightObjects.Pagination.MinValue">
            <summary>
            Gets or sets the starting minimum value for the paging.
            </summary>
        </member>
        <member name="P:FlyweightObjects.Pagination.MaxValue">
            <summary>
            Gets or sets the maximum ending value for the paging.
            </summary>
        </member>
        <member name="P:FlyweightObjects.Pagination.SortingExpressions">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> for the paging.
            </summary>
        </member>
        <member name="P:FlyweightObjects.Pagination.Alias">
            <summary>
            Gets the alias for the row number field.
            </summary>
        </member>
        <member name="T:FlyweightObjects.PreloadOptions`1">
            <summary>
            Represents additional loading options that can be specified when querying relational storage.
            </summary>
            <typeparam name="T">The type parameter of primary object.</typeparam>
        </member>
        <member name="M:FlyweightObjects.PreloadOptions`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PreloadOptions`1.LoadWith(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specifies the data relations that should be selected with T.
            </summary>
            <param name="expressions"></param>
        </member>
        <member name="M:FlyweightObjects.PreloadOptions`1.ValidateProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified property is a valid data relation.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PreloadOptions`1.Properties">
            <summary>
            Gets a list of <see cref="T:System.Reflection.PropertyInfo"/> objects specified when the class was constructed.
            </summary>
        </member>
        <member name="T:FlyweightObjects.PropertyOf`1">
            <summary>
            Represents a class which can return stongly typed property names.
            </summary>
            <typeparam name="TSource">The type of the class for which ti find the member.</typeparam>
        </member>
        <member name="M:FlyweightObjects.PropertyOf`1.Name``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the name of the specified property.
            </summary>
            <typeparam name="T">The type that the property must expose.</typeparam>
            <param name="expression">The expression for the property.</param>
        </member>
        <member name="T:FlyweightObjects.Query`1">
            <summary>
            Represents a query to issued to the database/
            </summary>
            <typeparam name="T">The type the query should return.</typeparam>
        </member>
        <member name="M:FlyweightObjects.Query`1.With">
            <summary>
            Returns an <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FlyweightObjects.RowState">
            <summary>
            Represents the states of the row.
            </summary>
        </member>
        <member name="F:FlyweightObjects.RowState.Unchanged">
            <summary>
            The row is unchanged.
            </summary>
        </member>
        <member name="F:FlyweightObjects.RowState.Detached">
            <summary>
            The row has been created but not yet added to a <see cref="T:FlyweightObjects.ResultSet.RowCollection"/>.
            </summary>
        </member>
        <member name="F:FlyweightObjects.RowState.Added">
            <summary>
            The row has been added to a <see cref="T:FlyweightObjects.ResultSet.RowCollection"/>.
            </summary>
        </member>
        <member name="F:FlyweightObjects.RowState.Deleted">
            <summary>
            The row has been removed from a <see cref="T:FlyweightObjects.ResultSet.RowCollection"/>.
            </summary>
        </member>
        <member name="F:FlyweightObjects.RowState.Modified">
            <summary>
            The row's values have been modified.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ResultSet">
            <summary>
            Represents a light weight result set.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.#ctor">
            <summary>
            Creates a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.#ctor(System.Type)">
            <summary>
            Creates a new instance of the class, specifying the type from which to build meta-data.
            </summary>
            <param name="type">The type that will use this <see cref="T:FlyweightObjects.ResultSet"/> as a data source.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.#ctor(FlyweightObjects.ResultSet.ColumnCollection)">
            <summary>
            Creates a new instance of the class, specifying the type from which to build meta-data.
            </summary>
            <param name="columns">The <see cref="T:FlyweightObjects.ResultSet.ColumnCollection"/> from which to build.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.#ctor(System.Type,System.Data.IDataReader)">
            <summary>
            Creates a new instance of the class, specifying the type from which to build meta-data.
            </summary>
            <param name="type">The type that will use this <see cref="T:FlyweightObjects.ResultSet"/> as a data source.</param>
            <param name="reader">An <see cref="T:System.Data.IDataReader"/> from which to build rows.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.SuspendEvents">
            <summary>
            Suspends all events associated with manipulating row data.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.ResumeEvents">
            <summary>
            Resumes all events associated with manipulating row data.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.NewRow">
            <summary>
            Creates a new, detached row.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.NewRow(System.Object[])">
            <summary>
            Creates a new, detached row.
            </summary>
            <param name="itemArray">The field data for which to create the row.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.OnRowAdded(FlyweightObjects.ResultSet.Row)">
            <summary>
            Called when a row is added.
            </summary>
            <param name="row">The added row.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.OnRowUpdated(FlyweightObjects.ResultSet.Row)">
            <summary>
            Called when a row is updated.
            </summary>
            <param name="row">The updated row.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.OnRowDeleted(FlyweightObjects.ResultSet.Row)">
            <summary>
            Called when a row is deleted.
            </summary>
            <param name="row">The deleted row.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.BuildReaderDefinition(System.Data.IDataReader)">
            <summary>
            Builds the colimnar defintion for the <see cref="T:FlyweightObjects.ResultSet"/> using the supplied <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> by which to create the columnar definition.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.BuildTypeDefinition">
            <summary>
            Builds the columnar defintion for the <see cref="T:FlyweightObjects.ResultSet"/> using the type.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.Merge(FlyweightObjects.ResultSet)">
            <summary>
            Merges the current <see cref="T:FlyweightObjects.ResultSet"/> column and rows with the supplied <see cref="T:FlyweightObjects.ResultSet"/>.
            </summary>
            <param name="resultSet">The <see cref="T:FlyweightObjects.ResultSet"/> to merge.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.Merge(FlyweightObjects.ResultSet.Row)">
            <summary>
            Merges the current <see cref="T:FlyweightObjects.ResultSet.Row"/> with the supplied <see cref="T:FlyweightObjects.ResultSet.Row"/>.
            </summary>
            <param name="row">The <see cref="T:FlyweightObjects.ResultSet.Row"/> to merge.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.MergeColumns(FlyweightObjects.ResultSet.ColumnCollection)">
            <summary>
            Merges the current <see cref="T:FlyweightObjects.ResultSet"/> with the supplied <see cref="T:FlyweightObjects.ResultSet.ColumnCollection"/>.
            </summary>
            <param name="columns">The <see cref="T:FlyweightObjects.ResultSet.ColumnCollection"/> to merge.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.MergeRow(FlyweightObjects.ResultSet.Row)">
            <summary>
            Merges the the supplied <see cref="T:FlyweightObjects.ResultSet.ColumnCollection"/>.
            </summary>
            <param name="row">The <see cref="T:FlyweightObjects.ResultSet.Row"/> to merge.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.Copy">
            <summary>
            Performs a deep clone of the <see cref="T:FlyweightObjects.ResultSet"/> including all colums and rows.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.Clone">
            <summary>
            Performs a shallow, memberwise clone of the <see cref="T:FlyweightObjects.ResultSet"/>.
            </summary>
        </member>
        <member name="E:FlyweightObjects.ResultSet.RowAdded">
            <summary>
            Represents an event that is fired when a <see cref="T:FlyweightObjects.ResultSet.Row"/> is added.
            </summary>
        </member>
        <member name="E:FlyweightObjects.ResultSet.RowUpdated">
            <summary>
            Represents an event that is fired when a <see cref="T:FlyweightObjects.ResultSet.Row"/> is updated.
            </summary>
        </member>
        <member name="E:FlyweightObjects.ResultSet.RowDeleted">
            <summary>
            Represents an event that is fired when a <see cref="T:FlyweightObjects.ResultSet.Row"/> is deleted.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.ElementType">
            <summary>
            Gets the type which uses this <see cref="T:FlyweightObjects.ResultSet"/> as a data source.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Name">
            <summary>
            Gets or sets the name of the <see cref="T:FlyweightObjects.ResultSet"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.RecordsAffected">
            <summary>
            Gets the number of records affected by the statement used to populate this <see cref="T:FlyweightObjects.ResultSet"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Columns">
            <summary>
            Gets or sets the columnar defintions for the <see cref="T:FlyweightObjects.ResultSet"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Rows">
            <summary>
            Gets or set the row definitions for the <see cref="T:FlyweightObjects.ResultSet"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.DeletedRows">
            <summary>
            Gets the deleted rows for the <see cref="T:FlyweightObjects.ResultSet"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.EventsSuspended">
            <summary>
            Gets a boolean value indicating whether the events are suspended. 
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.SchemaGuid">
            <summary>
            Gets a unique Id for the <see cref="T:FlyweightObjects.ResultSet"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.SynchronzedSchemaGuids">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.HashSet`1"/> representing shemata which have been synchronized.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ResultSet.Column">
            <summary>
            Represents a column for a given <see cref="P:FlyweightObjects.ResultSet.Column.ResultSet"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.Column.#ctor(System.String,System.Type)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="name">The column name.</param>
            <param name="dataType">The type of the column.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.Column.Clone">
            <summary>
            Clones the current column.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.ResultSet">
            <summary>
            Gets the parent <see cref="P:FlyweightObjects.ResultSet.Column.ResultSet"/> for the column.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.Name">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.Type">
            <summary>
            Gets the type of the data to be stored in the colum.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.AllowDBNull">
            <summary>
            Gets or sets whether the column can except <see cref="F:System.DBNull.Value"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.AutoIncrement">
            <summary>
            Gets or sets whether the column is automatically incremented by the underlying provider.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.Caption">
            <summary>
            Gets or sets the caption for the column.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.ColumnType">
            <summary>
            Gets or set the <see cref="T:System.Data.DbType"/> for the column.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.Computed">
            <summary>
            Gets or sets a value indicating whether the column is computed by the underlying provider.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.HasDefault">
            <summary>
            Gets or sets a value indicating whether the column has a default.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.Identifier">
            <summary>
            Gets or sets a value indicating whether the column particiaptes as a key indentifer.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the column should be considered read only.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.SequenceName">
            <summary>
            Get or sets a value specifying the sequence name underlying provider (Oracle only). 
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.Size">
            <summary>
            Gets or sets a value specifying the size of the column.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.AllowPreload">
            <summary>
            Gets or sets a value indicating whether the column can be pre-loaded.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.IsDataRelation">
            <summary>
            Gets a boolean value indicating whether the column represents a <see cref="T:FlyweightObjects.DataRelationAttribute"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.MappedProperty">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.PropertyInfo"/> associated with the column.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Column.ColumnIndex">
            <summary>
            Gets the index of the column.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ResultSet.Row">
            <summary>
            Represents a row of data found within a <see cref="P:FlyweightObjects.ResultSet.Row.ResultSet"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.Row.#ctor(FlyweightObjects.ResultSet.RowCollection,System.Object[])">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="rows">The parent <see cref="T:FlyweightObjects.ResultSet.RowCollection"/>.</param>
            <param name="itemArray">The item data for the row.</param>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Row.ResultSet">
            <summary>
            Gets the parent <see cref="P:FlyweightObjects.ResultSet.Row.ResultSet"/> for the row.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Row.ItemArray">
            <summary>
            Gets or sets the item data for the row.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Row.RowState">
            <summary>
            Gets or sets the <see cref="P:FlyweightObjects.ResultSet.Row.RowState"/> for the row.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Row.RowIndex">
            <summary>
            Gets the index of the row.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Row.Item(System.Int32)">
            <summary>
            Gets a value for the supplied index.
            </summary>
            <param name="index">The zero-based index of the column.</param>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Row.Item(System.String)">
            <summary>
            Gets a value for the supplied index.
            </summary>
            <param name="index">An string specifying the column's name.</param>
        </member>
        <member name="P:FlyweightObjects.ResultSet.Row.IsChanged">
            <summary>
            Gets a boolean value determining whether the row has been modified.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ResultSet.ColumnCollection">
            <summary>
            Represents a collection of <see cref="T:FlyweightObjects.ResultSet.Column"/>s.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.ColumnCollection.#ctor(FlyweightObjects.ResultSet)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="resultSet">The parent <see cref="P:FlyweightObjects.ResultSet.ColumnCollection.ResultSet"/> for the collection.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.ColumnCollection.#ctor">
            <summary>
            Creates a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.ColumnCollection.IndexOf(FlyweightObjects.ResultSet.Column)">
            <summary>
            Gets the index of the supplied <see cref="T:FlyweightObjects.ResultSet.Column"/>.
            </summary>
            <param name="column">The column for which to retrieve the index.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.ColumnCollection.Add(FlyweightObjects.ResultSet.Column)">
            <summary>
            Adds a new <see cref="T:FlyweightObjects.ResultSet.Column"/> to the collection.
            </summary>
            <param name="column">The column to add.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.ColumnCollection.Contains(System.String)">
            <summary>
            Returns a boolean value indicating whether the column exists.
            </summary>
            <param name="columnName">The name of the column.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.ColumnCollection.Clear">
            <summary>
            Clears the collection of all columns.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.ColumnCollection.Contains(FlyweightObjects.ResultSet.Column)">
            <summary>
            Returns a boolean value indicating whether the column exists.
            </summary>
            <param name="column">The <see cref="T:FlyweightObjects.ResultSet.Column"/> for which to search.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.ColumnCollection.CopyTo(FlyweightObjects.ResultSet.Column[],System.Int32)">
            <summary>
            Copies the columns in the collection to the specified array.
            </summary>
            <param name="array">The target array of columns.</param>
            <param name="arrayIndex">The zero-based index by which to start the copy.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.ColumnCollection.Clone">
            <summary>
            Returns a memberwise clone of the current collection.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.ColumnCollection.Remove(FlyweightObjects.ResultSet.Column)">
            <summary>
            Removes the supplied <see cref="T:FlyweightObjects.ResultSet.Column"/> from the list.
            </summary>
            <param name="column">The column to remove.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.ColumnCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.ColumnCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.ColumnCollection.ResultSet">
            <summary>
            Gets or sets the parent <see cref="P:FlyweightObjects.ResultSet.ColumnCollection.ResultSet"/> for the collection of columns.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.ColumnCollection.Columns">
            <summary>
            Gets or sets the internally stored list of columns.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.ColumnCollection.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:FlyweightObjects.ResultSet.Column"/> given the supplied index.
            </summary>
            <param name="index">The zero-based index of the column.</param>
        </member>
        <member name="P:FlyweightObjects.ResultSet.ColumnCollection.Item(System.String)">
            <summary>
            Gets a <see cref="T:FlyweightObjects.ResultSet.Column"/> given the supplied index.
            </summary>
            <param name="index">The name of the column.</param>
        </member>
        <member name="P:FlyweightObjects.ResultSet.ColumnCollection.Count">
            <summary>
            Gets the count of the columns within the collection.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.ColumnCollection.IsReadOnly">
            <summary>
            Returns a boolean value indicating whether the collection is read only.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ResultSet.RowCollection">
            <summary>
            Represents a collection of <see cref="T:FlyweightObjects.ResultSet.Row"/>s.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.RowCollection.#ctor(FlyweightObjects.ResultSet)">
            <summary>
            Creates a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.RowCollection.InsertAt(FlyweightObjects.ResultSet.Row,System.Int32)">
            <summary>
            Inserts a row at the specified index.
            </summary>
            <param name="row">The row to insert.</param>
            <param name="index">The zero-based index at which to insert the row.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.RowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the row at the specified index.
            </summary>
            <param name="index">The zero-based index at which to remove the row.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.RowCollection.Add(FlyweightObjects.ResultSet.Row)">
            <summary>
            Adds the supplied row to the collection.
            </summary>
            <param name="row">The <see cref="T:FlyweightObjects.ResultSet.Row"/> to add.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.RowCollection.Clear">
            <summary>
            Clears the collection of all rows.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.RowCollection.Contains(FlyweightObjects.ResultSet.Row)">
            <summary>
            Returns a boolean value indicating whether the supplied row is contained in the collection.
            </summary>
            <param name="row">The <see cref="T:FlyweightObjects.ResultSet.Row"/> for which to search.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.RowCollection.CopyTo(FlyweightObjects.ResultSet.Row[],System.Int32)">
            <summary>
            Copies the rows in the collection to the specified array.
            </summary>
            <param name="array">The target array of rows.</param>
            <param name="arrayIndex">The zero-based index by which to start the copy.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.RowCollection.Remove(FlyweightObjects.ResultSet.Row)">
            <summary>
            Removes the specified <see cref="T:FlyweightObjects.ResultSet.Row"/> from the collection.
            </summary>
            <param name="row">The <see cref="T:FlyweightObjects.ResultSet.Row"/> to remove.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.RowCollection.IndexOf(FlyweightObjects.ResultSet.Row)">
            <summary>
            Returns the index for the supplied row.
            </summary>
            <param name="row">The row for which to search for the index.</param>
        </member>
        <member name="M:FlyweightObjects.ResultSet.RowCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResultSet.RowCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.RowCollection.ResultSet">
            <summary>
            Gets or sets the parent <see cref="P:FlyweightObjects.ResultSet.RowCollection.ResultSet"/> for the collection of rows.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.RowCollection.Rows">
            <summary>
            Gets or sets the internally stored list of rows.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.RowCollection.SyncRoot">
            <summary>
            Gets an object used to synchronize the collection.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.RowCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:FlyweightObjects.ResultSet.Row"/> at the specified index.
            </summary>
            <param name="index">The zero-based index by which to retrieve the row.</param>
        </member>
        <member name="P:FlyweightObjects.ResultSet.RowCollection.Count">
            <summary>
            Gets the count of rows in the collection.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResultSet.RowCollection.IsReadOnly">
            <summary>
            Returns a boolean value indicating whether the collection is read only.
            </summary>
        </member>
        <member name="T:FlyweightObjects.RuntimeMethod">
            <summary>
            Contains information about the calling method.
            </summary>
        </member>
        <member name="M:FlyweightObjects.RuntimeMethod.#ctor(System.Reflection.MethodBase,System.Type)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="method">The captured method.</param>
            <param name="typeParam">The parameter type of a generic method.</param>
        </member>
        <member name="M:FlyweightObjects.RuntimeMethod.#ctor(System.Reflection.MethodBase,System.Object[])">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="method">The captured method.</param>
            <param name="methodArgs">The captured arguments.</param>
        </member>
        <member name="M:FlyweightObjects.RuntimeMethod.#ctor(System.Reflection.MethodBase,System.Type,System.Object[])">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="method">The captured method.</param>
            <param name="typeParam">The parameter type of a generic method.</param>
            <param name="methodArgs">The captured arguments.</param>
        </member>
        <member name="P:FlyweightObjects.RuntimeMethod.MethodBase">
            <summary>
            Gets the captured method.
            </summary>
        </member>
        <member name="P:FlyweightObjects.RuntimeMethod.TypeParameters">
            <summary>
            Gets the type parameters associated with a generic method.
            </summary>
        </member>
        <member name="P:FlyweightObjects.RuntimeMethod.MethodArguments">
            <summary>
            Gets or internally sets the arguments associated with a captured method.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ChecksumBuilder">
             <summary>
             Creates and evaluates checksums as an MD5 hash.
             </summary>
             <remarks>
             The ChecksumBuilder class creates an MD5 hash of the object based upon the values of its members which have been adorned with a <see cref="T:FlyweightObjects.DataColumnAttribute"/>.
             When a class implements <see cref="T:FlyweightObjects.IRedundancyCheck"/>, the <see cref="T:FlyweightObjects.DataContext"/> automatically computes the checksum before returning the object. An 
             object can be aware of whether or not it has changes by simply comparing a new computed checksum against the original one given by the <see cref="T:FlyweightObjects.DataContext"/>. 
             Note that if an object uses the ChecksumBuilder in a public property, you must mark the property with a <see cref="T:FlyweightObjects.ComputedAttribute"/> to ensure that an infinite loop
             is not encoutered when the hash is created.
             </remarks>
             <example>
             The following example uses a manually created MyProduct class, abstracting Product from the Microsoft AdventureWorks SQL Server sample database. When
             the ModifiedDate property is changed, the IsChanged property will change its state from false to true because the newly calculated checksum is now different
             than the one supplied by the <see cref="T:FlyweightObjects.DataContext"/>.
             <code>
             <![CDATA[
             [DataTable("Production.Product", EnableCaching=true, CacheTimeout=300)]
             public class MyProduct : IRedundancyCheck
             {
                 [DataColumn("ProductID", Identifier = true)]
                 public int ProductID { get; set; }
                 
                 [DataColumn("ModifiedDate")]
                 public DateTime ModifiedDate { get; set; }
                 
            		[PropertyTorage]
                 public string Checksum { get; set; }
                 
            		[Computed]
                 public bool IsChanged
                 {
                     get { return new ChecksumBuilder().BuildChecksum(this) != this.Checksum; }
                 }
             }
            
             class Program
             {
                 static void Main(string[] args)
                 {
                     using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
                     {
                         var p = context.Select<MyProduct>(1).ToSingle();
                         Console.WriteLine("Is Changed: {0}", p.IsChanged);
            
                         p.ModifiedDate = DateTime.Now;
                         Console.WriteLine("Is Changed: {0}", p.IsChanged);
                     }
                }
            }
             ]]>
             </code>
             </example> 
        </member>
        <member name="M:FlyweightObjects.ChecksumBuilder.#ctor">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ChecksumBuilder.BuildChecksum(System.Object)">
            <summary>
            Creates a new MD5 hash from the supplied object.
            </summary>
            <param name="obj">The object from which to compute the checksum.</param>
        </member>
        <member name="M:FlyweightObjects.ChecksumBuilder.EqualsChecksum(System.String,System.String)">
            <summary>
            Determines if two checksum strings are equal.
            </summary>
            <param name="checksum1">The first checksum value.</param>
            <param name="checksum2">The second checksum value.</param>
        </member>
        <member name="M:FlyweightObjects.ChecksumBuilder.GetSortedPropertyInfos(System.Type)">
            <summary>
            Returns the object's <see cref="T:System.Reflection.PropertyInfo"/> array either from cache or from the type itself. If the <see cref="T:System.Reflection.PropertyInfo"/> array 
            is not found in the cache, then it is added after it has been sorted.
            </summary>
            <param name="type">The type to interrogate for its properties.</param>
            <returns>A sorted <see cref="T:System.Reflection.PropertyInfo"/> array.</returns>
        </member>
        <member name="M:FlyweightObjects.ChecksumBuilder.ComputeHash(System.String)">
            <summary>
            Computes a hash using an MD5 algorithm and converts it to a hexidicimal string. This method allows very
            large objects to be hashed using a very small string-based check sum value.
            </summary>
            <param name="memberValues">An appended string interpretation of the object's members.</param>
            <returns>A hexidecimal string hashed value.</returns>
        </member>
        <member name="T:FlyweightObjects.RequestMode">
            <summary>
            Specifies a request mode for interactions with a service.
            </summary>
        </member>
        <member name="F:FlyweightObjects.RequestMode.NonDeferred">
            <summary>
            Instructs the context to perform the operation immediately.
            </summary>
        </member>
        <member name="F:FlyweightObjects.RequestMode.Deferred">
            <summary>
            Instructs the context to queue all operations until ProcessDeferredRequests is called.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ClientContextBase">
            <summary>
            Represents the abstract base class for all remoting clients.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.BeginDeferredRequests">
             <summary>
             Creates a new internally held <see cref="T:FlyweightObjects.DataTransferObject"/> and stores all requests in this member variable. Not until 
             ProcessDeferredRequests is called will the requests actually be processed by the server.
             </summary>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             // Create a new TcpClientContext, specifying exposed type, URL and secure channel
             var context = new TcpClientContext(typeof(IServiceContext), @"tcp://localhost:9090/AdventureWorksServiceContext", true))
             
             // Instruct the context to queue the requests instead of processing them immediately
             context.BeginDeferredRequests();
            
             // Create a new select QueryExpression
             var qe1 = new QueryExpression<Product>()
            
             .Select(true, 0)
             .From<Product>()
             .LeftJoin<ProductDocument>(ProductDocument.Properties.ProductID == Product.Properties.ProductID)
             .Where(ProductDocument.Properties.ProductID.IsNull() || ProductDocument.Properties.ModifiedDate > DateTime.Now.AddDays(-365));
            
             // Call Select on the context. Note that we do not assign a return value as it will always be the type's default.
             context.Select<ProductDocument>(qe1);
             
             // Create a new update query
             var qe2 = new QueryExpression<Product>()
            
             .Update()
             .Set(Product.Properties.ModifiedDate == DateTime.Now)
             .Where(Product.Properties.ProductID == 355);
            
             // Call Update context Note that we do not assign a return value as it will always be the type's default.
             context.Update<Product>(qe2);
            
             // Instruct the context to process the DTO
             var dto = context.ProcessDeferredRequests();
            
             // Assign variables from the DTO request queue
             var p1 = dto.Requests.Dequeue().ReturnValue as IEnumerable<Product>;
             var p2 = dto.Requests.Dequeue().ReturnValue as Product;
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.#ctor(System.Type,FlyweightObjects.ChannelType,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="remotedType">The MarshalByRefObject type exposed by the remote service.</param>
            <param name="channelType">The type of remoting channel to use.</param>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.#ctor(System.Type,FlyweightObjects.ChannelType,System.String,System.Boolean,System.Collections.IDictionary)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="remotedType">The MarshalByRefObject type exposed by the remote service.</param>
            <param name="channelType">The type of remoting channel to use.</param>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
            <param name="properties">An <see cref="T:System.Collections.IDictionary"/> of properties specific for the client channel.</param>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.#ctor(System.Type,FlyweightObjects.ChannelType,System.String,System.Boolean,System.Boolean,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Initializes the channels for remote communication.
            </summary>
            <param name="remotedType">The MarshalByRefObject type exposed by the remote service.</param>
            <param name="channelType">The <see cref="T:FlyweightObjects.ChannelType"/> used to communicate with the service.</param>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
            <param name="loadOnDemand">A boolean value indicating whether deferred loading of objects should be enabled.</param>
            <param name="domainName">A unique name that identifies a domain for which this instance of a context is responsible.</param>
            <param name="applicationName">The name of the application which is making the request.</param>
            <param name="properties">An instance of an <see cref="T:System.Collections.IDictionary"/> representing properties for the client channel.</param>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.SerializeRequest(FlyweightObjects.DataTransferObject)">
            <summary>
            Serializes tbe request as a byte array.
            </summary>
            <param name="dto">The <see cref="T:FlyweightObjects.DataTransferObject"/> message wrapper to serialize.</param>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.DeserializeResponse(System.Byte[])">
            <summary>
            Deserializes the response from a byte array.
            </summary>
            <param name="bytes">The binary serialized <see cref="T:FlyweightObjects.DataTransferObject"/> to deserialize.</param>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.ProcessDeferredRequests">
             <summary>
             Submits the internal <see cref="T:FlyweightObjects.DataTransferObject"/> member object to the server for processing.
             </summary>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             // Create a new TcpClientContext, specifying exposed type, URL and secure channel
             var context = new TcpClientContext(typeof(IServiceContext), @"tcp://localhost:9090/AdventureWorksServiceContext", true))
             
             // Instruct the context to queue the requests instead of processing them immediately
             context.BeginDeferredRequests();
            
             // Create a new select QueryExpression
             var qe1 = new QueryExpression<Product>()
            
             .Select(true, 0)
             .From<Product>()
             .LeftJoin<ProductDocument>(ProductDocument.Properties.ProductID == Product.Properties.ProductID)
             .Where(ProductDocument.Properties.ProductID.IsNull() || ProductDocument.Properties.ModifiedDate > DateTime.Now.AddDays(-365));
            
             // Call Select on the DTO as opposed to the context. Note that we do not assign a return value as it will always be the type's default.
             context.Select<ProductDocument>(qe1);
             
             // Create a new update query
             var qe2 = new QueryExpression<Product>()
            
             .Update()
             .Set(Product.Properties.ModifiedDate == DateTime.Now)
             .Where(Product.Properties.ProductID == 355);
            
             // Call Update on the DTO as opposed to the context Note that we do not assign a return value as it will always be the type's default.
             context.Update<Product>(qe2);
            
             // Instruct the context to process the DTO
             var dto = context.ProcessDeferredRequests();
            
             // Assign variables from the DTO request queue
             var p1 = dto.Requests.Dequeue().ReturnValue as IEnumerable<Product>;
             var p2 = dto.Requests.Dequeue().ReturnValue as Product;
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.CancelDeferredRequests">
            <summary>
            Cancels the currently queued operations and puts the context back into a non-deferred state.
            </summary>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            // Create a new TcpClientContext, specifying exposed type, URL and secure channel
            var context = new TcpClientContext(typeof(IServiceContext), @"tcp://localhost:9090/AdventureWorksServiceContext", true))
            
            // Cancel all requests that may be queued
            if (context.RequestMode == RequestMode.Deferred)
            {
                context.CancelDeferredRequests();
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.ProcessDeferredRequests(FlyweightObjects.DataTransferObject)">
             <summary>
             Submits an instantiated <see cref="T:FlyweightObjects.DataTransferObject"/> object to the server for processing.
             </summary>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             // Create a new TcpClientContext, specifying exposed type, URL and secure channel
             var context = new TcpClientContext(typeof(IServiceContext), @"tcp://localhost:9090/AdventureWorksServiceContext", true))
             
             // Create a new DTO and instruct it to perform all requests within the same transactional context
             var dto = new DataTransferObject();
             dto.EnforceTransaction = true;
            
             // Create a new select QueryExpression
             var qe1 = new QueryExpression<Product>()
            
             .Select(true, 0)
             .From<Product>()
             .LeftJoin<ProductDocument>(ProductDocument.Properties.ProductID == Product.Properties.ProductID)
             .Where(ProductDocument.Properties.ProductID.IsNull() || ProductDocument.Properties.ModifiedDate > DateTime.Now.AddDays(-365));
            
             // Call Select on the DTO as opposed to the context. Note that we do not assign a return value as it will always be the type's default.
             dto.Select<ProductDocument>(qe1);
             
             // Create a new update query
             var qe2 = new QueryExpression<Product>()
            
             .Update()
             .Set(Product.Properties.ModifiedDate == DateTime.Now)
             .Where(Product.Properties.ProductID == 355);
            
             // Call Update on the DTO as opposed to the context Note that we do not assign a return value as it will always be the type's default.
             dto.Update<Product>(qe2);
            
             // Instruct the context to process the DTO
             dto = context.ProcessDeferredRequests(dto);
            
             // Assign variables from the DTO request queue
             var p1 = dto.Requests.Dequeue().ReturnValue as IEnumerable<Product>;
             var p2 = dto.Requests.Dequeue().ReturnValue as Product;
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.OnProcessing(FlyweightObjects.DataTransferEventArgs)">
            <summary>
            Called prior to processing a <see cref="T:FlyweightObjects.DataTransferObject"/>.
            </summary>
            <param name="e">The <see cref="T:FlyweightObjects.DataTransferEventArgs"/> to be processed.</param>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.GetDataTransferObject">
            <summary>
            Returns an instance of a <see cref="T:FlyweightObjects.DataTransferObject"/> based upon the <see cref="P:FlyweightObjects.ClientContextBase.RequestMode"/> of the context.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.TrySelect``1(``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                Product product = null;
                if (context.TrySelect<Product>(out product))
                {
                    Console.WriteLine("First returned name is {0}", product.Name);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.TrySelect``1(System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                IEnumerable<Product> products = null;
                if (context.TrySelect<Product>(out products))
                {
                    Console.WriteLine("Count is {0}", products.Count<Product>());
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.TrySelect``1(FlyweightObjects.PropertyExpression{``0},``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                Product product = null;
                if (context.TrySelect<Product>(Product.Properties.ProductID == 355, out product))
                {
                    Console.WriteLine("Product name is {0}", product.Name);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.TrySelect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                Product product = null;
                if (context.TrySelect<Product>(p => p.ProductID == 355, out product))
                {
                    Console.WriteLine("Product name is {0}", product.Name);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.TrySelect``1(FlyweightObjects.PropertyExpression{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> criteria used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                IEnumerable<Product> products = null;
                if (context.TrySelect<Product>(Product.Properties.ProductLine.Trim().Length() > 0 && Product.Properties.ListPrice > 0, out products))
                {
                    Console.WriteLine("Count is {0}", products.Count<Product>());
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.TrySelect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                IEnumerable<Product> products = null;
                if (context.TrySelect<Product>(p => p.ProductLine.Trim().Length() > 0 && p.ListPrice > 0, out products))
                {
                    Console.WriteLine("Count is {0}", products.Count<Product>());
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.TrySelect``1(FlyweightObjects.IQueryExpression{``0},``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                Product product = null;
                if (context.TrySelect<Product>(new QueryExpression<Product>().Select().From<Product>().Where(Product.Properties.ProductID == 355), out product))
                {
                    Console.WriteLine("Product name is {0}", product.Name);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.TrySelect``1(FlyweightObjects.IQueryExpression{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                IEnumerable<Product> products = null;
                if (context.TrySelect<Product>(new QueryExpression<Product>().Select().From<Product>().Where(Product.Properties.ProductLine.Trim().Length() > 0), out products))
                {
                    Console.WriteLine("Count is {0}", products.Count<Product>());
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.TrySelect``1(FlyweightObjects.IStorageCommand,``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.  Note the value for sql may be any object which implements 
            the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                Product product = null;
                if (context.TrySelect<Product>(new StorageCommand("SELECT * FROM Production.Product WHERE ProductID = 355"), out product))
                {
                    Console.WriteLine("Product name is {0}", product.Name);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.TrySelect``1(FlyweightObjects.IStorageCommand,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be an 
            IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.  Note the value for 
            sql may be any object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                IEnumerable<Product> products = null;
                if (context.TrySelect<Product>(new StorageCommand("SELECT * FROM Production.Product WHERE ProductLine IS NOT NULL"), out products))
                {
                    Console.WriteLine("Count is {0}", products.Count<Product>());
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Exists``1(``0)">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                Product product = context.Select<Product>(Product.Properties.ProductID == 355).ToSingle();
                if (context.Exists<Product>(product))
                {
                    Console.WriteLine("Product exists");
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Exists``1(FlyweightObjects.PropertyExpression{``0})">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                if (context.Exists<Product>(Product.Properties.ProductID == 355))
                {
                    Console.WriteLine("Product exists");
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Exists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                if (context.Exists<Product>(p => p.ProductID == 355))
                {
                    Console.WriteLine("Product exists");
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Exists``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                if (context.Exists<Product>(new QueryExpression<Product>().Select().From<Product>().Where(Product.Properties.ProductID == 355)))
                {
                    Console.WriteLine("Product exists");
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Exists``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.  Note the value for sql may be any 
            object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                if (context.Exists<Product>(new StorageCommand("SELECT * FROM Production.Product WHERE ProductID = 355")))
                {
                    Console.WriteLine("Product exists");
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1">
            <summary>
            Returns all objects for the specified type of T contained in storage.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>();
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(System.Int32)">
            <summary>
            Returns all objects for the specified type of T contained in storage constrained by the amount as specified
            by limit.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(100);
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(p => p.FinishedGoodsFlag == false || p.ModifiedDate > DateTime.Now.AddYears(-10));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(System.Int32,FlyweightObjects.PropertyExpression{``0})">
            <summary>
            Returns all objects for the specified type of T contained in storage constrained by the amount as specified
            by limit and using the criteria as specified by whereExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(100, Product.Properties.ProductLine.Trim().Length() > 0);
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns all objects for the specified type of T contained in storage constrained by the amount as specified
            by limit and using the criteria as specified by whereExpression. 
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(100, p => p.ProductLine.Trim().Length() > 0);
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(Product.Properties.ModifiedDate > DateTime.Now.AddYears(-10), Product.Properties.ProductNumber.Asc());
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions. Additional objects will be retrieved in the graph according to their level as specified
            by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(PreloadDepth.FirstRelatives, Product.Properties.ProductID.Between(350, 375), Product.Properties.ProductID.Asc());
                foreach (Product product in products)
                {
                    foreach (ProductInventory productInventory in product.ProductInventories)
                    {
                        Console.WriteLine("ProductID: {0}, LocationID: {1}, Quantity: {2}", product.ProductID, productInventory.LocationID, productInventory.Quantity);
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(PreloadDepth.FirstRelatives, Product.Properties.ProductID.Between(350, 375), Product.Properties.ProductID.Asc());
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductID: {0}", product.ProductID);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.PreloadDepth,System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions. Additional objects will be retrieved in the graph 
            according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="depth">The depth of the object graph to prefectch.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(true, 10, PreloadDepth.FirstRelatives, Product.Properties.ProductLine.Trim().Length() > 0, Product.Properties.ModifiedDate.Desc())
                foreach (Product product in products)
                {
                    foreach (ProductInventory productInventory in product.ProductInventories)
                    {
                        Console.WriteLine("ProductID: {0}, LocationID: {1}, Quantity: {2}", product.ProductID, productInventory.LocationID, productInventory.Quantity);
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.PreloadOptions{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.SortExpression`1"/> used to qualify the properties and sorting directions.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = this.Context.Select<Product>(true, 10, PreloadOptions<Product>.LoadWith(p => p.ProductProductPhotos), p => p.ProductID > 900, SortExpression<Product>.Sort(p => p.ProductID));
                foreach (var p in products)
                {
                    Console.WriteLine(p.ProductProductPhotos.Count);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.PreloadOptions{``0},System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions. Additional objects will be retrieved in the graph 
            according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions. Additional objects will be retrieved in the graph according to their level as specified
            by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(PreloadOptions<Product>.LoadWith(p => p.ProductProductPhoto), Product.Properties.ProductID.Between(350, 375), Product.Properties.ProductID.Asc());
                foreach (Product product in products)
                {
                    foreach (ProductInventory productInventory in product.ProductInventories)
                    {
                        Console.WriteLine("ProductID: {0}, LocationID: {1}, Quantity: {2}", product.ProductID, productInventory.LocationID, productInventory.Quantity);
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.IQueryExpression{``0})">
             <summary>
             Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
             </summary>
             <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
             <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 var qe = new QueryExpression<Product>()
            
                 .Select(true, 10, ProductCategory.Properties.Name)
                 .From<Product>()
                 .LeftJoin<ProductCategory>(Product.Properties.ProductSubcategoryID == ProductCategory.Properties.ProductCategoryID)
                 .Where(Product.Properties.ProductID.Between(100, 500))
                 .OrderBy(ProductCategory.Properties.Name);
            
                 var products = context.Select<Product>(qe);
                 Console.WriteLine("Count is {0}", products.Count<Product>());
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.IQueryExpression{``0})">
             <summary>
             Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
             will be retrieved in the graph according to their level as specified by depth.
             </summary>
             <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
             <param name="depth">The depth limit of the object graph.</param>
             <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 var qe = new QueryExpression<Product>()
            
                 .Select(true, 0, ProductCategory.Properties.Name)
                 .From<Product>()
                 .Join<ProductCategory>(Product.Properties.ProductSubcategoryID == ProductCategory.Properties.ProductCategoryID)
                 .Where(Product.Properties.ProductID.Between(350, 360))
                 .OrderBy(ProductCategory.Properties.Name);
            
                 var products = context.Select<Product>(PreloadDepth.FirstRelatives, qe);
                 foreach (Product product in products)
                 {
                     Console.WriteLine("ProductNumber: {0}, ProductSubcategory Name: {1}", product.ProductNumber, product.ProductSubcategory.Name);
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.IQueryExpression{``0})">
             <summary>
             Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
             will be retrieved in the graph according to their level as specified by depth.
             </summary>
             <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
             <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
             <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 var qe = new QueryExpression<Product>()
            
                 .Select(true, 10, ProductCategory.Properties.Name)
                 .From<Product>()
                 .Join<ProductCategory>(Product.Properties.ProductSubcategoryID == ProductCategory.Properties.ProductCategoryID)
                 .Where(Product.Properties.ProductID.Between(350, 360))
                 .OrderBy(ProductCategory.Properties.Name);
            
                 var products = context.Select<Product>(PreloadOptions<Product>.LoadWith(p => p.ProductProductPhotos), qe);
                 foreach (Product product in products)
                 {
                     Console.WriteLine("ProductNumber: {0}, ProductSubcategory Name: {1}", product.ProductNumber, product.ProductSubcategory.Name);
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IStorageCommand"/>.  Note the value for 
            sql may be any object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> by which to retrieve the objects.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var product = context.Select<Product>(new StorageCommand("SELECT * FROM Production.Product WHERE ProductID = 355")).ToSingle();
                Console.WriteLine("ProductNumber is {0}", product.ProductNumber);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IStorageCommand"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.  Note the value for sql may be any 
            object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> by which to retrieve the objects.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var product = context.Select<Product>(PreloadDepth.FirstRelatives, new StorageCommand("SELECT * FROM Production.Product WHERE ProductID = 355")).ToSingle();
                Console.WriteLine("Inventory location count is {0}", product.ProductInventories.Count);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(PreloadOptions<Product>.LoadWith(p => p.ProductProductPhotos), new StorageCommand("SELECT * FROM Production.Product"));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}, ProductSubcategory Name: {1}", product.ProductNumber, product.ProductSubcategory.Name);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Insert``1(``0)">
            <summary>
            Performs an insert into the target entity with the values as given by the source object's properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to insert.</typeparam>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                // Retrieve a product by ProductID
                var product = context.Select<Product>(Product.Properties.ProductID == 355).ToSingle();
                
                // Ensure that the retrieved product exists
                if (product != null)
                {
                    // Clone the product and change its properties to satisfy the constraints in the underlying entity
                    var product1 = ObjectCloner.Clone<Product>(product);
                    product1.ProductID = 0;
                    product1.ProductNumber = Guid.NewGuid().ToString().Substring(0, 5);
                    product1.Name = "My New Product";
                    product1.rowguid = Guid.NewGuid();
                    
                    // Insert the new product and print its surrogate primary key
                    context.Insert<Product>(product1);
                    Console.WriteLine("ProductID is {0}", product1.ProductID);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Insert``1(FlyweightObjects.IQueryExpression{``0})">
             <summary>
             Performs an insert into the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. 
             </summary>
             <typeparam name="T">The type parameter of the objects to insert.</typeparam>
             <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the objects.</param>
             <example>
             The following example uses a Department class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Construct an insert QueryExpression object
                 var qe = new QueryExpression<Department>()
            
                 .Insert(Department.Properties.Name, Department.Properties.GroupName, Department.Properties.ModifiedDate)
                 .Values("My New Department", "My New Group", DateTime.Now);
                 
                 // Insert the values
                 context.Insert<Department>(qe);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Insert``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Performs multiple inserts into the target entity using the supplied source.
             </summary>
             <typeparam name="T">The type parameter of the objects to insert.</typeparam>
             <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a new empty list of products to be inserted
                 var list = new List<Product>();
            
                 // Loop through a collection of products
                 foreach (Product p in context.Select<Product>(Product.Properties.ProductID.Between(300, 349)))
                 {
                     // Create a new product from a clone and add it to the list
                     Product p1 = ObjectCloner.Clone<Product>(product);
                     p1.ProductID = 0;
                     p1.ProductNumber = Guid.NewGuid().ToString().Substring(0, 5);
                     p1.Name = product.ProductNumber;
                     p1.rowguid = Guid.NewGuid();
                     list.Add(p1);
                 }
            
                 // Insert the new list of products and print their surrogate primary keys
                 context.Insert<Product>(list);
                 foreach (Product p in list)
                 {
                     Console.WriteLine("ProductID: {0}", p.ProductID);
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Update``1(``0)">
            <summary>
            Performs an update of the target entity with the values as given by the source object's properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to update.</typeparam>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var product = context.Select<Product>(Product.Properties.ProductID == 355).ToSingle();
                product.ModifiedDate = DateTime.Now;
                context.Update<Product>(product);
                Console.WriteLine("Product ModifiedDate is {0}", product.ModifiedDate);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Update``1(FlyweightObjects.IQueryExpression{``0})">
             <summary>
             Performs an update of the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
             </summary>
             <typeparam name="T">The type parameter of the object to update.</typeparam>
             <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the object.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Construct a QueryExpression object with the criteria for the update
                 var qe = new QueryExpression<Product>()
            
                 .Update()
                 .Set(Product.Properties.ModifiedDate == DateTime.Now, Product.Properties.MakeFlag == true)
                 .From<Product>()
                 .Join<ProductInventory>(ProductInventory.Properties.ProductID == Product.Properties.ProductID)
                 .Where(ProductInventory.Properties.Quantity > 0);
            
                 // Update the products directly without retrieving them
                 context.Update<Product>(qe);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Update``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs multiple updates of the target entity using the supplied source.
            </summary>
            <typeparam name="T">The type parameter of the objects to update.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                // Retrieve the top 100 products
                var products = context.Select<Product>(100);
                Console.WriteLine("Count is {0}", products.Count<Product>());
                
                // Change the ModifiedDate of each product
                foreach (product product in products)
                {
                    products.ModifiedDate = DateTime.Now;
                }
                   
                // Update the products
                context.Update<Product>(products);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Upsert``1(``0)">
            <summary>
            If the object alrady exists, performs an update of the target entity using the supplied source, otherwise
            an insert is applied.
            </summary>
            <typeparam name="T">The type parameter of the object to either update or insert.</typeparam>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                // Create a new product and set required properties
                var product = new Product()
                {
                    Name = Guid.NewGuid().ToString().Substring(0, 5),
                    ProductNumber = product.Name,
                    SafetyStockLevel = 1,
                    ReorderPoint = 1
                };
                
                // Perform an upsert on the target entity using the newly created product
                context.Upsert<Product>(product);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Upsert``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
             For each object in source, if the object alrady exists, performs an update of the target entity using 
             the supplied source, otherwise an insert is applied.
             </summary>
             <typeparam name="T">The type parameter of the objects to either update or insert..</typeparam>
             <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Retrieve a list of products
                 var products = context.Select<Product>(Product.Properties.ListPrice > 0).ToList();
            
                 // Change the ModifiedDate of each product
                 foreach (Product p in products)
                 {
                     p.ModifiedDate = DateTime.Now;
                 }
                    
                 // Create a new product and set required properties
                 var product = new Product()
                 {
                     Name = Guid.NewGuid().ToString().Substring(0, 5),
                     ProductNumber = product.Name,
                     SafetyStockLevel = 1,
                     ReorderPoint = 1
                 };
                 
                 // Add the new product to the list
                 products.Add(product);
                   
                 // Update the target entity with the list of products
                 context.Upsert<Product>(products);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Delete``1(``0)">
             <summary>
             Deletes the source from storage.
             </summary>
             <typeparam name="T">The type parameter of the objects to delete.</typeparam>
             <param name="source">An instance of T.</param>
             <example>
             The following example uses a Department class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a new department and set required properties
                 var department = new Department()
                 {
                     Name = "My New Department",
                     GroupName = "My New Department Group",
                     ModifiedDate = DateTime.Now
                 };
            
                 // Insert the new department
                 context.Insert<Department>(department);
            
                 // Delete the department
                 context.Delete<Department>(department);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Delete``1(FlyweightObjects.PropertyExpression{``0})">
             <summary>
             Performs a delete on the target entity given the supplied filter criteria.
             </summary>
             <typeparam name="T">The type parameter of the objects to delete.</typeparam>
             <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used as the filter for the delete.</param>
             <example>
             The following example uses a Department class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a new department and set required properties
                 var department = new Department()
                 {
                     Name = "My New Department",
                     GroupName = "My New Department Group",
                     ModifiedDate = DateTime.Now
                 };
            
                 // Insert the new department
                 context.Insert<Department>(department);
            
                 // Delete the department
                 context.Delete<Department>(Department.Properties.DepartmentID == department.DepartmentID);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
             <summary>
             Performs a delete on the target entity given the supplied filter criteria.
             </summary>
             <typeparam name="T">The type parameter of the objects to delete.</typeparam>
             <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
             <example>
             The following example uses a Department class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a new department and set required properties
                 var department = new Department()
                 {
                     Name = "My New Department",
                     GroupName = "My New Department Group",
                     ModifiedDate = DateTime.Now
                 };
            
                 // Insert the new department
                 context.Insert<Department>(department);
            
                 // Delete the department
                 context.Delete<Department>(d => d.DepartmentID == department.DepartmentID);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Delete``1(FlyweightObjects.IQueryExpression{``0})">
             <summary>
             Performs a delete on the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
             </summary>
             <typeparam name="T">The type parameter of the object to update.</typeparam>
             <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to delete the object.</param>
             <example>
             The following example uses a Department class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a new department and set required properties
                 var department = new Department()
                 {
                     Name = "My New Department",
                     GroupName = "My New Department Group",
                     ModifiedDate = DateTime.Now
                 };
            
                 // Insert the new department
                 context.Insert<Department>(department);
            
                 // Delete the department using a QueryExpression, specifying the newly created department
                 context.Delete<Department>(new QueryExpression<Department>().Delete<Department>().Where(Department.Properties.DepartmentID == department.DepartmentID));
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Delete``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Deletes all instances contained within source from storage.
             </summary>
             <typeparam name="T">The type parameter of the objects to delete.</typeparam>
             <param name="source">An instance of T.</param>
             <example>
             The following example uses a Department class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a list of departments
                 var = new List<Department>();
            
                 // Create 10 new departments, set their required properties and add each to the list
                 for (int i = 0; i < 10; i++)
                 {
                     var department = new Department()
                     {
                         Name = "My New Department",
                         GroupName = "My New Department Group",
                         ModifiedDate = DateTime.Now
                     };
                     departments.Add(department);
                 }
            
                 // create the new departments
                 context.Insert<Department>(departments);
                 
                 // Delete the newly created departments
                 context.Delete<Department>(departments);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Persist``1(FlyweightObjects.FlyweightSet{``0})">
             <summary>
             Performs all necessary operations on the supplied <see cref="T:FlyweightObjects.IFlyweightSet`1"/> object. Note that all objects which
             have been removed from the <see cref="T:FlyweightObjects.IFlyweightSet`1"/> will be deleted, while the others will either be inserted
             or updated based upon whether or not they exist in storage.
             </summary>
             <typeparam name="T">The type parameter of the changed objects to persist.</typeparam>
             <param name="source">An instance of a <see cref="T:FlyweightObjects.FlyweightSet`1"/>.</param>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Retrieve an IEnumerable<Product>
                 var products = context.Select<Product>(100);
                 
                 // Update the ModifiedDate property on each product
                 foreach (Product p in products)
                 {
                     p.ModifiedDate = DateTime.Now;
                 }
            
                 // Create a product from a clone
                 var product = ObjectCloner.Clone<Product>(products[0]);
                 product.ProductID = 0;
                 product.ProductNumber = Guid.NewGuid().ToString().Substring(0, 5);
                 product.Name = "My New Product";
                 product.rowguid = Guid.NewGuid();
                 
                 // Add the product to the IFlyweightSet
                 products.Add(product);
                 
                 // Persist changes
                 context.Persist<Product>(products);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Reload``1(``0)">
            <summary>
            Reloads the source object based upon its identifiers as specified by its <see cref="T:FlyweightObjects.DataColumnAttribute"/> Identifer properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to reload.</typeparam>
            <param name="source">An instance of T.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                // Retrieve a product and change its ModifiedDate value
                var product = context.Select<Product>(Product.Properties.ProductID == 355).ToSingle();
                product.ModifiedDate = DateTime.Now;
                Console.WriteLine("Product ModifiedDate is {0}", product.ModifiedDate);
                
                // Abandon the change and refresh the object
                product = context.Reload<Product>(product);
                Console.WriteLine("Product ModifiedDate is {0}", product.ModifiedDate);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage sorted by sortExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="sortExpressions">An <see cref="T:System.Linq.Expressions.Expression"/> used to qualify the property and direction of the sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>new SortExpression<Product>(p => p.ProductModelId, SortDirection.Desc));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage sorted by sortExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="sortExpressions">An <see cref="T:System.Linq.Expressions.Expression"/> used to qualify the property and direction of the sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>new SortExpression<Product>(p => p.ModifiedDate > DateTime.Now.AddYears(-10), new SortExpression<Product>(p => p.ProductModelId));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.PreloadDepth,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.SortExpression`1"/> used to qualify the properties and sorting directions.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(p => p.ModifiedDate > DateTime.Now.AddYears(-10), new SortExpression<Product>(p => p.ProductModelId, SortDirection.Desc));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(FlyweightObjects.PreloadOptions{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.SortExpression`1"/> used to qualify the properties and sorting directions.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = this.Context.Select<Product>(PreloadOptions<Product>.LoadWith(p => p.ProductProductPhotos), p => p.ProductID > 900, SortExpression<Product>.Sort(p => p.ProductID));
                foreach (var p in products)
                {
                    Console.WriteLine(p.ProductProductPhotos.Count);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Select``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> used to filter the objects to be retrieved.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.SortExpression`1"/> used to qualify the properties and sorting directions.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(true, 100, p => p.ModifiedDate > DateTime.Now.AddYears(-10), new SortExpression<Product>(p => p.ProductModelId));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductID: {0}", product.ProductID);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.ClientContextBase.Terminate">
            <summary>
            Terminates the communication with the remote server.
            </summary>
        </member>
        <member name="E:FlyweightObjects.ClientContextBase.Processing">
            <summary>
            Called prior to processing a <see cref="T:FlyweightObjects.DataTransferObject"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.Service">
            <summary>
            Gets the current service to which the client connects.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.ChannelSender">
            <summary>
            Gets the <see cref="T:System.Runtime.Remoting.Channels.IChannelSender"/> instance used by the client context.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.MessageSink">
            <summary>
            Gets the <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink"/> used by the client context.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.SecureChannel">
            <summary>
            Gets whether or not to use a secure channel for the service.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.Url">
            <summary>
            Gets the URL for the remoting service.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.RequestMode">
            <summary>
            Gets the RequestMode that the context is currently in.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.ApplicationName">
            <summary>
            Gets the application name for the instance of the class.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.CompressPayloads">
            <summary>
            Gets or sets whether the payload of a request should be compressed.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.EncryptPayloads">
            <summary>
            Gets or sets whether the payload of a request should be encrypted.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.EncryptionKey">
            <summary>
            Gets or sets the optional 24 byte user defined <see cref="P:System.Security.Cryptography.TripleDES.Key"/> to be used when <see cref="P:FlyweightObjects.ClientContextBase.EncryptPayloads"/> is set to true.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.MaxDebugListSize">
            <summary>
            Gets or sets the peek size of any returned <see cref="T:FlyweightObjects.FlyweightSet`1"/> collections for debugging purposes.
            The default value for this property is 1000.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.ExecutionTime">
            <summary>
            Gets the <see cref="T:System.TimeSpan"/> representing the execution time of the last operation.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.EnforceTransaction">
            <summary>
            Gets or sets a boolean value indicating whether all deferred requests should be required to participate in an enforced transaction.
            <remarks>
            This property only applies to a <see cref="T:FlyweightObjects.ClientContextBase"/> derivative when BeginDeferredRequests() has been called.
            </remarks>
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.ThrowExceptions">
            <summary>
            Gets or sets whether exceptions should be thrown or caught on the server and placed in the <see cref="T:FlyweightObjects.ResponseMessage"/>
            object contained within the <see cref="T:FlyweightObjects.DataTransferObject"/>.
            <remarks>
            This property only applies to a <see cref="T:FlyweightObjects.ClientContextBase"/> derivative when BeginDeferredRequests() has been called.
            </remarks>
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.DomainName">
            <summary>
            Gets or sets the unique name of the domain which identifies the context with specific object types. Parity must exist between
            the value of this property and objects with a DataTable.DomainName in order for deferred loading to work correctly
            acrosss multiple domains.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ClientContextBase.LoadOnDemand">
            <summary>
            Gets or sets whether the deferred loading of objects should be enabled.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ComputedAttribute">
            <summary>
            Represents a computed property for a domain model. Applying this attribute to a property means that its 
            value will not be considered when calculating check sums via the <see cref="T:FlyweightObjects.ChecksumBuilder"/>.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ConcurrencyException">
            <summary>
            Represents an exception whenever a concurrency conflict has occurred.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ConcurrencyException.#ctor">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ConcurrencyException.#ctor(System.Object)">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the class specifically for deserialization purposes.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance for the deserialization.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> for the deserialization.</param>
        </member>
        <member name="P:FlyweightObjects.ConcurrencyException.SourceObject">
            <summary>
            Gets the object that is no longer current.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ConcurrencyManager">
             <summary>
             Manages concurrency by comparing the original checksum of the object against that which is
             currenty held in storage. If the cheksums are different, a ConcurrencyException is thrown.
             Note that in order to for this manager to compare check sum values, the object must implement
             IRedundancyCheck.
             </summary>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a reusable QueryExpression, selecting a product by ProductID
                 var qe = new QueryExpression<Product>().Select().From<Product>().Where(Product.Properties.ProductID == 355);
                 
                 // Retrieve the product into two separate instances
                 Product p1 = context.Select<Product>(qe).ToSingle();
                 Product p2 = context.Select<Product>(qe).ToSingle();
                 
                 // Set the ConcurrencyManager mode so that it will fail on concurrency issues
                 context.ConcurrencyManager.Mode = ConcurrencyViolationMode.FailOnConflict;
            
                 try
                 {
                     // Set the ModifiedDate of the first product and update it
                     p1.ModifiedDate = DateTime.Now;
                     context.Update<Product>(p1);
                     
                     // Set the ModifiedDate of the second product and attempt to update it
                     p2.ModifiedDate = DateTime.Now;
                     context.Update<Product>(p2);
                 }
                 catch (ConcurrencyException e)
                 {
                     // Display the exception and throw
                     Console.WriteLine("Exception: {0}", e.ToString());
                     throw;
                 }
             }     
             ]]>
             </code>
             </example>
        </member>
        <member name="T:FlyweightObjects.IConcurrencyManager">
            <summary>
            Determines change conflicts in a relational data store.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IConcurrencyManager.IsCurrent``1(``0)">
            <summary>
            Returns a boolean value indicating whether the local copy of the object is newer than the one in storage.
            </summary>
            <typeparam name="T">The type of object to evaluate.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="P:FlyweightObjects.IConcurrencyManager.Context">
            <summary>
            Gets a <see cref="T:FlyweightObjects.IDataContext"/> by which storage operations can be performed to determine concurrency.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IConcurrencyManager.Mode">
            <summary>
            Gets or sets the <see cref="T:FlyweightObjects.ConcurrencyViolationMode"/> under which the manager should work.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ConcurrencyManager.#ctor(FlyweightObjects.IDataContext)">
            <summary>
            COnstructs a new instance of the class.
            </summary>
            <param name="context">The IDataContext instance used to retrieve data from storage.</param>
        </member>
        <member name="M:FlyweightObjects.ConcurrencyManager.IsCurrent``1(``0)">
            <summary>
            Determines if the current object is current by comparing the check sum values of it and the one
            currently held in storage.
            </summary>
            <typeparam name="T">The type of the domain object.</typeparam>
            <param name="source">The instance of the domain object.</param>
        </member>
        <member name="P:FlyweightObjects.ConcurrencyManager.Mode">
            <summary>
            Gets or sets the ConcurrencyViolationMode for the ConcurrencyManager.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ConcurrencyManager.Context">
            <summary>
            Gets the IDataContext from which the ConcurrencyManager was constructed.
            </summary>
        </member>
        <member name="T:FlyweightObjects.DatabaseManager">
            <summary>
            Represents a class to assist in database operations.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.#ctor(System.String,FlyweightObjects.StorageProviderType)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString">The connection string to the current database.</param>
            <param name="providerType">The StorageProviderType of the current database.</param>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.BeginTransaction">
            <summary>
            Creates a new transaction if one is not already present.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction if one is not already present.
            </summary>
            <param name="isolationLevel">The IsolationLevel for the transaction.</param>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.CommitTransaction">
            <summary>
            Commits all executed operations within the current transaction to the current database.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.RollbackTransaction">
            <summary>
            Abandons all changes made within the current transaction scope.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.PrepareConnection">
            <summary>
            Prepares a connection for the current database.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.CreateCommand(FlyweightObjects.IStorageCommand)">
            <summary>
            Creates a new <see cref="T:System.Data.IDbCommand"/> from the <see cref="T:FlyweightObjects.IStorageCommand"/> argument.
            </summary>
            <param name="command">The SQL from which to create an IDbCommand.</param>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.ExecuteReader(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an <see cref="T:System.Data.IDataReader"/> against the current database.
            </summary>
            <param name="command">The SQL to execute.</param>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.ExecuteResultSet(System.Type,FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an <see cref="T:FlyweightObjects.ResultSet"/> against the current database.
            </summary>
            <param name="command">The SQL to execute.</param>
            <param name="type">The domain type that <see cref="T:FlyweightObjects.ResultSet"/> represents.</param>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.ExecuteDataTable(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns a <see cref="T:System.Data.DataTable"/> object using the supplied <see cref="T:FlyweightObjects.IStorageCommand"/> command.
            </summary>
            <param name="command">The SQL to execute.</param>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.ExecuteNonQuery(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a non-query operation against the current database.
            </summary>
            <param name="command">The SQL to execute.</param>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.CreateDataAdapter">
            <summary>
            Returns an <see cref="T:System.Data.IDbDataAdapter"/> for the provider type.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.GetProviderString">
            <summary>
            Returns a namespace-based string representing the location of the provider.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.ResetParameters(System.Data.IDbCommand,FlyweightObjects.IStorageCommand)">
            <summary>
            Refreshes the <see cref="T:FlyweightObjects.IStorageCommand"/> parameters collection with values from an IDbCommand.
            </summary>
            <param name="dbCommand">The IDbCommand containing the parameters.</param>
            <param name="storageCommand">The <see cref="T:FlyweightObjects.IStorageCommand"/> to have its parameters refreshed.</param>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DatabaseManager.Finalize">
            <summary>
            Finalizer for the object.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DatabaseManager.ConnectionString">
            <summary>
            Gets the connection string used to construct the <see cref="T:FlyweightObjects.DatabaseManager"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DatabaseManager.Connection">
            <summary>
            Gets or sets the connection object.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DatabaseManager.ProviderType">
            <summary>
            Gets the StorageProviderType used to construct the object.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DatabaseManager.CommandTimeout">
            <summary>
            Gets or sets the timeout for each command executed.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DatabaseManager.IsTransacted">
            <summary>
            Gets whether the current database connection has created a transaction.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DatabaseManager.Transaction">
            <summary>
            Gets the current transaction if one exists.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DatabaseManager.DataSource">
            <summary>
            Gets the parsed data source token from the connection string.
            </summary>
        </member>
        <member name="T:FlyweightObjects.FlyweightBase">
            <summary>
            Represents a concrete base class from which other types can be derived.
            </summary>
        </member>
        <member name="T:FlyweightObjects.IFlyweight">
            <summary>
            Represents a lightweight domain object which defers to a <see cref="T:FlyweightObjects.PropertyStorage"/> object for all of its private member fields.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IFlyweight.Storage">
            <summary>
            Gets or sets the <see cref="T:FlyweightObjects.PropertyStorage"/> which manages the object's private member fields.
            </summary>
        </member>
        <member name="T:FlyweightObjects.IRedundancyCheck">
            <summary>
            Exposes a check sum value on the object in order to determine if an instance has changed.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IRedundancyCheck.Checksum">
            <summary>
            Gets or sets a hash on the object.
            </summary>
        </member>
        <member name="T:FlyweightObjects.IValidatable">
            <summary>
            Represents an interface used to validate the state of an object prior to performing an insert or update
            operation.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IValidatable.TryValidate(FlyweightObjects.IDataContext,FlyweightObjects.TransactionType,System.String@)">
            <summary>
            Returns a boolean indicating whether the current state of the object is valid. If an objeect implements
            this interface, the <see cref="T:FlyweightObjects.DataContext"/> will validate the object prior to performing an insert
            or update operation. Returning false will cause a <see cref="T:FlyweightObjects.ValidationException"/> to be thrown be the
            <see cref="T:FlyweightObjects.DataContext"/>.
            </summary>
            <param name="context">The <see cref="T:FlyweightObjects.IDataContext"/> used to query ancillary objects if necessary.</param>
            <param name="transactionType">The transaction type that will occur post successful validation.</param>
            <param name="message">The message to be displayed.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightBase.#ctor">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.FlyweightBase.#ctor(FlyweightObjects.PropertyStorage)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="storage">The <see cref="T:FlyweightObjects.PropertyStorage"/> which manages state of member fields.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightBase.TryValidate(FlyweightObjects.IDataContext,FlyweightObjects.TransactionType,System.String@)">
            <summary>
            Returns a boolean indicating whether the current state of the object is valid. If an objeect implements
            this interface, the <see cref="T:FlyweightObjects.DataContext"/> will validate the object prior to performing an insert
            or update operation. Returning false will cause a <see cref="T:FlyweightObjects.ValidationException"/> to be thrown be the
            <see cref="T:FlyweightObjects.DataContext"/>.
            </summary>
            <param name="context">The <see cref="T:FlyweightObjects.IDataContext"/> used to query ancillary objects if necessary.</param>
            <param name="transactionType">The transaction type that will occur post successful validation.</param>
            <param name="message">The message to be displayed.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightBase.SendPropertyChanging``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Notifies clients that a property value is changing. 
            </summary>
            <typeparam name="T">The type which exposes the property.</typeparam>
            <param name="property">An expression which represents the property.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightBase.SendPropertyChanging(System.String)">
            <summary>
            Notifies clients that a property value is changing.
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightBase.SendPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Notifies clients that a property value has changed. 
            </summary>
            <typeparam name="T">The type which exposes the property.</typeparam>
            <param name="property">An expression which represents the property.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightBase.SendPropertyChanged(System.String)">
            <summary>
            Notifies clients that a property value is changing.
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="P:FlyweightObjects.FlyweightBase.Storage">
            <summary>
            Represents the <see cref="T:FlyweightObjects.PropertyStorage"/> which manages manages state of member fields.
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightBase.FlyweightObjects#IFlyweight#Storage">
            <summary>
            Gets or sets the <see cref="T:FlyweightObjects.PropertyStorage"/>  which manages state for member fields.
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightBase.Checksum">
            <summary>
            Gets or sets a hash on the object in order to determine if an instance has changed.
            </summary>
        </member>
        <member name="E:FlyweightObjects.FlyweightBase.PropertyChanging">
            <summary>
            Represents the method that will handle the PropertyChanged event raised when a property is changing on an object. 
            </summary>
        </member>
        <member name="E:FlyweightObjects.FlyweightBase.PropertyChanged">
            <summary>
            Represents the method that will handle the PropertyChanged event raised when a property is changed on an object. 
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightBase.ChangedProperties">
            <summary>
            Gets the list of properties that have been changed.
            </summary>
        </member>
        <member name="T:FlyweightObjects.PropertyDefinition">
            <summary>
            Represents a property being stored in <see cref="T:FlyweightObjects.PropertyStorage"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyDefinition.#ctor(System.String,System.String,System.Type)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="dataColumnName">The <see cref="P:FlyweightObjects.DataColumnAttribute.ColumnName"/> value.</param>
            <param name="dataColumnType">The type used to store the property in <see cref="T:FlyweightObjects.PropertyStorage"/>.</param>
        </member>
        <member name="P:FlyweightObjects.PropertyDefinition.PropertyName">
            <summary>
            Gets the name of the property as exposed by the domain object.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyDefinition.DataColumnName">
            <summary>
            Gets the name of the underlying column.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyDefinition.DataColumnType">
            <summary>
            Gets the type of the underlying column.
            </summary>
        </member>
        <member name="T:FlyweightObjects.PropertyStorageAttribute">
            <summary>
            Indicates that the property should be maintained in <see cref="T:FlyweightObjects.PropertyStorage"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyStorageAttribute.MappedProperty">
            <summary>
            Gets or sets the name of the mapped <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
        </member>
        <member name="T:FlyweightObjects.FlyweightSet`1">
            <summary>
            Represents a lightweight set of objects optimized for high speed access.
            </summary>
            <typeparam name="T">The type parameter of the domain type.</typeparam>
        </member>
        <member name="T:FlyweightObjects.IFlyweightSet`1">
            <summary>
            Represents an interface for a lightweight set of objects optimized for high speed access.
            </summary>
            <typeparam name="T">The type parameter of the domain type.</typeparam>
        </member>
        <member name="T:FlyweightObjects.IResponseMessage">
            <summary>
            Represents a message regarding th result of an operation.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IResponseMessage.Response">
            <summary>
            Gets or sets a <see cref="T:FlyweightObjects.ResponseMessage"/>.
            </summary>
        </member>
        <member name="T:FlyweightObjects.IChangeTrackable`1">
            <summary>
            Represents functionality associated with tracking changes of an <see cref="T:FlyweightObjects.FlyweightSet`1"/>.
            </summary>
            <typeparam name="T">The type of object for which to track changes.</typeparam>
        </member>
        <member name="P:FlyweightObjects.IChangeTrackable`1.DeletedItems">
            <summary>
            Gets or sets the objects which have been removed from a collection.
            </summary>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.#ctor">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.#ctor(FlyweightObjects.ResultSet)">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.RejectChanges">
            <summary>
            Returns the collections back to its original state before any modifications were made to it. Note that 
            <see cref="P:FlyweightObjects.FlyweightSet`1.EnableRejectChanges"/> must be set to true prior to calling this method.
            </summary>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.Clone">
            <summary>
            Creates a deep copy of the collection and all of its contents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns></returns>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted. </param>
            <param name="item">The object to insert into the collection.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.RemoveAt(System.Int32)">
            <summary>
            Removes the object item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.InstanceAt(System.Int32)">
            <summary>
            Returns a new instance object for the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.Add(`0)">
            <summary>
            Adda a new object to the collection.
            </summary>
            <param name="item">The object to add to the collection.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.Clear">
            <summary>
            Clears the collection of all its contents and queues all removed items for deletion.
            </summary>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.Contains(`0)">
            <summary>
            Determines if the object is already in the collection.
            </summary>
            <param name="item">The object for which to search.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the contents of the collection to the supplied array.
            </summary>
            <param name="array">The target array of the collection.</param>
            <param name="arrayIndex">The index of the array to start the copy.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.Remove(`0)">
            <summary>
            Removes the supplied object from the collection.
            </summary>
            <param name="item">The object to be removed.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.Remove(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, returns the first occurrence and
            removes it from the collection.
            </summary>
            <param name="match">The delegate that defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements that match the conditions defined by the specified predicate and then removes them from
            the collection.
            </summary>
            <param name="match">The delegate that defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate and returns the first occurrence.
            </summary>
            <param name="match">The delegate that defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.Exists(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate and returns a bool indicating
            whether or not the obejct exists.
            </summary>
            <param name="match">The delegate that defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The delegate that defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.GetChangeSet">
            <summary>
            Returns a new <see cref="T:FlyweightObjects.FlyweightSet`1"/> containing only the new, modified and removed items
            found in the source collection.
            </summary>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.OnItemAdded(`0)">
            <summary>
            Raises the ItemAdded event.
            </summary>
            <param name="item">The added object.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.OnItemRemoved(`0)">
            <summary>
            Raises the ItemAdded event.
            </summary>
            <param name="item">The resmoved item.</param>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.OnItemsCleared(FlyweightObjects.ItemsClearedEventArgs{`0})">
            <summary>
            Raises the ItemsCleared event.
            </summary>
        </member>
        <member name="M:FlyweightObjects.FlyweightSet`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element in the <see cref="T:FlyweightObjects.FlyweightSet`1"/>.
            </summary>
            <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element.</param>
        </member>
        <member name="E:FlyweightObjects.FlyweightSet`1.ItemAdded">
            <summary>
            Represents the method that will handle the ItemAdded event of the <see cref="T:FlyweightObjects.IFlyweightSet`1"/> class.
            </summary>
        </member>
        <member name="E:FlyweightObjects.FlyweightSet`1.ItemRemoved">
            <summary>
            Represents the method that will handle the ItemRemoved event of the <see cref="T:FlyweightObjects.IFlyweightSet`1"/> class.
            </summary>
        </member>
        <member name="E:FlyweightObjects.FlyweightSet`1.ItemsCleared">
            <summary>
            Represents the method that will handle the ItemsCleared event of the <see cref="T:FlyweightObjects.IFlyweightSet`1"/> class.
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightSet`1.DataSource">
            <summary>
            Represents the data source for the collection.
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightSet`1.DataSourceClone">
            <summary>
            Represents a clone of the original data source for the collection.
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightSet`1.Flyweight">
            <summary>
            Represents the <see cref="T:FlyweightObjects.IFlyweight"/> instance for the collection.
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightSet`1.Response">
            <summary>
            Gets or sets the <see cref="T:FlyweightObjects.ResponseMessage"/> for the request.
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightSet`1.FlyweightObjects#IFlyweightSet{T}#DataSource">
            <summary>
            Gets the <see cref="T:FlyweightObjects.IFlyweightSet`1"/>.DataSource for the collection.
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightSet`1.FlyweightObjects#IFlyweightSet{T}#Flyweight">
            <summary>
            Gets the object acting as the Flyweight.
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightSet`1.FlyweightObjects#IChangeTrackable{T}#DeletedItems">
            <summary>
            Gets or sets the <see cref="T:FlyweightObjects.IChangeTrackable`1"/>.DeletedItems dictionary.
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightSet`1.EnableRejectChanges">
            <summary>
            Gets or sets a boolean value indicating whether the collection will enable the rejection of changes. The
            default for this property is false.
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightSet`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:FlyweightObjects.FlyweightSet`1.Item(System.Int32,System.Boolean)">
            <summary>
            Gets the element at the specified index. If instance is true, returns a new instance for the specified index, otherwise returns 
            the internally held Flyweight.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <param name="instance">Determines whether the indexer should return a new instance or the internally held Flyweight.</param>
        </member>
        <member name="P:FlyweightObjects.FlyweightSet`1.FlyweightObjects#IFlyweightSet{T}#DebugList">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IList`1"/> representation of a limited number items in the current <see cref="T:FlyweightObjects.FlyweightSet`1"/> using the current value of
            the <see cref="P:FlyweightObjects.DataContext.MaxDebugListSize"/> property. Note that this property will only be executed if <see cref="P:System.Diagnostics.Debugger.IsAttached"/> is equal 
            to true and should only be used for debugging purposes.
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightSet`1.Count">
            <summary>
            Gets the count of objects in the collection.
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightSet`1.IsReadOnly">
            <summary>
            Returns a boolean indicating whether the collection is read only.
            </summary>
        </member>
        <member name="P:FlyweightObjects.FlyweightSet`1.HasChanges">
            <summary>
            Returns a boolean indicating whether any of the contained objects have changed or been removed.
            </summary>
        </member>
        <member name="T:FlyweightObjects.PropertyStorage">
            <summary>
            Represents a surrogate container for private member fields of an <see cref="T:FlyweightObjects.IFlyweight"/> object.
            </summary>
        </member>
        <member name="T:FlyweightObjects.IPropertyStorage">
            <summary>
            Represents the interface of a surrogate container for private member field storage of an <see cref="T:FlyweightObjects.IFlyweight"/> object.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.#ctor(System.Type)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="elementType">The type of domain object for which to store properties.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.#ctor(System.Type,FlyweightObjects.ResultSet.Row)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="elementType">The type of domain object for which to store properties.</param>
            <param name="dataSource">The <see cref="T:FlyweightObjects.ResultSet.Row"/> acting as the datasource.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.GetProperty``1(System.String)">
            <summary>
            Gets the property value held in local storage.
            </summary>
            <typeparam name="T">The type of the property to retrieve from local storage.</typeparam>
            <param name="propertyName">The property name held in local storage.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.GetProperty``1(System.String,``0)">
            <summary>
            Gets the property value held in local storage. If the value equals the default(T), returns the supplied defaultValue instead.
            </summary>
            <typeparam name="T">The type of the property to retrieve from local storage.</typeparam>
            <param name="propertyName">The property name held in local storage.</param>
            <param name="defaultValue">The default value to return.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the property value held in local storage.
            </summary>
            <typeparam name="TSource">The type expected in local storage.</typeparam>
            <typeparam name="T">The type of the property to retrieve from local storage.</typeparam>
            <param name="property">The expression representing the property held in local storage.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Gets the property value held in local storage.
            </summary>
            <typeparam name="TSource">The type expected in local storage.</typeparam>
            <typeparam name="T">The type of the property to retrieve from local storage.</typeparam>
            <param name="property">The expression representing the property held in local storage.</param>
            <param name="defaultValue">The default value to return.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.SetProperty``1(System.String,``0)">
            <summary>
            Sets the property value held in local storage.
            </summary>
            <typeparam name="T">The type of the property to set in local storage</typeparam>
            <param name="propertyName">The property name held in local storage.</param>
            <param name="value">The value to set for the property.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.SetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Sets the property value held in local storage.
            </summary>
            <typeparam name="TSource">The type expected in local storage.</typeparam>
            <typeparam name="T">The type of the property to set in local storage.</typeparam>
            <param name="property">The expression representing the property held in local storage.</param>
            <param name="value">The value to set for the property.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.GetDataRelation``1(System.String)">
            <summary>
            Returns a <see cref="T:FlyweightObjects.DataRelationContainer`1"/> container held in storage.
            </summary>
            <typeparam name="T">The type parameter of the related object.</typeparam>
            <param name="propertyName">The name of the related property.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.GetDataRelation``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns a <see cref="T:FlyweightObjects.DataRelationContainer`1"/> container held in storage.
            </summary>
            <param name="property">An expression which represents the property name.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.PropertyExists(System.String)">
            <summary>
            Determines if the specified property name exist in local storage.
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.OnPropertyChanging(System.String)">
            <summary>
            Raises the PropertyChanging event.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.OnDataSourceChanged">
            <summary>
            Raises the RowSourceChanged event.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.TryGetColumnName(System.String,System.String@)">
            <summary>
            Attempts to retrieve the column name in local storage representing the property name specified. If successful, returns true 
            with the name of the column, otherwise false.
            </summary>
            <param name="propertyName">The property name on the object.</param>
            <param name="columnName">The underlying column name of the object.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyStorage.TryGetPropertyName(System.String,System.String@)">
            <summary>
            Attempts to retrieve the property name representing specified column name in local storage. If successful, returns true 
            with the name of the property, otherwise false.
            </summary>
            <param name="columnName">The underlying column name of the object.</param>
            <param name="propertyName">The property name on the object.</param>
        </member>
        <member name="E:FlyweightObjects.PropertyStorage.PropertyChanging">
            <summary>
            Represents the method that will handle the PropertyChanging event of the <see cref="T:System.ComponentModel.INotifyPropertyChanging"/> class.
            </summary>
        </member>
        <member name="E:FlyweightObjects.PropertyStorage.PropertyChanged">
            <summary>
            Represents the method that will handle the PropertyChanging event of the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> class.
            </summary>
        </member>
        <member name="E:FlyweightObjects.PropertyStorage.DataSourceChanged">
            <summary>
            Represents the method that will handle the RowSourceChanged event when the underlying RowSource has been changed.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyStorage.ElementType">
            <summary>
            Gets or sets the type represented by <see cref="T:FlyweightObjects.PropertyStorage"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyStorage.Row">
            <summary>
            Gets or sets the data source for the <see cref="T:FlyweightObjects.PropertyStorage"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyStorage.FlyweightObjects#IPropertyStorage#ElementType">
            <summary>
            Gets or sets the type of domain object for which properties are stored.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyStorage.FlyweightObjects#IPropertyStorage#DataSource">
            <summary>
            Gets or sets the underlying <see cref="T:FlyweightObjects.ResultSet.Row"/> wich serves as the data source.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyStorage.Item(System.Int32)">
            <summary>
            Gets or sets the property value in local storage at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:FlyweightObjects.PropertyStorage.Item(System.String)">
            <summary>
            Gets or sets the property value in local storage at the specified index.
            </summary>
            <param name="index">The name of the property.</param>
        </member>
        <member name="P:FlyweightObjects.PropertyStorage.PropertyDefinitions">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IList`1"/> objects which are being held in local storage.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyStorage.IsChanged">
            <summary>
            Determines if any property has been changed.
            </summary>
        </member>
        <member name="T:FlyweightObjects.DataTableAttribute">
            <summary>
            Attributes a domain type with information about an entity contained within storage.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataTableAttribute.#ctor">
            <summary>
            Constructs a new DataTable instance.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataTableAttribute.#ctor(System.String)">
            <summary>
            Constructs a new DataTable instance.
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="P:FlyweightObjects.DataTableAttribute.TableName">
            <summary>
            Gets or sets the name of the table for which the class applies.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTableAttribute.AllowSelect">
            <summary>
            Gets or sets whether the domain type can be retrieved from storage.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTableAttribute.AllowInsert">
            <summary>
            Gets or sets whether the domain type can be inserted into storage.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTableAttribute.AllowUpdate">
            <summary>
            Gets or sets whether the domain type can be updated in storage.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTableAttribute.AllowDelete">
            <summary>
            Gets or sets whether the domain type can be deleted from storage.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTableAttribute.AllowTruncate">
            <summary>
            Gets or sets whether the domain type can be truncated in storage.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTableAttribute.EnableCaching">
            <summary>
            Gets or sets whether the object can be cached. Use CacheTimeout to specify the
            length of time in seconds to keep the object in memory. If the EnableCaching 
            value is set to true and the CacheTimeout value is set to zero, the object will be
            held in memory for the lifetime of the assembly, otherwise it will be removed from
            the cache once the CacheTimeout property has expired.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTableAttribute.CacheTimeout">
            <summary>
            Gets or sets the number of seconds to hold the object in cache. Setting this
            property to a value other than zero will have no effect unless EnableCaching
            is set to true.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTableAttribute.DomainName">
            <summary>
            Gets or sets the unique name of the domain which identifies this object with a specific instance of a <see cref="T:FlyweightObjects.DataContext"/>.
            </summary>
        </member>
        <member name="T:FlyweightObjects.DataColumnAttribute">
            <summary>
            Attributes a domain type's property with information stored in a column.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataColumnAttribute.#ctor(System.String)">
            <summary>
            Constructs a new DataColumn object.
            </summary>
            <param name="fieldName">The field name of the DataSource object.</param>
        </member>
        <member name="M:FlyweightObjects.DataColumnAttribute.#ctor(System.String,System.Data.DbType)">
            <summary>
            Constructs a new DataColumn object.
            </summary>
            <param name="fieldName">The field name of the DataSource object</param>
            <param name="dbType">The DbType of the DataSource field</param>
        </member>
        <member name="M:FlyweightObjects.DataColumnAttribute.#ctor(System.String,System.Data.DbType,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new DataColumn object.
            </summary>
            <param name="fieldName">The field name of the DataSource object.</param>
            <param name="dbType">The DbType of the DataSource field.</param>
            <param name="identifier">Determines if this property is part of a key identifier in the DataSource.</param>
            <param name="allowDbNull">Determines if this property can accept DbNull values.</param>
        </member>
        <member name="P:FlyweightObjects.DataColumnAttribute.ColumnName">
            <summary>
            Gets or sets the column name.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataColumnAttribute.ColumnType">
            <summary>
            Gets or sets the DbType property of the source table column.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataColumnAttribute.Identifier">
            <summary>
            Gets or sets whether or not the property is part of a key identifier in the source table.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataColumnAttribute.AutoIncrement">
            <summary>
            Gets or sets whether or not the source table column is auto incrementing (i.e., sequence or identity).
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataColumnAttribute.AllowDBNull">
            <summary>
            Gets or sets whether or not the source column will allow DbNull values.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataColumnAttribute.Computed">
            <summary>
            Gets or sets whether or not the source column is computed.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataColumnAttribute.ReadOnly">
            <summary>
            Gets or sets whether or not the source column is read only.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataColumnAttribute.HasDefault">
            <summary>
            Gets or sets whether or not the field has a default.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataColumnAttribute.SequenceName">
            <summary>
            Gets or sets the name of the sequence for the field.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataColumnAttribute.Index">
            <summary>
            Gets or sets the index (ordinal) of the field name.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataColumnAttribute.Size">
            <summary>
            Gets or sets the size of the parameter.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataColumnAttribute.Caption">
            <summary>
            Gets or sets the caption for the column.
            </summary>
        </member>
        <member name="T:FlyweightObjects.DataRelationAttribute">
            <summary>
            Attributes a compositional property within a domain type in order to describe a relationship. 
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataRelationAttribute.#ctor">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataRelationAttribute.#ctor(System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="allowPreload">A value indicating that the object can be retrieved automatically when its parent is retrieved.</param>
        </member>
        <member name="P:FlyweightObjects.DataRelationAttribute.AllowPreload">
            <summary>
            Gets or sets a value indicating whether the related object or objects will be returned when the parent is retrieved and PreloadDepth is greater than zero. 
            Setting this value to false means that the relation can only be retrieved using load on demand.
            </summary>
        </member>
        <member name="T:FlyweightObjects.DataTransferObject">
             <summary>
             Represents a message envelope which encapsulates one or more requests from the server.
             </summary>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             // Create a new TcpClientContext, specifying exposed type, URL and secure channel
             TcpClientContext context = new TcpClientContext(typeof(IServiceContext), @"tcp://localhost:9090/AdventureWorksServiceContext", true))
             
             // Create a new DTO and instruct it to perform all requests within the same transactional context
             DataTransferObject dto = new DataTransferObject();
             dto.EnforceTransaction = true;
            
             // Create a new select QueryExpression
             var qe1 = new QueryExpression<Product>()
            
             .Select(true, 0)
             .From<Product>()
             .LeftJoin<ProductDocument>(ProductDocument.Properties.ProductID == Product.Properties.ProductID)
             .Where(ProductDocument.Properties.ProductID.IsNull() || ProductDocument.Properties.ModifiedDate > DateTime.Now.AddDays(-365));
            
             // Call Select on the DTO as opposed to the context. Note that we do not assign a return value as it will always be the type's default.
             dto.Select<ProductDocument>(qe1);
             
             // Create a new update query
             var qe2 = new QueryExpression<Product>()
            
             .Update<Product>()
             .Set<Product>(Product.Properties.ModifiedDate == DateTime.Now)
             .Where(Product.Properties.ProductID == 355);
            
             // Call Update on the DTO as opposed to the context Note that we do not assign a return value as it will always be the type's default.
             dto.Update<Product>(qe2);
            
             // Instruct the context to process the DTO
             dto = context.ProcessDeferredRequests(dto);
            
             // Assign variables from the DTO request queue
             var p1 = dto.Requests.Dequeue().ReturnValue as IEnumerable<Product>;
             var p2 = dto.Requests.Dequeue().ReturnValue as Product;
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.#ctor">
            <summary>
            Constructs a new instance of the class.
            </summary>		
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.TrySelect``1(``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.TrySelect``1(System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.TrySelect``1(FlyweightObjects.PropertyExpression{``0},``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.TrySelect``1(FlyweightObjects.PropertyExpression{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> criteria used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.TrySelect``1(FlyweightObjects.IQueryExpression{``0},``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.TrySelect``1(FlyweightObjects.IQueryExpression{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.TrySelect``1(FlyweightObjects.IStorageCommand,``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.  Note the value for sql may be any object which implements 
            the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.TrySelect``1(FlyweightObjects.IStorageCommand,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be an 
            IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.  Note the value for 
            sql may be any object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.TrySelect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.TrySelect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Exists``1(``0)">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Exists``1(FlyweightObjects.PropertyExpression{``0})">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Exists``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Exists``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.  Note the value for sql may be any 
            object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Exists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1">
            <summary>
            Returns all objects for the specified type of T contained in storage.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(System.Int32)">
            <summary>
            Returns all objects for the specified type of T contained in storage constrained by the amount as specified
            by limit.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(System.Int32,FlyweightObjects.PropertyExpression{``0})">
            <summary>
            Returns all objects for the specified type of T contained in storage constrained by the amount as specified
            by limit and using the criteria as specified by whereExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions. Additional objects will be retrieved in the graph according to their level as specified
            by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions. Additional objects will be retrieved in the graph according to their level as specified
            by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.PreloadDepth,System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions. Additional objects will be retrieved in the graph 
            according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth of the object graph to prefectch.</param>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.PreloadOptions{``0},System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions. Additional objects will be retrieved in the graph 
            according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.PreloadOptions{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.SortExpression`1"/> used to qualify the properties and sorting directions.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IStorageCommand"/>.  Note the value for 
            sql may be any object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IStorageCommand"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.  Note the value for sql may be any 
            object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns all objects for the specified type of T contained in storage constrained by the amount as specified
            by limit and using the criteria as specified by whereExpression. 
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Insert``1(``0)">
            <summary>
            Performs an insert into the target entity with the values as given by the source object's properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to insert.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Insert``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Performs an insert into the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. 
            </summary>
            <typeparam name="T">The type parameter of the objects to insert.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the objects.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs multiple inserts into the target entity using the supplied source.
            </summary>
            <typeparam name="T">The type parameter of the objects to insert.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Update``1(``0)">
            <summary>
            Performs an update of the target entity with the values as given by the source object's properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to update.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Update``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Performs an update of the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <typeparam name="T">The type parameter of the object to update.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the object.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Update``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs multiple updates of the target entity using the supplied source.
            </summary>
            <typeparam name="T">The type parameter of the objects to update.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Upsert``1(``0)">
            <summary>
            If the object alrady exists, performs an update of the target entity using the supplied source, otherwise
            an insert is applied.
            </summary>
            <typeparam name="T">The type parameter of the object to either update or insert.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Upsert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            For each object in source, if the object alrady exists, performs an update of the target entity using 
            the supplied source, otherwise an insert is applied.
            </summary>
            <typeparam name="T">The type parameter of the objects to either update or insert..</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Delete``1(``0)">
            <summary>
            Deletes the source from storage.
            </summary>
            <typeparam name="T">The type parameter of the objects to delete.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Delete``1(FlyweightObjects.PropertyExpression{``0})">
            <summary>
            Performs a delete on the target entity given the supplied filter criteria.
            </summary>
            <typeparam name="T">The type parameter of the objects to delete.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used as the filter for the delete.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Performs a delete on the target entity given the supplied filter criteria.
            </summary>
            <typeparam name="T">The type parameter of the objects to delete.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Delete``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Performs a delete on the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <typeparam name="T">The type parameter of the object to update.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to delete the object.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Deletes all instances contained within source from storage.
            </summary>
            <typeparam name="T">The type parameter of the objects to delete.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Persist``1(FlyweightObjects.FlyweightSet{``0})">
            <summary>
            Performs all necessary operations on the supplied <see cref="T:FlyweightObjects.IFlyweightSet`1"/> object. Note that all objects which
            have been removed from the <see cref="T:FlyweightObjects.IFlyweightSet`1"/> will be deleted, while the others will either be inserted
            or updated based upon whether or not they exist in storage.
            </summary>
            <typeparam name="T">The type parameter of the changed objects to persist.</typeparam>
            <param name="source">An instance of a <see cref="T:FlyweightObjects.FlyweightSet`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage sorted by sortExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="sortExpressions">An <see cref="T:System.Linq.Expressions.Expression"/> used to qualify the property and direction of the sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>new SortExpression<Product>(p => p.ProductModelId, SortDirection.Desc));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage sorted by sortExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="sortExpressions">An <see cref="T:System.Linq.Expressions.Expression"/> used to qualify the property and direction of the sort.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>new SortExpression<Product>(p => p.ModifiedDate > DateTime.Now.AddYears(-10), new SortExpression<Product>(p => p.ProductModelId));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.PreloadDepth,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.SortExpression`1"/> used to qualify the properties and sorting directions.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(p => p.ModifiedDate > DateTime.Now.AddYears(-10), new SortExpression<Product>(p => p.ProductModelId, SortDirection.Desc));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductNumber: {0}", product.ProductNumber);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(FlyweightObjects.PreloadOptions{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> that serves as the filter criteria used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.SortExpression`1"/> used to qualify the properties and sorting directions.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = this.Context.Select<Product>(PreloadOptions<Product>.LoadWith(p => p.ProductProductPhotos), p => p.ProductID > 900, SortExpression<Product>.Sort(p => p.ProductID));
                foreach (var p in products)
                {
                    Console.WriteLine(p.ProductProductPhotos.Count);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Select``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},FlyweightObjects.SortExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> used to filter the objects to be retrieved.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.SortExpression`1"/> used to qualify the properties and sorting directions.</param>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                var products = context.Select<Product>(true, 100, p => p.ModifiedDate > DateTime.Now.AddYears(-10), new SortExpression<Product>(p => p.ProductModelId));
                foreach (Product product in products)
                {
                    Console.WriteLine("ProductID: {0}", product.ProductID);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.DataTransferObject.Reload``1(``0)">
            <summary>
            Reloads the source object based upon its identifiers as specified by its <see cref="T:FlyweightObjects.DataColumnAttribute"/> Identifer properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to reload.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="P:FlyweightObjects.DataTransferObject.Requests">
            <summary>
            Gets a generic Queue of requests.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferObject.ApplicationName">
            <summary>
            Gets the application name for the instance of the class.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferObject.ExecutionTime">
            <summary>
            Gets the <see cref="T:System.TimeSpan"/> representing the sum of all execution times for the requested operations.
            </summary>	
        </member>
        <member name="P:FlyweightObjects.DataTransferObject.EnforceTransaction">
            <summary>
            Gets or sets a boolean value indicating whether all submitted requests should be required to participate
            in an enforced transaction.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferObject.Properties">
            <summary>
            Gets a serializable dictionary of dynamic properties.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferObject.AssemblyFullName">
            <summary>
            Gets the full name of current executing <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferObject.IsProcessed">
            <summary>
            Gets a boolean value indicating whether the message has been submitted to the server for processing.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferObject.IsComplete">
            <summary>
            Returns a boolean value indicating whether each request has been processed.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferObject.HasErrors">
            <summary>
            Returns a boolean value indicating whether any of the requests has an error.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferObject.ThrowExceptions">
            <summary>
            Gets or sets whether exceptions should be thrown or caught and placed in the <see cref="T:FlyweightObjects.ResponseMessage"/>
            object contained within the <see cref="T:FlyweightObjects.DataTransferObject"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferObject.DomainName">
            <summary>
            Gets or sets the unique name of the domain which identifies the context with specific object types. Parity must exist between
            the value of this property and objects with a DataTable.DomainName in order for deferred loading to work correctly
            acrosss multiple domains.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferObject.CurrentPrincipal">
            <summary>
            Gets the <see cref="T:FlyweightObjects.ISecurityPrincipal"/> representing the extended security context of the user.
            </summary>
        </member>
        <member name="T:FlyweightObjects.DataTransferRequest">
            <summary>
            Represents a request operation to be processed by the server.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataTransferRequest.#ctor">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataTransferRequest.#ctor(FlyweightObjects.RuntimeMethod)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="method">The method meta data for the request.</param>
        </member>
        <member name="P:FlyweightObjects.DataTransferRequest.RequestId">
            <summary>
            Gets the unique identifier for the request.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferRequest.Method">
            <summary>
            Gets the method meta data associated with the request.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferRequest.ReturnValue">
            <summary>
            Gets the return value for the request.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferRequest.IsProcessed">
            <summary>
            Gets a boolean value indicating whether the request has been processed.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferRequest.Response">
            <summary>
            Gets or sets the <see cref="T:FlyweightObjects.ResponseMessage"/> associated with the request.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataTransferRequest.DisplayName">
            <summary>
            Gets the name to display in the debugger.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ErrorStrings">
            <summary>
            Represents common error text to be associated with exceptions.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.ConcurrencyViolationException">
            <summary>
            Represents a ConcurrencyViolationException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.SelectTransactionTypeException">
            <summary>
            Represents a SelectTransactionTypeException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.InsertTransactionTypeException">
            <summary>
            Represents a InsertTransactionTypeException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.UpdateTransactionTypeException">
            <summary>
            Represents an UpdateTransactionTypeException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.DeleteTransactionTypeException">
            <summary>
            Represents an DeleteTransactionTypeException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.InvalidEnumerableArgumentException">
            <summary>
            Represents an InvalidEnumerableArgumentException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.ProviderNotSupportedException">
            <summary>
            Represents an ProviderNotSupportedException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.IEnumerableNotImplementedException">
            <summary>
            Represents an IEnumerableNotImplementedException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.InvalidIEnumerableIListException">
            <summary>
            Represents an InvalidIEnumerableIListException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.MissingDefaultConstructorException">
            <summary>
            Represents an MissingDefaultConstructorException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.MissingDataTableAttributeException">
            <summary>
            Represents an MissingDataTableAttributeException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.MissingColumnAttributeException">
            <summary>
            Represents an MissingColumnAttributeException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.InvalidPropertyExpressionException">
            <summary>
            Represents an InvalidPropertyExpressionException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.ValidationFailedException">
            <summary>
            Represents an ValidationFailedException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.InvalidToCommandConversionOperation">
            <summary>
            Represents an InvalidToCommandConversionOperation error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.InvalidMemberInfoExtensionArgument">
            <summary>
            Represents an InvalidMemberInfoExtensionArgument error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.EmptyDataTransferObjectRequestQueue">
            <summary>
            Represents a EmptyDataTransferObjectRequestQueue error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.InvalidBeginDeferredRequestsCall">
            <summary>
            Represents an InvalidBeginDeferredRequestCall error message;
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.InvalidProcessDeferredRequestsCall">
            <summary>
            Represents an InvalidProcessDeferredRequestsCall error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.InvalidPropertyNameException">
            <summary>
            Represents an InvalidPropertyException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.InvalidTableNameException">
            <summary>
             Represents an InvalidTableNameException error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.InvalidEncryptionKeyLength">
            <summary>
             Represents an InvalidEncryptionKeyLength error message.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.InvalidMemberExpressionOfProperty">
            <summary>
            Represents the error message encountered when an Expression cannot be evaluated as a MemberExpression.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ErrorStrings.EmptyEnumerableArgumentException">
            <summary>
            Represents the error message encountered when an empty collection argument has been supplied.
            </summary>
        </member>
        <member name="T:FlyweightObjects.DataOperationEventArgs`1">
            <summary>
            Represents the generic EventArgs used when a DML (Data Manipulation Language) operation is performed.
            </summary>
        </member>
        <member name="T:FlyweightObjects.DataOperationEventArgs">
            <summary>
            Represents the EventArgs used when a DML (Data Manipulation Language) operation is performed.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataOperationEventArgs.#ctor(FlyweightObjects.TransactionType,System.Object)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="transactionType">The type of transaction.</param>
            <param name="source">The source object used in the operation.</param>
        </member>
        <member name="M:FlyweightObjects.DataOperationEventArgs.#ctor(FlyweightObjects.TransactionType,FlyweightObjects.IStorageCommand)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="transactionType">The type of transaction.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> provided for the operation.</param>
        </member>
        <member name="P:FlyweightObjects.DataOperationEventArgs.TransactionType">
            <summary>
            Gets the <see cref="P:FlyweightObjects.DataOperationEventArgs.TransactionType"/> specified for operation.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataOperationEventArgs.Source">
            <summary>
            Gets the source object used in the operation.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataOperationEventArgs.Command">
            <summary>
            Gets the <see cref="T:FlyweightObjects.IStorageCommand"/> used in the operation.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataOperationEventArgs`1.#ctor(FlyweightObjects.TransactionType,`0)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="transactionType">The type of transaction.</param>
            <param name="source">The source object used in the operation.</param>
        </member>
        <member name="M:FlyweightObjects.DataOperationEventArgs`1.#ctor(FlyweightObjects.TransactionType,FlyweightObjects.IStorageCommand)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="transactionType">The type of transaction.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> provided for the operation.</param>
        </member>
        <member name="P:FlyweightObjects.DataOperationEventArgs`1.Source">
            <summary>
            Gets the source object used in the operation.
            </summary>
        </member>
        <member name="T:FlyweightObjects.CachedItemEventArgs">
            <summary>
            Represents an event argument associated with caching.
            </summary>
        </member>
        <member name="M:FlyweightObjects.CachedItemEventArgs.#ctor(FlyweightObjects.CacheItem)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="item">The CacheItem object which has been cached.</param>
        </member>
        <member name="P:FlyweightObjects.CachedItemEventArgs.Item">
            <summary>
            Gets or sets the CacheItem object.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ItemChangedEventArgs`1">
            <summary>
            Represents the base class event arguments for when an item is changed.
            </summary>
            <typeparam name="T">The type which has been changed.</typeparam>
        </member>
        <member name="M:FlyweightObjects.ItemChangedEventArgs`1.#ctor(`0)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="item">The changed item.</param>
        </member>
        <member name="P:FlyweightObjects.ItemChangedEventArgs`1.Item">
            <summary>
            Gets the item that has been changed.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ItemAddedEventArgs`1">
            <summary>
            Represents the event arguments for when an item is added.
            </summary>
            <typeparam name="T">The type which has been added.</typeparam>
        </member>
        <member name="M:FlyweightObjects.ItemAddedEventArgs`1.#ctor(`0)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="item">The added item.</param>
        </member>
        <member name="T:FlyweightObjects.ItemUpdatedEventArgs`1">
            <summary>
            Represents the event arguments for when an item is updated.
            </summary>
            <typeparam name="T">The type which has been updated.</typeparam>
        </member>
        <member name="M:FlyweightObjects.ItemUpdatedEventArgs`1.#ctor(`0)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="item">The updated item.</param>
        </member>
        <member name="T:FlyweightObjects.ItemRemovedEventArgs`1">
            <summary>
            Represents the event arguments for when an item is removed.
            </summary>
            <typeparam name="T">The type which has been removed.</typeparam>
        </member>
        <member name="M:FlyweightObjects.ItemRemovedEventArgs`1.#ctor(`0)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="item">The removed item.</param>
        </member>
        <member name="T:FlyweightObjects.ItemsClearedEventArgs`1">
            <summary>
            Represents the event arguments for when all items are cleared.
            </summary>
            <typeparam name="T">The type of the items which have been cleared.</typeparam>
        </member>
        <member name="M:FlyweightObjects.ItemsClearedEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="items">The cleared items.</param>
        </member>
        <member name="P:FlyweightObjects.ItemsClearedEventArgs`1.Items">
            <summary>
            The collection of cleared items.
            </summary>
        </member>
        <member name="T:FlyweightObjects.DataTransferEventArgs">
            <summary>
            Represents event arguments pertaining to <see cref="P:FlyweightObjects.DataTransferEventArgs.DataTransferObject"/> related requests.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataTransferEventArgs.#ctor(FlyweightObjects.DataTransferObject)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="dto">The <see cref="P:FlyweightObjects.DataTransferEventArgs.DataTransferObject"/> which is being processed.</param>
        </member>
        <member name="P:FlyweightObjects.DataTransferEventArgs.DataTransferObject">
            <summary>
            Gets the <see cref="P:FlyweightObjects.DataTransferEventArgs.DataTransferObject"/> associated with the requests.
            </summary>
        </member>
        <member name="T:FlyweightObjects.SecurityPrincipal">
            <summary>
            Represents information about the current user who has made a request to the server.
            </summary>
        </member>
        <member name="M:FlyweightObjects.SecurityPrincipal.#ctor(System.Security.Principal.IIdentity,System.String[])">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.SecurityPrincipal.#ctor">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.SecurityPrincipal.IsInRole(System.String)">
            <summary>
            Determines whether the current GenericPrincipal belongs to the specified role.
            </summary>
            <param name="role">The name of the role for which to check membership.</param>
        </member>
        <member name="P:FlyweightObjects.SecurityPrincipal.MachineName">
            <summary>
            Gets the local host name of the client's machine.
            </summary>
        </member>
        <member name="P:FlyweightObjects.SecurityPrincipal.RuntimeVersion">
            <summary>
            Gets the current version of the .NET runtime.
            </summary>
        </member>
        <member name="P:FlyweightObjects.SecurityPrincipal.Properties">
            <summary>
            Gets a serializable dictionary of dynamic properties.
            </summary>
        </member>
        <member name="P:FlyweightObjects.SecurityPrincipal.Identity">
            <summary>
            Gets the <see cref="T:System.Security.Principal.IIdentity"/> of the user represented by the current principal.
            </summary>
        </member>
        <member name="T:FlyweightObjects.SqlServerCeQueryBuilder`1">
            <summary>
            Represents a query builder to build Microsoft Sql Server Compact Edition specific queries.
            </summary>
        </member>
        <member name="T:FlyweightObjects.QueryBuilderBase`1">
            <summary>
            Represents a query builder to build relational database specific queries.
            </summary>
        </member>
        <member name="T:FlyweightObjects.IQueryBuilder`1">
            <summary>
            Represents a provider in the interpretation of an <see cref="T:FlyweightObjects.IRuntimeMethodQuery`1"/> object.
            </summary>
        </member>
        <member name="T:FlyweightObjects.IQueryExpression`1">
            <summary>
            Represents a provider independent query.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Select(FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Select(System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Select(System.Boolean,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="distinct">Determines whether a distinct set should be returned.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Select(System.Boolean,System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="distinct">Determines whether a distinct set should be returned.</param>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Insert">
            <summary>
            Represents the INSERT INTO keywords of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Insert(FlyweightObjects.PropertyExpression{`0}[])">
            <summary>
            Represents the INSERT INTO keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to be inserted.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Update">
            <summary>
            Represents the UPDATE keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Delete">
            <summary>
            Represents the DELETE keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.From``1">
            <summary>
            Represents the FROM keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to serve as the source of From.</typeparam>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Set(FlyweightObjects.PropertyExpression{`0}[])">
            <summary>
            Represents the SET keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of generic <see cref="T:FlyweightObjects.PropertyExpression`1"/> members whose values should be set.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Values(System.Object[])">
            <summary>
            Represents the VALUES keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="values">The values to be inserted.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Join``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the INNER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.LeftJoin``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the LEFT OUTER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.RightJoin``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the RIGHT OUTER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.FullJoin``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the FULL OUTER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.CrossJoin``1">
            <summary>
            Represents the CROSS JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Where(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the WHERE keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="whereExpression">The crtieria used to limit the results of the query.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.GroupBy(FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the GROUP BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members by which to group.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Having(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the HAVING keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="havingExpression">The expression which limits an aggregate function.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Union">
            <summary>
            Represents the UNION keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.OrderBy(FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the ORDER BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="sortExpressions">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.OrderBy(System.Int32)">
            <summary>
            Represents the ORDER BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="ordinal">The ordinal postiion by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.OrderBy(System.Int32[])">
            <summary>
            Represents the ORDER BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="ordinals">An array of ordinals by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.OrderBy(System.String)">
            <summary>
            Represents the ORDER BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="alias">The alias by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Desc">
            <summary>
            Represents the DESC keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Asc">
            <summary>
            Represents the ASC keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.And(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the AND keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="whereExpression">The crtieria used to limit the statement.</param>
            <seealso cref="M:FlyweightObjects.IQueryExpression`1.Where(FlyweightObjects.PropertyExpression)"/>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.Or(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the OR keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="whereExpression">The crtieria used to limit the statement.</param>
            <seealso cref="M:FlyweightObjects.IQueryExpression`1.Where(FlyweightObjects.PropertyExpression)"/>
        </member>
        <member name="M:FlyweightObjects.IQueryExpression`1.ToCommand">
            <summary>
            Returns an instance of an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IQueryExpression`1.Pagination">
            <summary>
            Gets or sets  the <see cref="P:FlyweightObjects.IQueryExpression`1.Pagination"/> for the <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IQueryBuilder`1.GetFunctionName(FlyweightObjects.FunctionType)">
            <summary>
            Gets a proper function name by <see cref="T:FlyweightObjects.FunctionType"/>.
            </summary>
            <param name="functionType">The type of supported function.</param>
        </member>
        <member name="M:FlyweightObjects.IQueryBuilder`1.BuildStorageCommand(FlyweightObjects.IRuntimeMethodQuery{`0})">
            <summary>
            Iterates a <see cref="T:FlyweightObjects.IRuntimeMethodQuery`1"/> instance and returns an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
            <param name="query">The query to be processed.</param>
        </member>
        <member name="P:FlyweightObjects.IQueryBuilder`1.ParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Select(FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Select(System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Select(System.Boolean,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="distinct">Determines whether a distinct set should be returned.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Select(System.Boolean,System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="distinct">Determines whether a distinct set should be returned.</param>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.#ctor(FlyweightObjects.IStorageProvider)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="provider">The <see cref="T:FlyweightObjects.IStorageProvider"/> for the domain.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.GetFunctionName(FlyweightObjects.FunctionType)">
            <summary>
            Gets a proper function name by <see cref="T:FlyweightObjects.FunctionType"/>.
            </summary>
            <param name="functionType">The type of supported function.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Insert">
            <summary>
            Represents the INSERT INTO keywords of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Insert(FlyweightObjects.PropertyExpression{`0}[])">
            <summary>
            Represents the INSERT INTO keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to be inserted.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Update">
            <summary>
            Represents the UPDATE keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Delete">
            <summary>
            Represents the DELETE keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.From``1">
            <summary>
            Represents the FROM keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to serve as the source of From.</typeparam>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Set(FlyweightObjects.PropertyExpression{`0}[])">
            <summary>
            Represents the SET keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of generic <see cref="T:FlyweightObjects.PropertyExpression`1"/> members whose values should be set.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Values(System.Object[])">
            <summary>
            Represents the VALUES keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="values">The values to be inserted.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Join``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the INNER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.LeftJoin``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the LEFT OUTER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.RightJoin``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the RIGHT OUTER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.FullJoin``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the FULL OUTER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.CrossJoin``1">
            <summary>
            Represents the CROSS JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.GroupBy(FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the GROUP BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members by which to group.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.GroupByAll(FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the Group By All keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members by which to group.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Having(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the HAVING keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="havingExpression">The expression which limits an aggregate function.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Union">
            <summary>
            Represents the UNION keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.UnionAll">
            <summary>
            Represents the Union All keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Where(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the WHERE keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="whereExpression">The crtieria used to limit the results of the query.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Where(FlyweightObjects.PropertyExpression,System.Boolean)">
            <summary>
            Represents the WHERE keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="whereExpression">The crtieria used to limit the results of the query.</param>
            <param name="recursive">Determines whether the method has been called by itself.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.OrderBy(FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the ORDER BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="sortExpressions">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.GetOrderByExpression(System.Collections.Generic.List{FlyweightObjects.PropertyExpression})">
            <summary>
            Returns a string representing the sorting expression of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="sortingExpressions">A collection of <see cref="T:FlyweightObjects.PropertyExpression"/>s.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.OrderBy(System.Int32)">
            <summary>
            Represents the ORDER BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="ordinal">The ordinal postiion by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.OrderBy(System.Int32[])">
            <summary>
            Represents the ORDER BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="ordinals">An array of ordinals by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.OrderBy(System.String)">
            <summary>
            Represents the ORDER BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="alias">The alias by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Desc">
            <summary>
            Represents the DESC keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Asc">
            <summary>
            Represents the ASC keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.And(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the AND keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="whereExpression">The crtieria used to limit the statement.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.Or(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the OR keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="whereExpression">The crtieria used to limit the statement.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.ToCommand">
            <summary>
            Returns an instance of an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.GetSelectedProperties(System.Type)">
            <summary>
            Returns a comma-separated string of selected properties.
            </summary>
            <param name="type">The type to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.GetSelectedProperties(FlyweightObjects.PropertyExpression[])">
            <summary>
            Returns a comma-separated string of selected properties.
            </summary>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> objects.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.GetJoinTypeExpression(FlyweightObjects.JoinType)">
            <summary>
            Returns a join type string expression for the supplied <see cref="T:FlyweightObjects.JoinType"/>.
            </summary>
            <param name="joinType">The <see cref="T:FlyweightObjects.JoinType"/> to express as a string.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.GetJoinExpression(FlyweightObjects.PropertyExpression)">
            <summary>
            Retrieves a string representing the join expression.
            </summary>
            <param name="joinExpression">The <see cref="T:FlyweightObjects.PropertyExpression"/> representing the join.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.GetFunctionExpression(FlyweightObjects.PropertyExpression)">
            <summary>
            Returns the composited function expression represented as a string.
            </summary>
            <param name="expression">The <see cref="T:FlyweightObjects.PropertyExpression"/> containing the function.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.GetOperatorExpression(FlyweightObjects.PropertyExpression)">
            <summary>
            Returns the operator expression represented as a string.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.CreateParameter(FlyweightObjects.PropertyExpression)">
            <summary>
            Creates a <see cref="T:FlyweightObjects.Parameter"/> object given the supplied expression.
            </summary>
            <param name="expression">The <see cref="T:FlyweightObjects.PropertyExpression"/>.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.CreateParameter">
            <summary>
            Creates a <see cref="T:FlyweightObjects.Parameter"/> object given the supplied expression.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.BuildStorageCommand(FlyweightObjects.IRuntimeMethodQuery{`0})">
            <summary>
            Iterates a <see cref="T:FlyweightObjects.IRuntimeMethodQuery`1"/> instance and returns an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
            <param name="query">The query to be processed.</param>
        </member>
        <member name="M:FlyweightObjects.QueryBuilderBase`1.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
        </member>
        <member name="P:FlyweightObjects.QueryBuilderBase`1.Pagination">
            <summary>
            Gets or sets the <see cref="P:FlyweightObjects.QueryBuilderBase`1.Pagination"/> for the <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.QueryBuilderBase`1.TransactionType">
            <summary>
            Gets the <see cref="P:FlyweightObjects.QueryBuilderBase`1.TransactionType"/> for the query.
            </summary>
        </member>
        <member name="P:FlyweightObjects.QueryBuilderBase`1.SelectedProperties">
            <summary>
            Gets or sets the collection of <see cref="T:FlyweightObjects.PropertyExpression"/> found in the query.
            </summary>
        </member>
        <member name="P:FlyweightObjects.QueryBuilderBase`1.SelectStatementCache">
            <summary>
            Gets a cache of Select statements for the given Type.
            </summary>
        </member>
        <member name="P:FlyweightObjects.QueryBuilderBase`1.MethodQueue">
            <summary>
            Gets a generic Queue of <see cref="T:FlyweightObjects.RuntimeMethod"/> representing the methods called to construct a query.
            </summary>
        </member>
        <member name="P:FlyweightObjects.QueryBuilderBase`1.Command">
            <summary>
            Gets the <see cref="T:FlyweightObjects.IStorageCommand"/> created by an <see cref="T:FlyweightObjects.IQueryBuilder`1"/> instance after interpreting the call stack.
            </summary>
        </member>
        <member name="P:FlyweightObjects.QueryBuilderBase`1.StorageProvider">
            <summary>
            Gets the <see cref="T:FlyweightObjects.IStorageProvider"/> associated with this <see cref="T:FlyweightObjects.IQueryBuilder`1"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.QueryBuilderBase`1.ParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeQueryBuilder`1.#ctor(FlyweightObjects.IStorageProvider)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="provider">The associated <see cref="T:FlyweightObjects.IStorageProvider"/>.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeQueryBuilder`1.GetFunctionName(FlyweightObjects.FunctionType)">
            <summary>
            Gets a proper function name by <see cref="T:FlyweightObjects.FunctionType"/>.
            </summary>
            <param name="functionType">The type of supported function.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeQueryBuilder`1.Select(System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeQueryBuilder`1.Select(System.Boolean,System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="distinct">Determines whether a distinct set should be returned.</param>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeQueryBuilder`1.ToCommand">
            <summary>
            Returns an instance of an <see cref="T:FlyweightObjects.IStorageCommand"/> IExecutableSql object.
            </summary>
        </member>
        <member name="P:FlyweightObjects.SqlServerCeQueryBuilder`1.ParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="T:FlyweightObjects.SqlServerCeStorageProvider">
            <summary>
            Represents the storage provider which interacts directly with a Microsoft Sql Server Compact Edition database.
            </summary>
        </member>
        <member name="T:FlyweightObjects.StorageProviderBase">
            <summary>
            Represents an abstract base class implementation of a storage provider which interacts directly with a relational database.
            </summary>
        </member>
        <member name="T:FlyweightObjects.IStorageProvider">
            <summary>
            Represents the storage provider which interacts directly with a relational database.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.BuildStorageCommand``1(FlyweightObjects.IRuntimeMethodQuery{``0})">
            <summary>
            Converts an <see cref="T:FlyweightObjects.IRuntimeMethodQuery`1"/> into an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
            <typeparam name="T">The target type of the query.</typeparam>
            <param name="query">The query to convert.</param>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.ProcessSelect``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a select statement against the storage.
            </summary>
            <typeparam name="T">The type from which to select.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.ProcessInsert``1(``0)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The instance of T to insert.</param>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.ProcessInsert``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.ProcessInsert``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched insert statments against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The collection of T to insert.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.ProcessUpdate``1(``0)">
            <summary>
             Executes an update statement against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="source">The instance of T to update.</param>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.ProcessUpdate``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an update statement against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.ProcessUpdate``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched update statments against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="source">The collection of T to update.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.ProcessDelete``1(``0)">
            <summary>
            Executes a delete statement against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">The instance of T to delete.</param>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.ProcessDelete``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a delete statement against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.ProcessDelete``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched delete statments against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">The collection of T to delete.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.ProcessExists``1(``0)">
            <summary>
            Returns a boolean indicating whether source exists.
            </summary>
            <typeparam name="T">The type to search.</typeparam>
            <param name="source">The instance of T for which to search.</param>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.ProcessReload``1(``0)">
            <summary>
            Returns source after being refreshed from the storage.
            </summary>
            <typeparam name="T">The type to reload.</typeparam>
            <param name="source">An instance of T to reload.</param>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.ProcessTruncate``1">
            <summary>
            Truncates a target entity located in storage.
            </summary>
            <typeparam name="T">The type abstracting the table to truncate.</typeparam>
        </member>
        <member name="M:FlyweightObjects.IStorageProvider.ProcessExecute(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an <see cref="T:FlyweightObjects.IStorageCommand"/> against storage.
            </summary>
            <param name="command">The command to execute.</param>
        </member>
        <member name="P:FlyweightObjects.IStorageProvider.ParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IStorageProvider.AllowEmptyString">
            <summary>
            Gets or sets a value indicating whether empty string values are allowed for string-based data types. If false and 
            the underlying column accepts nulls, a <see cref="T:System.DBNull"/> value is applied.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IStorageProvider.Connection">
            <summary>
            Gets or sets a connection to the storage.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IStorageProvider.ConnectionString">
            <summary>
            Gets or sets the string used to open the storage.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IStorageProvider.ProviderType">
            <summary>
            Gets the type of storage provider for the connection.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IStorageProvider.CommandTimeout">
            <summary>
            Gets or sets the timeout value.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IStorageProvider.IsolationLevel">
            <summary>
            Gets or sets the transactional isolation level for commands executes against the storage.
            </summary>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.BuildStorageCommand``1(FlyweightObjects.IRuntimeMethodQuery{``0})">
            <summary>
            Converts an <see cref="T:FlyweightObjects.IRuntimeMethodQuery`1"/> into an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
            <typeparam name="T">The target type of the query.</typeparam>
            <param name="query">The query to convert.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessSelect``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a select statement against the storage.
            </summary>
            <typeparam name="T">The type from which to select.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessInsert``1(``0)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The instance of T to insert.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessInsert``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessInsert``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched insert statments against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The collection of T to insert.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessUpdate``1(``0)">
            <summary>
             Executes an update statement against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="source">The instance of T to update.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessUpdate``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an update statement against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessUpdate``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched update statments against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="source">The collection of T to update.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessDelete``1(``0)">
            <summary>
            Executes a delete statement against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">The instance of T to delete.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessDelete``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a delete statement against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessDelete``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched delete statments against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">The collection of T to delete.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessExists``1(``0)">
            <summary>
            Returns a boolean indicating whether source exists.
            </summary>
            <typeparam name="T">The type to search.</typeparam>
            <param name="source">The instance of T for which to search.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessReload``1(``0)">
            <summary>
            Returns source after being refreshed from the storage.
            </summary>
            <typeparam name="T">The type to reload.</typeparam>
            <param name="source">An instance of T to reload.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessTruncate``1">
            <summary>
            Truncates a target entity located in storage.
            </summary>
            <typeparam name="T">The type abstracting the table to truncate.</typeparam>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessExecute(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an <see cref="T:FlyweightObjects.IStorageCommand"/> against storage.
            </summary>
            <param name="command">The command to execute.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.#ctor(System.String,FlyweightObjects.StorageProviderType)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString">The string used to connect to the storage.</param>
            <param name="providerType">The <see cref="T:FlyweightObjects.StorageProviderType"/> of the storage.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.#ctor(FlyweightObjects.DatabaseManager)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="databaseManager">The <see cref="P:FlyweightObjects.StorageProviderBase.DatabaseManager"/> that will execute the operations against storage.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.BeginTransaction">
            <summary>
            Starts a new <see cref="T:System.Data.IDbTransaction"/> if one is not already present, otherwise it will enlist.
            </summary>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.CommitTransaction">
            <summary>
            Commits the current transaction to storage assuming that the current instance is the owner.
            </summary>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.CommitTransaction(System.Boolean)">
            <summary>
            Commits the current transaction to storage. If force is equal to true, the transaction will be commited even though the current instance may not be the owner.
            </summary>
            <param name="force">A value indicating whether to force the commit regardless of ownership.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.RollbackTransaction">
            <summary>
            Gets the current active transaction if one if present, otherwise returns null.
            </summary>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessOutputParameters``1(``0,FlyweightObjects.ParameterCollection)">
            <summary>
            Binds the returned out put parameters on the object if applicable.
            </summary>
            <typeparam name="T">The type to bind the outout parameters to.</typeparam>
            <param name="source">An instance of T.</param>
            <param name="parameters">A <see cref="T:FlyweightObjects.ParameterCollection"/> of parameters.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.ProcessBatch``1(System.Collections.Generic.IEnumerable{``0},System.Int32,FlyweightObjects.TransactionType)">
            <summary>
            Interates throgh a collection of objects, creates the command texts and then executes the entire batch as one transaction.
            </summary>
            <typeparam name="T">The type to process.</typeparam>
            <param name="source">A collection of T.</param>
            <param name="batchSize">The size of the batch.</param>
            <param name="transactionType">The transaction type for the batch.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.BuildInsertCommand``1(``0)">
            <summary>
            Returns an insert command based upon the supplied object.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">An instance of T to insert.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.BuildUpdateCommand``1(``0)">
            <summary>
            Returns an update command based upon the supplied object.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="source">An instance of T to update.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.BuildDeleteCommand``1(``0)">
            <summary>
            Returns a delete command based upon the supplied object.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">An instance of T to delete.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.BuildTruncateCommand``1">
            <summary>
            Builds a truncate statement for a type abstracting a table in storage.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.BuildReloadCommand``1(``0)">
            <summary>
            Builds a select command used to reload the object.
            </summary>
            <typeparam name="T">The type to reload.</typeparam>
            <param name="source">An instance of T to reload.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.IsValidForInsert``1(``0,FlyweightObjects.DataColumnAttribute)">
            <summary>
            Returns a boolean value indicating whether the supplied <see cref="T:FlyweightObjects.DataColumnAttribute"/> can be inserted.
            </summary>
            <typeparam name="T">The type to interrogate.</typeparam>
            <param name="source">An instance of T.</param>
            <param name="dataColumn">A <see cref="T:FlyweightObjects.DataColumnAttribute"/> representing the meta data about the underlying field.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderBase.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageProviderBase.ParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageProviderBase.Connection">
            <summary>
            Gets or sets the connection object.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageProviderBase.ActiveTransaction">
            <summary>
            Gets the current active transaction if one exists.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageProviderBase.ConnectionString">
            <summary>
            Gets the string used to connect to the storage.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageProviderBase.ProviderType">
            <summary>
            Gets the <see cref="T:FlyweightObjects.StorageProviderType"/> of the storage.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageProviderBase.CommandTimeout">
            <summary>
            Gets or sets the timeout of each command executed against the storage.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageProviderBase.IsolationLevel">
            <summary>
            Gets or sets the transaction <see cref="P:FlyweightObjects.StorageProviderBase.IsolationLevel"/> of exach executed command.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageProviderBase.AllowEmptyString">
            <summary>
            Gets or sets a value indicating whether empty string values are allowed for string-based data types. If false and 
            the underlying column accepts nulls, a <see cref="T:System.DBNull"/> value is applied.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageProviderBase.DatabaseManager">
            <summary>
            Gets the <see cref="P:FlyweightObjects.StorageProviderBase.DatabaseManager"/> used to communicate with the storage.
            </summary>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString">The string used to connect to the storage.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.GetParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.BuildStorageCommand``1(FlyweightObjects.IRuntimeMethodQuery{``0})">
            <summary>
            Converts an <see cref="T:FlyweightObjects.IRuntimeMethodQuery`1"/> into an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
            <typeparam name="T">The target type of the query.</typeparam>
            <param name="query">The query to convert.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.ProcessSelect``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a select statement against the storage.
            </summary>
            <typeparam name="T">The type from which to select.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.ProcessInsert``1(``0)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The instance of T to insert.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.ProcessInsert``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.ProcessInsert``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched insert statments against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The collection of T to insert.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.ProcessUpdate``1(``0)">
            <summary>
             Executes an update statement against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="source">The instance of T to update.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.ProcessUpdate``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an update statement against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.ProcessUpdate``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched update statments against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="source">The collection of T to update.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.ProcessDelete``1(``0)">
            <summary>
            Executes a delete statement against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">The instance of T to delete.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.ProcessDelete``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a delete statement against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.ProcessDelete``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched delete statments against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">The collection of T to delete.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.ProcessExists``1(``0)">
            <summary>
            Returns a boolean indicating whether source exists.
            </summary>
            <typeparam name="T">The type to search.</typeparam>
            <param name="source">The instance of T for which to search.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.ProcessReload``1(``0)">
            <summary>
            Returns source after being refreshed from the storage.
            </summary>
            <typeparam name="T">The type to reload.</typeparam>
            <param name="source">An instance of T to reload.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.BuildInsertCommand``1(``0)">
            <summary>
            Returns an <see cref="T:FlyweightObjects.StorageCommand"/> representing an insert command based upon the contents of soucre.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerCeStorageProvider.ProcessTruncate``1">
            <summary>
            Truncates a target entity located in storage.
            </summary>
            <typeparam name="T">The type abstracting the table to truncate.</typeparam>
        </member>
        <member name="P:FlyweightObjects.SqlServerCeStorageProvider.ParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="T:FlyweightObjects.TransactionType">
            <summary>
            Represents a transaction type to be executed against the storage.
            </summary>
        </member>
        <member name="F:FlyweightObjects.TransactionType.Unknown">
            <summary>
            The default setting.
            </summary>
        </member>
        <member name="F:FlyweightObjects.TransactionType.Select">
            <summary>
            A select statment.
            </summary>
        </member>
        <member name="F:FlyweightObjects.TransactionType.Insert">
            <summary>
            An insert statement.
            </summary>
        </member>
        <member name="F:FlyweightObjects.TransactionType.Update">
            <summary>
            An update statement.
            </summary>
        </member>
        <member name="F:FlyweightObjects.TransactionType.Truncate">
            <summary>
            A truncate statement
            </summary>
        </member>
        <member name="F:FlyweightObjects.TransactionType.Delete">
            <summary>
            A delete statement.
            </summary>
        </member>
        <member name="F:FlyweightObjects.TransactionType.Persist">
            <summary>
            A persist statement.
            </summary>
        </member>
        <member name="T:FlyweightObjects.StorageCommand">
            <summary>
            Represents a structured query language command to be executed against the storage.
            </summary>
        </member>
        <member name="T:FlyweightObjects.IStorageCommand">
            <summary>
            Represents an abstract command to be processed by a <see cref="T:FlyweightObjects.IStorageProvider"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IStorageCommand.Name">
            <summary>
            Gets or sets the name of the command.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IStorageCommand.Parameters">
            <summary>
            Gets the <see cref="T:FlyweightObjects.ParameterCollection"/> of the command.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IStorageCommand.CommandType">
            <summary>
            Gets or set the <see cref="P:FlyweightObjects.IStorageCommand.CommandType"/> of the command.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IStorageCommand.TransactionType">
            <summary>
            Gets the <see cref="P:FlyweightObjects.IStorageCommand.TransactionType"/> of the command.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IStorageCommand.SqlText">
            <summary>
            Gets or sets the command text.
            </summary>
        </member>
        <member name="F:FlyweightObjects.StorageCommand._name">
            <summary>
            The name of the command.
            </summary>
        </member>
        <member name="F:FlyweightObjects.StorageCommand._sqlText">
            <summary>
            The command text or procedure name of the command.
            </summary>
        </member>
        <member name="F:FlyweightObjects.StorageCommand._parameters">
            <summary>
            The <see cref="T:FlyweightObjects.ParameterCollection"/> of the command.
            </summary>
        </member>
        <member name="F:FlyweightObjects.StorageCommand._commandType">
            <summary>
            The <see cref="P:FlyweightObjects.StorageCommand.CommandType"/> of the command.
            </summary>
        </member>
        <member name="M:FlyweightObjects.StorageCommand.#ctor">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.StorageCommand.#ctor(System.String,System.Data.CommandType)">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.StorageCommand.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.StorageCommand.CreateParameter(System.String,FlyweightObjects.DataColumnAttribute,System.Object,System.Data.ParameterDirection)">
            <summary>
            Returns a <see cref="T:FlyweightObjects.Parameter"/> to be used in the command.
            </summary>
            <param name="parameterPrefix">The prefix to prepend to the name.</param>
            <param name="dataColumn">The <see cref="T:FlyweightObjects.DataColumnAttribute"/> used in creation.</param>
            <param name="value">The value for the Parameter.</param>
            <param name="direction">The <see cref="T:System.Data.ParameterDirection"/> of the Parameter.</param>
        </member>
        <member name="M:FlyweightObjects.StorageCommand.ToString">
            <summary>
            Returns a string representation of the <see cref="T:FlyweightObjects.StorageCommand"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageCommand.Name">
            <summary>
            The name of the command.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageCommand.SqlText">
            <summary>
            Gets or sets the SQL command text to be run on the storage.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageCommand.CommandType">
            <summary>
            Gets or sets the <see cref="P:FlyweightObjects.StorageCommand.CommandType"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageCommand.TransactionType">
            <summary>
            Gets the <see cref="P:FlyweightObjects.StorageCommand.TransactionType"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageCommand.Parameters">
            <summary>
            Gets or sets the collection of parameters to be used when querying the storage.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ExpressionEvaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="fnCanBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:FlyweightObjects.ExpressionEvaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="T:FlyweightObjects.ExpressionEvaluator.SubtreeEvaluator">
            <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="T:FlyweightObjects.ExpressionEvaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ExtensionMethods">
            <summary>
            Represents a compendium of static extension methods.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.GetDefaultConstructor(System.Type)">
            <summary>
            Returns the default contstructor for the given type if one exists.
            </summary>
            <param name="source">The type of to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.HasDefaultConstructor(System.Type)">
            <summary>
            Returns a boolean value indicating whether the type contains a default constructor.
            </summary>
            <param name="source">The type of to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.IsEnumerable(System.Type)">
            <summary>
            Returns a boolean indicating whether or not the source can be enumerated.
            </summary>
            <param name="source">The type of to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.IsGenericList(System.Type)">
            <summary>
            Returns a boolean value indicating whether the supplied type is a generic list.
            </summary>
            <param name="source">The type of to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.IsGenericListDerived(System.Type)">
            <summary>
            Returns a boolean value indicating whether the supplied type's base class is a generic list.
            </summary>
            <param name="source">The type of to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.GetGenericTypeParameter(System.Type)">
            <summary>
            Returns a type that represents the generic argument of the generic class instance.
            </summary>
            <param name="source">The type of to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.IsCacheable(System.Type)">
            <summary>
            Returns a boolean value indicating whether the type can be cached.
            </summary>
            <param name="source">The type of to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.IsCacheable(System.Type,System.Int32@)">
            <summary>
            Returns a boolean value indicating whether the type can be cached, and if it can, the associated time out value.
            </summary>
            <param name="source">The type of to interrogate.</param>
            <param name="cacheTimeOut">The time out value for the type.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.GetMemberInfoType(System.Reflection.MemberInfo)">
            <summary>
            Returns the type exposed by the <see cref="T:System.Reflection.MemberInfo"/> subtype implementation.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> object.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.GetTransactionType(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns a <see cref="T:FlyweightObjects.TransactionType"/> enum value based upon the parsed <see cref="T:FlyweightObjects.IStorageCommand"/> SqlText property.
            </summary>
            <param name="source">The <see cref="T:FlyweightObjects.IStorageCommand"/> object to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.ToSingle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first instance in source or T's default value if source is empty.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of the type parameter.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.ToFlyweightSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to an instance of a <see cref="T:FlyweightObjects.FlyweightSet`1"/>.
            </summary>
            <typeparam name="T">the type parameter of the object.</typeparam>
            <param name="source">The source list of objects to convert.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.ToCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts source to a new <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of the type parameter.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.ToBindingList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts source to a new <see cref="T:System.ComponentModel.BindingList`1"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of the type parameter.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts source to a new <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of the type parameter.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.ToStack``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts source to a new <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of the type parameter.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.IsNumeric(System.String)">
            <summary>
            Returns a boolean indicating whether the provided string can be interpreted as a number.
            </summary>
            <param name="source">The string to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.GetBytes(System.IO.Stream)">
            <summary>
            Gets the entire <see cref="T:System.IO.Stream"/> object as an array of bytes.
            </summary>
            <param name="stream">The stream to read.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.Compress(System.Byte[])">
            <summary>
            Compresses the byte array using Gzip.
            </summary>
            <param name="bytes">The byte array to compress.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.Decompress(System.Byte[])">
            <summary>
            Decompresses the byte array using Gzip.
            </summary>
            <param name="bytes">The byte array to decomress.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.IsChanged``1(``0)">
            <summary>
            Determines if an object has been changed.
            </summary>
            <typeparam name="T">The type of object to interrogate.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.IsChanged``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether or not the provided object is changed.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> object to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Encrypts the byte array using the <see cref="T:System.Security.Cryptography.TripleDESCryptoServiceProvider"/> provider.
            </summary>
            <param name="bytes">The byte array to encrypt.</param>
            <param name="key">A valid <see cref="P:System.Security.Cryptography.TripleDES.Key"/> value.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.Encrypt(System.Byte[])">
            <summary>
            Encrypts the byte array using the <see cref="T:System.Security.Cryptography.TripleDESCryptoServiceProvider"/> provider.
            </summary>
            <param name="bytes">The byte array to encrypt.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Decryptes the byte array using the <see cref="T:System.Security.Cryptography.TripleDESCryptoServiceProvider"/> provider.
            </summary>
            <param name="bytes">The byte array to decrypt.</param>
            <param name="key">A valid <see cref="P:System.Security.Cryptography.TripleDES.Key"/> value.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.ToMD5(System.Byte[])">
            <summary>
            Returns an MD5 hash of the byte array using the <see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider"/>.
            </summary>
            <param name="bytes">The byte array to hash.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.Decrypt(System.Byte[])">
            <summary>
            Decryptes the byte array using the <see cref="T:System.Security.Cryptography.TripleDESCryptoServiceProvider"/> provider.
            </summary>
            <param name="bytes">The byte array to decrypt.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.IsImplementationOf(System.Type,System.Type)">
            <summary>
            Returns a boolean value indicating whether the current type implements the supplied interface type.
            </summary>
            <param name="currentType">The type being evaluated.</param>
            <param name="interfaceType">The interface type being checked.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.TrimNull(System.String)">
            <summary>
            Returns a zero-length string if the source is null, otherwise the string trimmed.
            </summary>
            <param name="source">The string to be trimmed.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of objects contained in the collection.</typeparam>
            <param name="source">The collection of objects to iterate.</param>
            <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Performs an ascending sort operation on the supplied <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of objects contained in the collection.</typeparam>
            <param name="source">The collection of objects to sort.</param>
            <param name="expression">An expression representing the property name by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.ComponentModel.ListSortDirection)">
            <summary>
            Performs a sort operation on the supplied <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of objects contained in the collection.</typeparam>
            <param name="source">The collection of objects to sort.</param>
            <param name="expression">An expression representing the property name by which to sort.</param>
            <param name="direction">The direction by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.Sort``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Performs an ascending sort operation on the supplied <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of objects contained in the collection.</typeparam>
            <param name="source">The collection of objects to sort.</param>
            <param name="propertyName">The property name by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.Sort``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            Performs a sort operation on the supplied <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of objects contained in the collection.</typeparam>
            <param name="source">The collection of objects to sort.</param>
            <param name="propertyName">The property name by which to sort.</param>
            <param name="direction">The direction by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.Remove(System.String,System.Char[])">
            <summary>
            Returns a string with the removed characters found in the supplied character array.
            </summary>
            <param name="source">The string to search.</param>
            <param name="chars">The characters to remove.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.GetValue``1(FlyweightObjects.IFlyweight,System.String)">
            <summary>
            Gets the value held in local <see cref="T:FlyweightObjects.PropertyStorage"/> for the specified index.
            </summary>
            <typeparam name="T">The type of the value to get.</typeparam>
            <param name="source">An instance of an <see cref="T:FlyweightObjects.IFlyweight"/>.</param>
            <param name="index">The property or field name held in <see cref="T:FlyweightObjects.PropertyStorage"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.GetValueOrDefault``1(FlyweightObjects.IFlyweight,System.String)">
            <summary>
            If it can be found, returns the value for index, otherwise the default of T.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="source">The <see cref="T:FlyweightObjects.IFlyweight"/> to interrogate.</param>
            <param name="index">The property or field name held in <see cref="T:FlyweightObjects.PropertyStorage"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.SetValue``1(FlyweightObjects.IFlyweight,System.String,``0)">
            <summary>
            Sets the value held in local <see cref="T:FlyweightObjects.PropertyStorage"/> for the specified index.
            </summary>
            <typeparam name="T">The type of the value to set.</typeparam>
            <param name="source">An instance of an <see cref="T:FlyweightObjects.IFlyweight"/>.</param>
            <param name="index">The property or field name held in <see cref="T:FlyweightObjects.PropertyStorage"/>.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.ToRoot(System.Exception)">
            <summary>
            Returns the inner most <see cref="T:System.Exception"/> for the provided exception.
            </summary>
            <param name="source">The <see cref="T:System.Exception"/> to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.AsType``1(System.Object)">
            <summary>
            Performs conversions between compatible reference types. If the cast is not successful, 
            null will be returned.
            </summary>
            <typeparam name="T">The type to cast to.</typeparam>
            <param name="source">The <see cref="T:System.Object"/> to cast.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.TryCast``1(System.Object,``0@)">
            <summary>
            Returns true if the object was successfully casted to the type of T, otherwise false. If successful,
            the supplied out parameter will be set to the casted type, otherwise its default will be set.
            </summary>
            <typeparam name="T">The type to cast to.</typeparam>
            <param name="source">The <see cref="T:System.Object"/> to cast.</param>
            <param name="value">A out parameter to set for the casted type.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.EqualTo``1(``0,``0)">
            <summary>
            Determines whether the values of the two objects are the same for all of its members, public or otherwise.
            </summary>
            <typeparam name="T">The instance to compare.</typeparam>
            <param name="source">The source object to compare.</param>
            <param name="target">The target object to compare.</param>
        </member>
        <member name="M:FlyweightObjects.ExtensionMethods.Execute``1(FlyweightObjects.IQueryExpression{``0},FlyweightObjects.IDataContext)">
            <summary>
            Executes the query given an instance of a <see cref="T:FlyweightObjects.DataContext"/>.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="source">An instance of an <see cref="T:FlyweightObjects.IQueryExpression`1"/>.</param>
            <param name="context">An instance of a <see cref="T:FlyweightObjects.DataContext"/>.</param>
            <returns></returns>
        </member>
        <member name="T:FlyweightObjects.HttpClientContext`1">
            <summary>
            Represents a generic class for clients using the Http protocol.
            </summary>
        </member>
        <member name="T:FlyweightObjects.HttpClientContext">
            <summary>
            Represents the class for clients using the Http protocol.
            </summary>
        </member>
        <member name="M:FlyweightObjects.HttpClientContext.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="remotedType">The MarshalByRefObject type exposed by the remote service.</param>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
        </member>
        <member name="M:FlyweightObjects.HttpClientContext.#ctor(System.Type,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="remotedType">The MarshalByRefObject type exposed by the remote service.</param>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
            <param name="compressPayloads">Determines whether the request and response payloads should be compressed.</param>
            <param name="encryptPayloads">Determines whether the request and response payloads should be encrypted.</param>
        </member>
        <member name="M:FlyweightObjects.HttpClientContext.#ctor(System.Type,System.String,System.Boolean,System.Boolean,System.Byte[])">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="remotedType">The MarshalByRefObject type exposed by the remote service.</param>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
            <param name="compressPayloads">Determines whether the request and response payloads should be compressed.</param>
            <param name="key">A valid 24 byte <see cref="P:System.Security.Cryptography.TripleDES.Key"/> value to be used when encrypting and decrypting payloads.</param>
        </member>
        <member name="M:FlyweightObjects.HttpClientContext.#ctor(System.Type,System.String,System.Boolean,System.Collections.IDictionary)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="remotedType">The MarshalByRefObject type exposed by the remote service.</param>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
            <param name="properties">An <see cref="T:System.Collections.IDictionary"/> of properties specific for the remoting channel.</param>
        </member>
        <member name="M:FlyweightObjects.HttpClientContext`1.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
        </member>
        <member name="M:FlyweightObjects.HttpClientContext`1.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
            <param name="compressPayloads">Determines whether the request and response payloads should be compressed.</param>
            <param name="encryptPayloads">Determines whether the request and response payloads should be encrypted.</param>
        </member>
        <member name="M:FlyweightObjects.HttpClientContext`1.#ctor(System.String,System.Boolean,System.Boolean,System.Byte[])">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
            <param name="compressPayloads">Determines whether the request and response payloads should be compressed.</param>
            <param name="key">A valid 24 byte <see cref="P:System.Security.Cryptography.TripleDES.Key"/> value to be used when encrypting and decrypting payloads.</param>
        </member>
        <member name="M:FlyweightObjects.HttpClientContext`1.#ctor(System.String,System.Boolean,System.Collections.IDictionary)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
            <param name="properties">An <see cref="T:System.Collections.IDictionary"/> of properties specific for the remoting channel.</param>
        </member>
        <member name="P:FlyweightObjects.HttpClientContext`1.Service">
            <summary>
            Gets the current service to which the client connects.
            </summary>
        </member>
        <member name="T:FlyweightObjects.HttpServiceContext">
            <summary>
            Represents server side context that can be used to process requests over the Http protocol.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ServiceContextBase">
            <summary>
            Represents a base class implementation for server side contexts that can be used to process requests.
            </summary>
        </member>
        <member name="T:FlyweightObjects.IServiceContext">
            <summary>
            Represents the serice interface responsible for processing client requests.
            </summary>
        </member>
        <member name="M:FlyweightObjects.IServiceContext.ProcessDataTransferObject(System.Byte[])">
            <summary>
            Returns a byte array representing a binary serialized <see cref="T:FlyweightObjects.DataTransferObject"/>.
            </summary>
            <param name="bytes">A binary serialized <see cref="T:FlyweightObjects.DataTransferObject"/>.</param>
            <returns>
            A binary serialized instance of a <see cref="T:FlyweightObjects.DataTransferObject"/>.
            </returns>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.#ctor(System.String,FlyweightObjects.StorageProviderType)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString">The connection string to be used to connect to the storage provider.</param>
            <param name="providerType">The type of storage to connect.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.#ctor(System.Type)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="defaultBusinessLogicType">The default <see cref="T:FlyweightObjects.BusinessLogicBase`1"/> implementation for the domain.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.ProcessDataTransferObject(System.Byte[])">
            <summary>
            Processes a <see cref="T:FlyweightObjects.DataTransferObject"/> and returns the serialized results.
            </summary>
            <param name="bytes">A binary serialized instance of a <see cref="T:FlyweightObjects.DataTransferObject"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.ValidatePrincipal(FlyweightObjects.ISecurityPrincipal)">
            <summary>
            Returns whether the current <see cref="T:FlyweightObjects.ISecurityPrincipal"/> is valid for the operation.
            </summary>
            <param name="principal">The current principal.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.InitializeContext(System.String,FlyweightObjects.StorageProviderType)">
            <summary>
            Creates a new instance of an <see cref="T:FlyweightObjects.DataContext"/>.
            </summary>
            <param name="connectionString">The connection string for the StorageProvider.</param>
            <param name="providerType">The StorageProviderType enumerated value.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.InitializeContext(System.Boolean)">
            <summary>
            Creates a new instance of a default business logic implementation.
            </summary>
            <param name="beginTransaction">Determines whether a new transaction should be started.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.TrySelect``1(``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.TrySelect``1(System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.TrySelect``1(FlyweightObjects.PropertyExpression{``0},``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.TrySelect``1(FlyweightObjects.PropertyExpression{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> criteria used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.TrySelect``1(FlyweightObjects.IQueryExpression{``0},``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.TrySelect``1(FlyweightObjects.IQueryExpression{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            an IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.TrySelect``1(FlyweightObjects.IStorageCommand,``0@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be
            the retrieved object, otherwise it will be its default.  Note the value for sql may be any object which implements 
            the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.TrySelect``1(FlyweightObjects.IStorageCommand,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Returns a boolean value indicating whether or not the source exists in storage. If true, the source will be an 
            IEnumerable of the retrieved objects, otherwise if will be an empty instance of IEnumerable.  Note the value for 
            sql may be any object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Exists``1(``0)">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Exists``1(FlyweightObjects.PropertyExpression{``0})">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Exists``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Exists``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns a boolean value indicating whether the object exists in storage.  Note the value for sql may be any 
            object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of source.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1">
            <summary>
            Returns all objects for the specified type of T contained in storage.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1(System.Int32)">
            <summary>
            Returns all objects for the specified type of T contained in storage constrained by the amount as specified
            by limit.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1(System.Int32,FlyweightObjects.PropertyExpression{``0})">
            <summary>
            Returns all objects for the specified type of T contained in storage constrained by the amount as specified
            by limit and using the criteria as specified by whereExpression.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1(FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions. Additional objects will be retrieved in the graph according to their level as specified
            by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type of T contained in storage using the criteria as specified by whereExpression,
            sorted by sortExpressions. Additional objects will be retrieved in the graph according to their level as specified
            by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1(System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1(FlyweightObjects.PreloadDepth,System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions. Additional objects will be retrieved in the graph 
            according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="depth">The depth of the object graph to prefectch.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1(FlyweightObjects.PreloadOptions{``0},System.Int32,FlyweightObjects.PropertyExpression{``0},FlyweightObjects.PropertyExpression{``0}[])">
            <summary>
            Returns all objects for the specified type T in storage constrained by the amount as specified by limit using the 
            criteria as specified by whereExpression, and sorted by sortExpressions. Additional objects will be retrieved in the graph 
            according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="limit">The maximum number of objects to retrieve.</param>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to query the storage.</param>
            <param name="sortExpressions">A parameter array of <see cref="T:FlyweightObjects.PropertyExpression`1"/> by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IStorageCommand"/>.  Note the value for 
            sql may be any object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1(FlyweightObjects.PreloadDepth,FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IStorageCommand"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.  Note the value for sql may be any 
            object which implements the <see cref="T:FlyweightObjects.IStorageCommand"/> interface including <see cref="T:FlyweightObjects.StoredProcedure"/>.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="depth">The depth limit of the object graph.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> by which to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Select``1(FlyweightObjects.PreloadOptions{``0},FlyweightObjects.IStorageCommand)">
            <summary>
            Returns all objects for the specified type of T in storage using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. Additional objects 
            will be retrieved in the graph according to their level as specified by depth.
            </summary>
            <typeparam name="T">The type parameter of the objects to retrieve.</typeparam>
            <param name="options">A <see cref="T:FlyweightObjects.PreloadOptions`1"/> specifying additional related objects to retrieve.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to query the storage.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Insert``1(``0)">
            <summary>
            Performs an insert into the target entity with the values as given by the source object's properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to insert.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Insert``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Performs an insert into the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>. 
            </summary>
            <typeparam name="T">The type parameter of the objects to insert.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the objects.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Insert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs multiple inserts into the target entity using the supplied source.
            </summary>
            <typeparam name="T">The type parameter of the objects to insert.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Update``1(``0)">
            <summary>
            Performs an update of the target entity with the values as given by the source object's properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to update.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Update``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Performs an update of the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <typeparam name="T">The type parameter of the object to update.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to insert the object.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Update``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs multiple updates of the target entity using the supplied source.
            </summary>
            <typeparam name="T">The type parameter of the objects to update.</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Upsert``1(``0)">
            <summary>
            Performs an update of the target entity with the values as given by the source object's properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to update.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Upsert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            For each object in source, if the object alrady exists, performs an update of the target entity using 
            the supplied source, otherwise an insert is applied.
            </summary>
            <typeparam name="T">The type parameter of the objects to either update or insert..</typeparam>
            <param name="source">An object which implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Delete``1(``0)">
            <summary>
            Deletes the source from storage.
            </summary>
            <typeparam name="T">The type parameter of the objects to delete.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Delete``1(FlyweightObjects.PropertyExpression{``0})">
            <summary>
            Performs a delete on the target entity given the supplied filter criteria.
            </summary>
            <typeparam name="T">The type parameter of the objects to delete.</typeparam>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used as the filter for the delete.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Delete``1(FlyweightObjects.IQueryExpression{``0})">
            <summary>
            Performs a delete on the target entity using the supplied <see cref="T:FlyweightObjects.IQueryExpression`1"/>.
            </summary>
            <typeparam name="T">The type parameter of the object to update.</typeparam>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to delete the object.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Deletes all instances contained within source from storage.
            </summary>
            <typeparam name="T">The type parameter of the objects to delete.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Persist``1(FlyweightObjects.FlyweightSet{``0})">
            <summary>
            Performs all necessary operations on the supplied <see cref="T:FlyweightObjects.IFlyweightSet`1"/> object. Note that all objects which
            have been removed from the <see cref="T:FlyweightObjects.IFlyweightSet`1"/> will be deleted, while the others will either be inserted
            or deleted based upon their status in storage.
            </summary>
            <typeparam name="T">The type parameter of the changed objects to persist.</typeparam>
            <param name="source">An instance of an <see cref="T:FlyweightObjects.FlyweightSet`1"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceContextBase.Reload``1(``0)">
            <summary>
            Reloads the source object based upon its identifiers as specified by its <see cref="T:FlyweightObjects.DataColumnAttribute"/> Identifer properties.
            </summary>
            <typeparam name="T">The type parameter of the objects to reload.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="P:FlyweightObjects.ServiceContextBase.DomainName">
            <summary>
            Gets or sets the unique name of the domain which identifies the context with specific object types. Parity must exist between
            the value of this property and objects with a <see cref="T:FlyweightObjects.DataTableAttribute"/>.DomainName in order for deferred loading to work correctly
            acrosss multiple domains.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ServiceContextBase.DefaultLogicType">
            <summary>
            Gets the default business logic type for the domain.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ServiceContextBase.CompressPayloads">
            <summary>
            Gets or sets a boolean value indicating whether message payloads should be compressed.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ServiceContextBase.EncryptPayloads">
            <summary>
            Gets or sets a boolean value indicating whether message payloads should be encrypted.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ServiceContextBase.EncryptionKey">
            <summary>
            Gets or sets the optional 24 byte user defined <see cref="P:System.Security.Cryptography.TripleDES.Key"/> to be used when <see cref="P:FlyweightObjects.ServiceContextBase.EncryptPayloads"/> is set to true.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ServiceContextBase.CurrentPrincipal">
            <summary>
            Gets the <see cref="T:FlyweightObjects.ISecurityPrincipal"/> for the current operation.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ServiceContextBase.Context">
            <summary>
            Gets the <see cref="T:FlyweightObjects.IDataContext"/> for the domain.
            </summary>
        </member>
        <member name="M:FlyweightObjects.HttpServiceContext.#ctor(System.String,FlyweightObjects.StorageProviderType)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString">The connection string to the storage.</param>
            <param name="providerType">The type of storage.</param>
        </member>
        <member name="M:FlyweightObjects.HttpServiceContext.#ctor(System.String,FlyweightObjects.StorageProviderType,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString">The connection string to the storage.</param>
            <param name="providerType">The type of storage.</param>
            <param name="compressPayloads">Determines whether the message payloads should be compressed.</param>
            <param name="encryptPayloads">Determines whether the message payloads should be encrypted.</param>
        </member>
        <member name="M:FlyweightObjects.HttpServiceContext.#ctor(System.String,FlyweightObjects.StorageProviderType,System.Boolean,System.Byte[])">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString">The connection string to the storage.</param>
            <param name="providerType">The type of storage.</param>
            <param name="compressPayloads">Determines whether the message payloads should be compressed.</param>
            <param name="key">A valid 24 byte <see cref="P:System.Security.Cryptography.TripleDES.Key"/> value to be used when encrypting and decrypting payloads.</param>
        </member>
        <member name="M:FlyweightObjects.HttpServiceContext.#ctor(System.Type)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="defaultBusinessLogicType">The default <see cref="T:FlyweightObjects.BusinessLogicBase`1"/> implementation for the domain.</param>
        </member>
        <member name="M:FlyweightObjects.HttpServiceContext.#ctor(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="defaultBusinessLogicType">The default <see cref="T:FlyweightObjects.BusinessLogicBase`1"/> implementation for the domain.</param>
            <param name="compressPayloads">Determines whether the message payloads should be compressed.</param>
            <param name="encryptPayloads">Determines whether the message payloads should be encrypted.</param>
        </member>
        <member name="T:FlyweightObjects.IRuntimeMethodQuery`1">
            <summary>
            Represents an <see cref="T:FlyweightObjects.IQueryExpression`1"/> definition which is constructed at runtime.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IRuntimeMethodQuery`1.MethodQueue">
            <summary>
            Gets a generic Queue of <see cref="T:FlyweightObjects.RuntimeMethod"/> representing the methods called to construct a query.
            </summary>
        </member>
        <member name="P:FlyweightObjects.IRuntimeMethodQuery`1.Command">
            <summary>
            Gets or sets the <see cref="T:FlyweightObjects.IStorageCommand"/> runtime interpretation.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ConcurrencyViolationMode">
            <summary>
            Instructs an <see cref="T:FlyweightObjects.DataContext"/> how to handle concurrency violations.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ConcurrencyViolationMode.IgnoreConflict">
            <summary>
            Overwrite any conflicts.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ConcurrencyViolationMode.FailOnConflict">
            <summary>
            Throw an exception when a conflict is found.
            </summary>
        </member>
        <member name="T:FlyweightObjects.InvalidPropertyNameException">
            <summary>
            Represents an invalid property name specification when attempting to get or set property values from <see cref="T:FlyweightObjects.PropertyStorage"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.InvalidPropertyNameException.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.InvalidPropertyNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the class specifically for deserialization purposes.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance for the deserialization.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> for the deserialization.</param>
        </member>
        <member name="P:FlyweightObjects.InvalidPropertyNameException.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="T:FlyweightObjects.PreloadDepth">
            <summary>
            Represents a depth determining how deeply objects should be retrieved from their graph when a single call is made.
            </summary>
        </member>
        <member name="F:FlyweightObjects.PreloadDepth.FlatObject">
            <summary>
            A flat object and no degree of relative separation from itself exposed by its graph.
            </summary>
        </member>
        <member name="F:FlyweightObjects.PreloadDepth.FirstRelatives">
            <summary>
            A flat object plus one degree of relative separation from itself exposed by its graph.
            </summary>
        </member>
        <member name="F:FlyweightObjects.PreloadDepth.SecondRelatives">
            <summary>
            A flat object plus two degrees of relative separation from itself exposed by its graph.
            </summary>
        </member>
        <member name="F:FlyweightObjects.PreloadDepth.ThirdRelatives">
            <summary>
            A flat object plus three degrees of relative separation from iself exposed by its graph.
            </summary>
        </member>
        <member name="F:FlyweightObjects.PreloadDepth.FourthRelatives">
            <summary>
            A flat object plus four degrees of relative separation from iself exposed by its graph.
            </summary>
        </member>
        <member name="F:FlyweightObjects.PreloadDepth.FifthRelatives">
            <summary>
            A flat object plus five degrees of relative separation from iself exposed by its graph.
            </summary>
        </member>
        <member name="T:FlyweightObjects.IValidator`1">
            <summary>
            Represents an interface responsible for validating a domain object prior to it being persisted or deleted.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
        </member>
        <member name="M:FlyweightObjects.IValidator`1.CanInsert(`0)">
            <summary>
            Returns a boolean value indicating whether the domain object can be inserted.
            </summary>
            <param name="source">The object to validate.</param>
        </member>
        <member name="M:FlyweightObjects.IValidator`1.CanUpdate(`0)">
            <summary>
            Returns a boolean value indicating whether the domain object can be updated.
            </summary>
            <param name="source">The object to validate.</param>
        </member>
        <member name="M:FlyweightObjects.IValidator`1.CanDelete(`0)">
            <summary>
            Returns a boolean value indicating whether the domain object can be updated.
            </summary>
            <param name="source">The object to deleted.</param>
        </member>
        <member name="T:FlyweightObjects.StatusCode">
            <summary>
            Represents the status code of a <see cref="T:FlyweightObjects.IResponseMessage"/>.
            </summary>
        </member>
        <member name="F:FlyweightObjects.StatusCode.Unassigned">
            <summary>
            No status has been assigned.
            </summary>
        </member>
        <member name="F:FlyweightObjects.StatusCode.Success">
            <summary>
            The operation was successful.
            </summary>
        </member>
        <member name="F:FlyweightObjects.StatusCode.Failure">
            <summary>
            The operation failed.
            </summary>
        </member>
        <member name="F:FlyweightObjects.StatusCode.Warning">
            <summary>
            A warning regarding the current operation.
            </summary>
        </member>
        <member name="T:FlyweightObjects.MsJetQueryBuilder`1">
            <summary>
            Represents a query builder to build Microsoft Jet specific queries.
            </summary>
        </member>
        <member name="M:FlyweightObjects.MsJetQueryBuilder`1.#ctor(FlyweightObjects.IStorageProvider)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="provider">The associated <see cref="T:FlyweightObjects.IStorageProvider"/>.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetQueryBuilder`1.GetFunctionName(FlyweightObjects.FunctionType)">
            <summary>
            Gets a proper function name by <see cref="T:FlyweightObjects.FunctionType"/>.
            </summary>
            <param name="functionType">The type of supported function.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetQueryBuilder`1.Select(System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetQueryBuilder`1.Select(System.Boolean,System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="distinct">Determines whether a distinct set should be returned.</param>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetQueryBuilder`1.Join``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the INNER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetQueryBuilder`1.LeftJoin``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the Left Outer keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetQueryBuilder`1.RightJoin``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the RIGHT OUTER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetQueryBuilder`1.FullJoin``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the FULL OUTER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetQueryBuilder`1.CrossJoin``1">
            <summary>
            Represents the CROSS JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
        </member>
        <member name="M:FlyweightObjects.MsJetQueryBuilder`1.Union">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:FlyweightObjects.MsJetQueryBuilder`1.UnionAll">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:FlyweightObjects.MsJetQueryBuilder`1.ToCommand">
            <summary>
            Returns an instance of an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.MsJetQueryBuilder`1.ParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="T:FlyweightObjects.MsJetStorageProvider">
            <summary>
            Represents the storage provider which interacts directly with a Microsoft Jet database.
            </summary>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString">The connection string used to communicate with the storage.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.GetParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.BuildStorageCommand``1(FlyweightObjects.IRuntimeMethodQuery{``0})">
            <summary>
            Converts an <see cref="T:FlyweightObjects.IRuntimeMethodQuery`1"/> into an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
            <typeparam name="T">The target type of the query.</typeparam>
            <param name="query">The query to convert.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.ProcessSelect``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a select statement against the storage.
            </summary>
            <typeparam name="T">The type from which to select.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.ProcessInsert``1(``0)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The instance of T to insert.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.ProcessInsert``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.ProcessInsert``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched insert statments against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The collection of T to insert.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.ProcessUpdate``1(``0)">
            <summary>
             Executes an update statement against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="source">The instance of T to update.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.ProcessUpdate``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an update statement against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.ProcessUpdate``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched update statments against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="source">The collection of T to update.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.ProcessDelete``1(``0)">
            <summary>
            Executes a delete statement against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">The instance of T to delete.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.ProcessDelete``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a delete statement against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.ProcessDelete``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched delete statments against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">The collection of T to delete.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.ProcessExists``1(``0)">
            <summary>
            Returns a boolean indicating whether source exists.
            </summary>
            <typeparam name="T">The type to search.</typeparam>
            <param name="source">The instance of T for which to search.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.ProcessReload``1(``0)">
            <summary>
            Returns source after being refreshed from the storage.
            </summary>
            <typeparam name="T">The type to reload.</typeparam>
            <param name="source">An instance of T to reload.</param>
        </member>
        <member name="M:FlyweightObjects.MsJetStorageProvider.ProcessTruncate``1">
            <summary>
            Truncates a target entity located in storage.
            </summary>
            <typeparam name="T">The type abstracting the table to truncate.</typeparam>
        </member>
        <member name="P:FlyweightObjects.MsJetStorageProvider.ParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="T:FlyweightObjects.SqlServerQueryBuilder`1">
            <summary>
            Represents a query builder to build Microsoft Sql Server specific queries.
            </summary>
        </member>
        <member name="M:FlyweightObjects.SqlServerQueryBuilder`1.#ctor(FlyweightObjects.IStorageProvider)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="provider">The associated <see cref="T:FlyweightObjects.IStorageProvider"/>.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerQueryBuilder`1.GetFunctionName(FlyweightObjects.FunctionType)">
            <summary>
            Gets a proper function name by <see cref="T:FlyweightObjects.FunctionType"/>.
            </summary>
            <param name="functionType">The type of supported function.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerQueryBuilder`1.Select(System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerQueryBuilder`1.Select(System.Boolean,System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="distinct">Determines whether a distinct set should be returned.</param>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerQueryBuilder`1.ToCommand">
            <summary>
            Returns an instance of an <see cref="T:FlyweightObjects.IStorageCommand"/> IExecutableSql object.
            </summary>
        </member>
        <member name="P:FlyweightObjects.SqlServerQueryBuilder`1.ParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="T:FlyweightObjects.SqlServerStorageProvider">
            <summary>
            Represents the storage provider which interacts directly with a Microsoft Sql Server database.
            </summary>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString">The string used to connect to the storage.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.GetParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.BuildStorageCommand``1(FlyweightObjects.IRuntimeMethodQuery{``0})">
            <summary>
            Converts an <see cref="T:FlyweightObjects.IRuntimeMethodQuery`1"/> into an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
            <typeparam name="T">The target type of the query.</typeparam>
            <param name="query">The query to convert.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.ProcessSelect``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a select statement against the storage.
            </summary>
            <typeparam name="T">The type from which to select.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.ProcessInsert``1(``0)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The instance of T to insert.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.ProcessInsert``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.ProcessInsert``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched insert statments against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The collection of T to insert.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.ProcessUpdate``1(``0)">
            <summary>
             Executes an update statement against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="source">The instance of T to update.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.ProcessUpdate``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an update statement against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.ProcessUpdate``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched update statments against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="source">The collection of T to update.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.ProcessDelete``1(``0)">
            <summary>
            Executes a delete statement against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">The instance of T to delete.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.ProcessDelete``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a delete statement against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.ProcessDelete``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched delete statments against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">The collection of T to delete.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.ProcessExists``1(``0)">
            <summary>
            Returns a boolean indicating whether source exists.
            </summary>
            <typeparam name="T">The type to search.</typeparam>
            <param name="source">The instance of T for which to search.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.ProcessReload``1(``0)">
            <summary>
            Returns source after being refreshed from the storage.
            </summary>
            <typeparam name="T">The type to reload.</typeparam>
            <param name="source">An instance of T to reload.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.BuildInsertCommand``1(``0)">
            <summary>
            Returns an <see cref="T:FlyweightObjects.StorageCommand"/> representing an insert command based upon the contents of soucre.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.SqlServerStorageProvider.ProcessTruncate``1">
            <summary>
            Truncates a target entity located in storage.
            </summary>
            <typeparam name="T">The type abstracting the table to truncate.</typeparam>
        </member>
        <member name="P:FlyweightObjects.SqlServerStorageProvider.ParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="T:FlyweightObjects.MySqlQueryBuilder`1">
            <summary>
            Represents a query builder to build MySQL specific queries.
            </summary>
        </member>
        <member name="M:FlyweightObjects.MySqlQueryBuilder`1.#ctor(FlyweightObjects.IStorageProvider)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="provider">The associated <see cref="T:FlyweightObjects.IStorageProvider"/>.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlQueryBuilder`1.Select(System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlQueryBuilder`1.Select(System.Boolean,System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="distinct">Determines whether a distinct set should be returned.</param>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlQueryBuilder`1.Delete">
            <summary>
            Represents the DELETE keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.MySqlQueryBuilder`1.ToCommand">
            <summary>
            Returns an instance of an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.MySqlQueryBuilder`1.ParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="T:FlyweightObjects.MySqlStorageProvider">
            <summary>
            Represents the storage provider which interacts directly with a MySQL database.
            </summary>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="cnnString">The string used to connect to the storage.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.GetParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.BuildStorageCommand``1(FlyweightObjects.IRuntimeMethodQuery{``0})">
            <summary>
            Converts an <see cref="T:FlyweightObjects.IQueryExpression`1"/> into an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
            <typeparam name="T">The target type of the query.</typeparam>
            <param name="query">The query to convert.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.ProcessSelect``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a select statement against the storage.
            </summary>
            <typeparam name="T">The type from which to select.</typeparam>
            <param name="comand">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.ProcessInsert``1(``0)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The instance of T to insert.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.ProcessInsert``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.ProcessInsert``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched insert statments against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The collection of T to insert.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.ProcessUpdate``1(``0)">
            <summary>
             Executes an update statement against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="source">The instance of T to update.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.ProcessUpdate``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an update statement against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.ProcessUpdate``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched update statments against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="source">The collection of T to update.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.ProcessDelete``1(``0)">
            <summary>
            Executes a delete statement against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">The instance of T to delete.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.ProcessDelete``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a delete statement against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.ProcessDelete``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched delete statments against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">The collection of T to delete.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.ProcessExists``1(``0)">
            <summary>
            Returns a boolean indicating whether source exists.
            </summary>
            <typeparam name="T">The type to search.</typeparam>
            <param name="source">The instance of T for which to search.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.ProcessReload``1(``0)">
            <summary>
            Returns source after being refreshed from the storage.
            </summary>
            <typeparam name="T">The type to reload.</typeparam>
            <param name="source">An instance of T to reload.</param>
        </member>
        <member name="M:FlyweightObjects.MySqlStorageProvider.ProcessTruncate``1">
            <summary>
            Truncates a target entity located in storage.
            </summary>
            <typeparam name="T">The type abstracting the table to truncate.</typeparam>
        </member>
        <member name="P:FlyweightObjects.MySqlStorageProvider.ParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ObjectCloner">
            <summary>
            Provides cloning functionality for serializable objects and lists.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ObjectCloner.Clone``1(``0)">
            <summary>
            Returns a separate deep clone of an object.
            </summary>
            <typeparam name="T">The type of the object to return.</typeparam>
            <param name="source">The object to clone.</param>
        </member>
        <member name="M:FlyweightObjects.ObjectCloner.Clone(System.Object)">
            <summary>
            Returns a separate deep clone of an object.
            </summary>
            <param name="source">The object to clone.</param>
        </member>
        <member name="M:FlyweightObjects.ObjectCloner.Serialize``1(``0)">
            <summary>
            Serializes a generic object and returns a new instance.
            </summary>
            <typeparam name="T">The generic type to serialize.</typeparam>
            <param name="source">The instance object to serialize.</param>
        </member>
        <member name="M:FlyweightObjects.ObjectCloner.Serialize(System.Object)">
            <summary>
            Serializes an object and returns a new instance.
            </summary>
            <param name="source">The instance object to serialize.</param>
        </member>
        <member name="T:FlyweightObjects.IDataRelationContainer">
            <summary>
            Represents the non-generic properties internally exposed by a <see cref="T:FlyweightObjects.DataRelationContainer`1"/>.
            </summary>
        </member>
        <member name="T:FlyweightObjects.DataRelationContainer`1">
             <summary>
             Represents a surrogate object responsible for retrieving related objects on a domain model using load on demand.
             </summary>
             <typeparam name="T">The type of object to retrieve.</typeparam>
             <example>
             The following code examples demonstrate a manually created MyProduct class from the Microsoft AdventureWorks SQL Server sample database. 
             The first shows the definition of the MyProduct class, including a DataRelationContainer&lt;T&gt; instance which abstracts an IFlyweightSet&lt;BillOfMaterial&gt;.
             The second shows how to use deferred loading of each retrieved MyProduct in order to display the count of BillOfMaterial related objects. 
             <code>
             <![CDATA[
             [Serializable]
             [EditorBrowsable(EditorBrowsableState.Always)]
             [DataTable("Production.Product", MemberBindingType = MemberBindingType.Fields, EnableCaching = false, CacheTimeout = 0)]
             [DebuggerDisplay("{ToString()}")]
             public partial class MyProduct
             {
                 FlyweightStorage Storage = new FlyweightStorage(typeof(MyProduct));
            
                 FlyweightStorage IFlyweight.Storage
                 {
                     get { return this.Storage; }
                     set { this.Storage = value; }
                 }    
                 
                 [DataRelation(AllowPreload = true)]
                 public FlyweightSet<BillOfMaterial> BillOfMaterials
                 {
                     get { return this.Storage.GetDataRelation<BillOfMaterial>().GetProperty(BillOfMaterial.Properties.ProductAssemblyID == this.ProductID).ToFlyweightSet(); }
                     set { this.Storage.GetDataRelation<BillOfMaterial>().SetProperty(value); }
                 }
            
                 [DataColumn("ProductID", FieldType = DbType.Int32, AllowDBNull = false, Identifier = true, AutoIncrement = true)]
                 public virtual int ProductID
                 {
                     get { return this.Storage.GetProperty<int>(Properties.ProductID.ToString()); }
                     set { this.Storage.SetProperty<int>(Properties.ProductID.ToString()); }
                 }
            
                 [DataColumn("Name", FieldType = DbType.AnsiString, AllowDBNull = false)]
                 public virtual string Name
                 {
                     get { return this.Storage.GetProperty<string>(Properties.Name.ToString()); }
                     set { this.Storage.SetProperty<string>(Properties.Name.ToString()); }
                 }
            
                 public static class Properties
                 {
                     public static PropertyExpression<Product> ProductID { get { return new PropertyExpression<Product>("ProductID"); } }
                     public static PropertyExpression<Product> Name { get { return new PropertyExpression<Product>("Name"); } }
                 }
             }
             ]]>
             </code>
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 var qe = new QueryExpression<MyProduct>()
            
                 .Select(true, 0)
                 .From<MyProduct>()
                 .LeftJoin<BillOfMaterial>(MyProduct.Properties.ProductID == BillOfMaterial.Properties.ProductAssemblyID)
                 .Where(BillOfMaterial.Properties.PerAssemblyQty > 0)
                 .OrderBy(MyProduct.Properties.ProductID);
            
                 context.LoadOnDemand = true;
                 foreach (MyProduct product in context.Select<MyProduct>(qe))
                 {
                     Console.WriteLine("Product Id {0} BOM Count: {1}", product.ProductID, product.BillOfMaterials.Count);
                 }
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.DataRelationContainer`1.GetProperty(FlyweightObjects.IQueryExpression{`0})">
            <summary>
            Retrieves the related objects.
            </summary>
            <param name="query">The <see cref="T:FlyweightObjects.IQueryExpression`1"/> used to retrieve the objects.</param>
        </member>
        <member name="M:FlyweightObjects.DataRelationContainer`1.GetProperty(FlyweightObjects.IStorageCommand)">
            <summary>
            Retrieves the related objects.
            </summary>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to perform the query.</param>
        </member>
        <member name="M:FlyweightObjects.DataRelationContainer`1.GetProperty(FlyweightObjects.PropertyExpression{`0})">
            <summary>
            Retrieves the related objects.
            </summary>
            <param name="whereExpression">The <see cref="T:FlyweightObjects.PropertyExpression`1"/> used to filter the objects to be retrieved.</param>
        </member>
        <member name="M:FlyweightObjects.DataRelationContainer`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retrieves the related objects.
            </summary>
            <param name="whereExpression">An <see cref="T:System.Linq.Expressions.Expression"/> used to filter the objects to be retrieved.</param>
        </member>
        <member name="M:FlyweightObjects.DataRelationContainer`1.SetProperty(`0)">
            <summary>
            Sets the related objects.
            </summary>
            <param name="source">An instance of T.</param>
        </member>
        <member name="M:FlyweightObjects.DataRelationContainer`1.SetProperty(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the related objects.
            </summary>
            <param name="source">An instance of T.</param>
        </member>
        <member name="P:FlyweightObjects.DataRelationContainer`1.IsLoaded">
            <summary>
            Gets or sets a boolean value indicating whether the contained object has been loaded.
            </summary>
        </member>
        <member name="P:FlyweightObjects.DataRelationContainer`1.LoadOnDemand">
            <summary>
            Gets or sets a boolean value indicating whether the object should be dynamically loaded when the property is accessed.
            </summary>
        </member>
        <member name="T:FlyweightObjects.TraceHelper">
            <summary>
            Represents a helper class to assist in tracing.
            </summary>
        </member>
        <member name="M:FlyweightObjects.TraceHelper.WriteLine(System.Reflection.MethodBase)">
            <summary>
            Writes a message to the trace listeners in the Listeners collection.
            </summary>
            <param name="method">The method to be traced.</param>
        </member>
        <member name="M:FlyweightObjects.TraceHelper.WriteLine(System.Reflection.MethodBase,System.String)">
            <summary>
            Writes a message to the trace listeners in the Listeners collection.
            </summary>
            <param name="method">The method to be traced.</param>
            <param name="message">The message to write.</param>
        </member>
        <member name="P:FlyweightObjects.TraceHelper.Enabled">
            <summary>
            Gets or sets a boolean value to enable or disable the <see cref="T:FlyweightObjects.TraceHelper"/>.
            </summary>
        </member>
        <member name="T:FlyweightObjects.TypeConverter">
            <summary>
            Represents a class responsible for converting one type to another.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ValidatorBase`1">
            <summary>
            Represents a base class responsible to validating a domain object.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
        </member>
        <member name="M:FlyweightObjects.ValidatorBase`1.#ctor">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ValidatorBase`1.#ctor(FlyweightObjects.IDataContext)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="context">An instance of an <see cref="T:FlyweightObjects.IDataContext"/> used to perform additional queries.</param>
        </member>
        <member name="M:FlyweightObjects.ValidatorBase`1.CanInsert(`0)">
            <summary>
            Returns whether the domain object can be inserted.
            </summary>
            <param name="source">The object to validate.</param>
        </member>
        <member name="M:FlyweightObjects.ValidatorBase`1.CanUpdate(`0)">
            <summary>
            Returns whether the domain object can be updated.
            </summary>
            <param name="source">The object to validate.</param>
        </member>
        <member name="M:FlyweightObjects.ValidatorBase`1.CanDelete(`0)">
            <summary>
            Returns whether the domain object can be delted.
            </summary>
            <param name="source">The object to validate.</param>
        </member>
        <member name="M:FlyweightObjects.ValidatorBase`1.CanInsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns whether the list of domain objects can be inserted.
            </summary>
            <param name="source">A list of domain objects to be validated.</param>
        </member>
        <member name="M:FlyweightObjects.ValidatorBase`1.CanUpdate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns whether the list of domain objects can be updated.
            </summary>
            <param name="source">A list of domain objects to be validated.</param>
        </member>
        <member name="M:FlyweightObjects.ValidatorBase`1.CanDelete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns whether the list of domain objects can be deleted.
            </summary>
            <param name="source">A list of domain objects to be validated.</param>
        </member>
        <member name="P:FlyweightObjects.ValidatorBase`1.Context">
            <summary>
            Gets an instance of an <see cref="T:FlyweightObjects.IDataContext"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ValidatorBase`1.Message">
            <summary>
            Gets or sets the message associated with the validation operation.
            </summary>
        </member>
        <member name="T:FlyweightObjects.OracleDatabaseManager">
            <summary>
            Represents a <see cref="T:FlyweightObjects.DatabaseManager"/> for Oracle specific storage operations.
            </summary>
        </member>
        <member name="M:FlyweightObjects.OracleDatabaseManager.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:FlyweightObjects.OracleDatabaseManager.CreateCommand(FlyweightObjects.IStorageCommand)">
            <summary>
            Returns a new instance of an <see cref="T:System.Data.IDbCommand"/> object.
            </summary>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> used to create the command.</param>
        </member>
        <member name="T:FlyweightObjects.OracleQueryBuilder`1">
            <summary>
            Represents a query builder to build Oracle specific queries.
            </summary>
        </member>
        <member name="M:FlyweightObjects.OracleQueryBuilder`1.#ctor(FlyweightObjects.IStorageProvider)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="provider">The associated <see cref="T:FlyweightObjects.IStorageProvider"/>.</param>
        </member>
        <member name="M:FlyweightObjects.OracleQueryBuilder`1.Select(FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.OracleQueryBuilder`1.Select(System.Boolean,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="distinct">Determines whether a distinct set should be returned.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.OracleQueryBuilder`1.Select(System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.OracleQueryBuilder`1.Select(System.Boolean,System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="distinct">Determines whether a distinct set should be returned.</param>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.OracleQueryBuilder`1.Insert(FlyweightObjects.PropertyExpression{`0}[])">
            <summary>
            Represents the INSERT INTO keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to be inserted.</param>
        </member>
        <member name="M:FlyweightObjects.OracleQueryBuilder`1.Set(FlyweightObjects.PropertyExpression{`0}[])">
            <summary>
            Represents the SET keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of generic <see cref="T:FlyweightObjects.PropertyExpression"/> members whose values should be set.</param>
        </member>
        <member name="M:FlyweightObjects.OracleQueryBuilder`1.ToCommand">
            <summary>
            Returns an instance of an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.OracleQueryBuilder`1.ParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="T:FlyweightObjects.OracleStorageProvider">
            <summary>
            Represents the storage provider which interacts directly with an Oracle database.
            </summary>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString">The string used to connect to the storage.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.GetParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.BuildStorageCommand``1(FlyweightObjects.IRuntimeMethodQuery{``0})">
            <summary>
            Converts an <see cref="T:FlyweightObjects.IQueryExpression`1"/> into an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
            <typeparam name="T">The target type of the query.</typeparam>
            <param name="query">The query to convert.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.ProcessSelect``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a select statement against the storage.
            </summary>
            <typeparam name="T">The type from which to select.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.ProcessInsert``1(``0)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The instance of T to insert.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.BuildInsertCommand``1(``0)">
            <summary>
            Returns an <see cref="T:FlyweightObjects.StorageCommand"/> representing an insert command.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="obj">An instance of T to insert.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.IsValidForInsert``1(``0,FlyweightObjects.DataColumnAttribute)">
            <summary>
            Returns a boolean value indicating whether the member value can be inserted.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="obj">An instance of T.</param>
            <param name="dataColumn">The <see cref="T:FlyweightObjects.DataColumnAttribute"/> representing the member.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.ProcessInsert``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.ProcessInsert``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes an insert statement against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The instance of T to insert.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.ProcessUpdate``1(``0)">
            <summary>
             Executes an update statement against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="source">The instance of T to update.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.ProcessUpdate``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes an update statement against the storage.
            </summary>
            <typeparam name="T">The type to update.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.ProcessUpdate``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched insert statments against the storage.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="source">The collection of T to insert.</param>
            <param name="batchSize">The size of each batch.</param>
            <remarks>
            This method is not supported.
            </remarks>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.ProcessDelete``1(``0)">
            <summary>
            Executes a delete statement against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">The instance of T to delete.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.ProcessDelete``1(FlyweightObjects.IStorageCommand)">
            <summary>
            Executes a delete statement against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> representing the command.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.ProcessDelete``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Executes a series of batched delete statments against the storage.
            </summary>
            <typeparam name="T">The type to delete.</typeparam>
            <param name="source">The collection of T to delete.</param>
            <param name="batchSize">The size of each batch.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.ProcessExists``1(``0)">
            <summary>
            Returns a boolean indicating whether source exists.
            </summary>
            <typeparam name="T">The type to search.</typeparam>
            <param name="source">The instance of T for which to search.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.ProcessReload``1(``0)">
            <summary>
            Returns source after being refreshed from the storage.
            </summary>
            <typeparam name="T">The type to reload.</typeparam>
            <param name="source">An instance of T to reload.</param>
        </member>
        <member name="M:FlyweightObjects.OracleStorageProvider.ProcessTruncate``1">
            <summary>
            Truncates a target entity located in storage.
            </summary>
            <typeparam name="T">The type abstracting the table to truncate.</typeparam>
        </member>
        <member name="P:FlyweightObjects.OracleStorageProvider.ParameterPrefix">
            <summary>
            Gets the prefix characters to prepend to a parameter.
            </summary>
        </member>
        <member name="T:FlyweightObjects.Parameter">
            <summary>
            Represents an abstract common parameter.
            </summary>
        </member>
        <member name="M:FlyweightObjects.Parameter.#ctor">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.Parameter.#ctor(System.String,System.Object)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:FlyweightObjects.Parameter.#ctor(System.String,System.Object,System.Data.ParameterDirection,System.Data.DbType,System.Int32)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="direction">The <see cref="T:System.Data.ParameterDirection"/> of the parameter.</param>
            <param name="dbType">The <see cref="T:System.Data.DbType"/> of the parameter.</param>
            <param name="size">The size of the parameter.</param>
        </member>
        <member name="M:FlyweightObjects.Parameter.#ctor(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="direction">The <see cref="T:System.Data.ParameterDirection"/> of the parameter.</param>
        </member>
        <member name="M:FlyweightObjects.Parameter.#ctor(System.String,System.Object,System.Data.ParameterDirection,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="direction">The <see cref="T:System.Data.ParameterDirection"/> of the parameter.</param>
            <param name="isResultSet">Indicates whether the parameter represents a result set.</param>
        </member>
        <member name="M:FlyweightObjects.Parameter.#ctor(System.String,System.Object,System.Data.DbType)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="dbType">The <see cref="T:System.Data.DbType"/> of the parameter.</param>
        </member>
        <member name="M:FlyweightObjects.Parameter.#ctor(System.Object,System.Data.ParameterDirection,System.Data.DbType)">
            <summary>
             Constructs a new instance of the class.
            </summary>
            <param name="value">The value of the parameter.</param>
            <param name="direction">The <see cref="T:System.Data.ParameterDirection"/> of the parameter.</param>
            <param name="dbType">The <see cref="T:System.Data.DbType"/> of the parameter.</param>
        </member>
        <member name="M:FlyweightObjects.Parameter.#ctor(System.String,System.Object,System.Data.ParameterDirection,System.Data.DbType)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="direction">The <see cref="T:System.Data.ParameterDirection"/> of the parameter.</param>
            <param name="dbType">The <see cref="T:System.Data.DbType"/> of the parameter.</param>
        </member>
        <member name="M:FlyweightObjects.Parameter.#ctor(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="dbType">The <see cref="T:System.Data.DbType"/> of the parameter.</param>
            <param name="size">The size of the parameter.</param>
        </member>
        <member name="M:FlyweightObjects.Parameter.#ctor(System.String,System.Data.DbType,System.Int32)">
            <summary>
             Constructs a new instance of the class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="dbType">The <see cref="T:System.Data.DbType"/> of the parameter.</param>
            <param name="size">The size of the parameter.</param>
        </member>
        <member name="P:FlyweightObjects.Parameter.Name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
        </member>
        <member name="P:FlyweightObjects.Parameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="P:FlyweightObjects.Parameter.Direction">
            <summary>
            Gets or sets the <see cref="T:System.Data.ParameterDirection"/> of the parameter.
            </summary>
        </member>
        <member name="P:FlyweightObjects.Parameter.Type">
            <summary>
            Gets or sets the <see cref="T:System.Data.DbType"/> of the parameter.
            </summary>
        </member>
        <member name="P:FlyweightObjects.Parameter.Size">
            <summary>
            Gets or sets the size of the parameter.
            </summary>
        </member>
        <member name="P:FlyweightObjects.Parameter.SourceColumnName">
            <summary>
            Gets or sets the name of the source column for the parameter.
            </summary>
        </member>
        <member name="P:FlyweightObjects.Parameter.DataColumnAttribute">
            <summary>
            Gets or sets the name of the <see cref="P:FlyweightObjects.Parameter.DataColumnAttribute"/> for the parameter.
            </summary>
        </member>
        <member name="P:FlyweightObjects.Parameter.IsResultSet">
            <summary>
            Gets or sets whether the <see cref="T:FlyweightObjects.Parameter"/> represents a result set.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ParameterCollection">
            <summary>
            Represents a collection of <see cref="T:FlyweightObjects.Parameter"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.Add(FlyweightObjects.Parameter)">
            <summary>
            Adds the specified <see cref="T:FlyweightObjects.Parameter"/> to the collection.
            </summary>
            <param name="parameter">An instance of <see cref="T:FlyweightObjects.Parameter"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.AddRange(FlyweightObjects.Parameter[])">
            <summary>
            Adds the array of <see cref="T:FlyweightObjects.Parameter"/> to the collection.
            </summary>
            <param name="values">An array of <see cref="T:FlyweightObjects.Parameter"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.AddRange(FlyweightObjects.ParameterCollection)">
            <summary>
            Adds the array of <see cref="T:FlyweightObjects.Parameter"/> to the collection.
            </summary>
            <param name="collection">A <see cref="T:FlyweightObjects.ParameterCollection"/> of <see cref="T:FlyweightObjects.Parameter"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.Contains(FlyweightObjects.Parameter)">
            <summary>
            Determines whether the colelction contains the specified <see cref="T:FlyweightObjects.Parameter"/>.
            </summary>
            <param name="value">An instance of <see cref="T:FlyweightObjects.Parameter"/>.</param>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.CopyTo(FlyweightObjects.Parameter[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">The array to be copied to.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.IndexOf(FlyweightObjects.Parameter)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="value">The <see cref="T:FlyweightObjects.Parameter"/> to search.</param>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.Insert(System.Int32,FlyweightObjects.Parameter)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The index to insert.</param>
            <param name="value">The <see cref="T:FlyweightObjects.Parameter"/> to insert.</param>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.Remove(FlyweightObjects.Parameter)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="value">The <see cref="T:FlyweightObjects.Parameter"/> to remove.</param>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.Sort">
            <summary>
            Sorts the collection.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the collection give the comparer.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="P:FlyweightObjects.ParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:FlyweightObjects.Parameter"/> at the specified integer index.
            </summary>
            <param name="index">The zero-based index by which to retrieve the <see cref="T:FlyweightObjects.Parameter"/>.</param>
        </member>
        <member name="P:FlyweightObjects.ParameterCollection.Item(System.String)">
            <summary>
             Gets or sets the <see cref="T:FlyweightObjects.Parameter"/> at the specified string index.
            </summary>
            <param name="index">The index by which to retrieve the <see cref="T:FlyweightObjects.Parameter"/>.</param>
        </member>
        <member name="T:FlyweightObjects.ParameterCollection.ParameterEnumerator">
            <summary>
            Represents an enumerator for a <see cref="T:FlyweightObjects.ParameterCollection"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.ParameterEnumerator.#ctor(FlyweightObjects.ParameterCollection)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="mappings">An instance of a <see cref="T:FlyweightObjects.ParameterCollection"/></param>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.ParameterEnumerator.MoveNext">
            <summary>
            Moves the enumerator to the next object.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.ParameterEnumerator.System#Collections#IEnumerator#MoveNext">
            <summary>
            Moves the enumerator to the next object.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.ParameterEnumerator.Reset">
            <summary>
            Resets the base enumerator.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ParameterCollection.ParameterEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Resets the base enumerator.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ParameterCollection.ParameterEnumerator.Current">
            <summary>
            Returns the current <see cref="T:FlyweightObjects.Parameter"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ParameterCollection.ParameterEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the base enumerator's current object. 
            </summary>
        </member>
        <member name="T:FlyweightObjects.Column`1">
            <summary>
            Represents a column of an object constrained to a type which can be used in creating <see cref="T:FlyweightObjects.QueryExpression`1"/> queries.
            </summary>
            <typeparam name="T">The parent type which exposes the property representing a column.</typeparam>
        </member>
        <member name="T:FlyweightObjects.PropertyExpression`1">
            <summary>
            Represents a property of an object constrained to a type which can be used in creating <see cref="T:FlyweightObjects.QueryExpression`1"/> queries.
            </summary>
            <typeparam name="T">The parent type which exposes the property.</typeparam>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.#ctor">
            <summary>
            Creates an instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="propertyName">The property name that is adorned with a <see cref="T:FlyweightObjects.DataColumnAttribute"/>.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="property">An expression which represents the property which is adorned with a <see cref="T:FlyweightObjects.DataColumnAttribute"/>.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Create(System.String)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Create(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="property">An <see cref="T:System.Linq.Expressions.Expression"/> representing the name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.op_Addition(FlyweightObjects.PropertyExpression{`0},System.Double)">
            <summary>
            Overrides the addition operator.
            </summary>
            <param name="expression">The expression to be added to.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.op_Subtraction(FlyweightObjects.PropertyExpression{`0},System.Double)">
            <summary>
            Overrides the substraction operator.
            </summary>
            <param name="expression">The expression from which to subtract.</param>
            <param name="value">The value to subtract.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.op_Multiply(FlyweightObjects.PropertyExpression{`0},System.Double)">
            <summary>
            Overrides the multiplication operator.
            </summary>
            <param name="expression">The expression to multiply.</param>
            <param name="value">The value to multiply.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.op_Division(FlyweightObjects.PropertyExpression{`0},System.Double)">
            <summary>
            Overrides the division operator.
            </summary>
            <param name="expression">The expression to divide.</param>
            <param name="value">The value by which to divide.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.op_Equality(FlyweightObjects.PropertyExpression{`0},System.Object)">
            <summary>
            Overrides the equal to operator.
            </summary>
            <param name="expression">The first expression in the comparison.</param>
            <param name="value">The object to be compared.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.op_Inequality(FlyweightObjects.PropertyExpression{`0},System.Object)">
            <summary>
            Overrides the not equal to operator.
            </summary>
            <param name="expression">The first expression in the comparison.</param>
            <param name="value">The object to be compared.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.op_GreaterThan(FlyweightObjects.PropertyExpression{`0},System.Object)">
            <summary>
            Overrides the greater than operator.
            </summary>
            <param name="expression">The first expression in the comparison.</param>
            <param name="value">The object to be compared.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.op_LessThan(FlyweightObjects.PropertyExpression{`0},System.Object)">
            <summary>
            Overrides the less than operator.
            </summary>
            <param name="expression">The first expression in the comparison.</param>
            <param name="value">The object to be compared.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.op_GreaterThanOrEqual(FlyweightObjects.PropertyExpression{`0},System.Object)">
            <summary>
            Overrides the greater than or equal to operator.
            </summary>
            <param name="expression">The first expression in the comparison.</param>
            <param name="value">The object to be compared.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.op_LessThanOrEqual(FlyweightObjects.PropertyExpression{`0},System.Object)">
            <summary>
            Overrides the less than or equal to operator.
            </summary>
            <param name="expression">The first expression in the comparison.</param>
            <param name="value">The object to be compared.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.op_BitwiseAnd(FlyweightObjects.PropertyExpression{`0},FlyweightObjects.PropertyExpression{`0})">
            <summary>
            Overrides the And operator.
            </summary>
            <param name="expression1">The original expression to receive the and-ing.</param>
            <param name="expression2">The additional expression to be and-ed.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.op_BitwiseOr(FlyweightObjects.PropertyExpression{`0},FlyweightObjects.PropertyExpression{`0})">
            <summary>
            Overrides the Or operator.
            </summary>
            <param name="expression1">The original expression to receive the or-ing.</param>
            <param name="expression2">The additional expression to be or-ed.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.op_True(FlyweightObjects.PropertyExpression{`0})">
            <summary>
            Overrides the true operator.
            </summary>
            <param name="expression">The expression to be true-ed.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.op_False(FlyweightObjects.PropertyExpression{`0})">
            <summary>
            Overrides the false operator.
            </summary>
            <param name="expression">The expression to be false-ed.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Add(System.Double)">
            <summary>
            Represents the addition operator.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Subtract(System.Double)">
            <summary>
            Represents the subtraction operator.
            </summary>
            <param name="value">The value to subtract.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Multiply(System.Double)">
            <summary>
            Represents the multiplication operator.
            </summary>
            <param name="value">The value to multiply.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Divide(System.Double)">
            <summary>
            Represents the division operator.
            </summary>
            <param name="value">The value by which to divide.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.EqualTo(System.Object)">
            <summary>
            Represents the equal operator.
            </summary>
            <param name="value">The value to be evaluated or the source of the set.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.NotEqualTo(System.Object)">
            <summary>
            Represents the not equal to operator.
            </summary>
            <param name="value">The value to be evaluated.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.GreaterThan(System.Object)">
            <summary>
            Represents the greater than operator.
            </summary>
            <param name="value">The value to be evaluated.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.LessThan(System.Object)">
            <summary>
            Represents the less than operator.
            </summary>
            <param name="value">The value to be evaluated.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.In(System.Object[])">
            <summary>
            Represents a Data Manipulation Language (DML) IN keyword.
            </summary>
            <param name="values">The values to search for.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.NotIn(System.Object[])">
            <summary>
            Represents a Data Manipulation Language (DML) NOT IN keywords.
            </summary>
            <param name="values">The values to search for.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.In(System.Collections.IEnumerable)">
            <summary>
            Represents a Data Manipulation Language (DML) IN keyword.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IEnumerable"/> of values.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.NotIn(System.Collections.IEnumerable)">
            <summary>
            Represents a Data Manipulation Language (DML) NOT IN keywords.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IEnumerable"/> of values.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.In(FlyweightObjects.IQueryExpression{`0})">
            <summary>
            Represents a Data Manipulation Language (DML) IN keyword.
            </summary>
            <param name="query">An <see cref="T:FlyweightObjects.IQueryExpression`1"/> serving as a subquery.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.NotIn(FlyweightObjects.IQueryExpression{`0})">
            <summary>
            Represents a Data Manipulation Language (DML) IN keyword.
            </summary>
            <param name="query">An <see cref="T:FlyweightObjects.IQueryExpression`1"/> serving as a subquery.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.In(FlyweightObjects.IStorageCommand)">
            <summary>
            Represents a Data Manipulation Language (DML) IN keyword.
            </summary>
            <param name="command">An <see cref="T:FlyweightObjects.IStorageCommand"/> serving as a subquery.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.NotIn(FlyweightObjects.IStorageCommand)">
            <summary>
            Represents a Data Manipulation Language (DML) IN keyword.
            </summary>
            <param name="command">An <see cref="T:FlyweightObjects.IStorageCommand"/> serving as a subquery.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Represents the greater than or equal to operator.
            </summary>
            <param name="value">The value to be evaluated.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.LessThanOrEqualTo(System.Object)">
            <summary>
            Represents the less than or equal to operator.
            </summary>
            <param name="value">The value to be evaluated.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Like(System.String)">
            <summary>
            Represents the Data Manipulation Language (DML) LIKE keyword.
            </summary>
            <param name="value">The value to be evaluated.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.NotLike(System.String)">
            <summary>
            Represents the Data Manipulation Language (DML) NOT LIKE keywords.
            </summary>
            <param name="value">The value to be evaluated.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Contains(System.String)">
            <summary>
            Represents the Data Manipulation Language (DML) Like operator with wildcards on both sides of value. 
            </summary>
            <param name="value">The value to search for.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.StartsWith(System.String)">
            <summary>
            Determines if the beginning of the string in storage matches the specified string.
            </summary>
            <param name="value">The value to search for.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.EndsWith(System.String)">
            <summary>
            Determines if the ending of the string in storage matches the specified string.
            </summary>
            <param name="value">The value to search for.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.NotContains(System.String)">
            <summary>
            Represents the Data Manipulation Language (DML) Not Like operator with wildcards on both sides of value. 
            </summary>
            <param name="value">The value to search for.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.IsNull">
            <summary>
            Represents the Data Manipulation Language (DML) IS NULL keywords.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.IsNotNull">
            <summary>
            Represents the Data Manipulation Language (DML) IS NOT NULL keywords.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Between(System.Object,System.Object)">
            <summary>
             Represents the Data Manipulation Language (DML) BETWEEN keyword.
            </summary>
            <param name="value1">The lowest value.</param>
            <param name="value2">The highest value.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.NotBetween(System.Object,System.Object)">
            <summary>
             Represents the Data Manipulation Language (DML) NOT BETWEEN keywords.
            </summary>
            <param name="value1">The lowest value.</param>
            <param name="value2">The highest value.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.As(System.String)">
            <summary>
            Represents the Data Manipulation Language (DML) AS keyword.
            </summary>
            <param name="alias">The alias name.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Count">
            <summary>
            Represents the Data Manipulation Language (DML) COUNT aggregate function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Count(System.Boolean)">
            <summary>
            Represents the Data Manipulation Language (DML) COUNT DISTINCT aggregate function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Avg">
            <summary>
            Represents the Data Manipulation Language (DML) AVG aggregate function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Min">
            <summary>
            Represents the Data Manipulation Language (DML) MIN aggregate function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Max">
            <summary>
            Represents the Data Manipulation Language (DML) MAX aggregate function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.ToUpper">
            <summary>
            Converts the value to upper case.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.ToLower">
            <summary>
            Converts the value to lower case.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Trim">
            <summary>
            Removes beginning and trailing white space.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.TrimStart">
            <summary>
            Removes beginning white space.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.TrimEnd">
            <summary>
            Removes trailing white space.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Substring(System.Int32)">
            <summary>
             Represents the Data Manipulation Language (DML) SUBSTR function.
            </summary>
            <param name="startIndex">The starting first character in the string.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Substring(System.Int32,System.Int32)">
            <summary>
             Represents the Data Manipulation Language (DML) SUBSTR function.
            </summary>
            <param name="startIndex">The starting first character in the string.</param>
            <param name="length">Determines how many characters to return in the string.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Sum">
            <summary>
            Represents the Data Manipulation Language (DML) SUM aggregate function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.And(FlyweightObjects.PropertyExpression{`0})">
            <summary>
            Represents the Data Manipulation Language (DML) AND keyword to be used as part of a WHERE condition.
            </summary>
            <param name="expression">The additional criteria to serve as the search criteria.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Or(FlyweightObjects.PropertyExpression{`0})">
            <summary>
            Represents the Data Manipulation Language (DML) OR operator to be used as part of a WHERE condition.
            </summary>
            <param name="expression">The additional criteria to serve as the search criteria.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Asc">
            <summary>
            Represents the Data Manipulation Language (DML) ASC keyword.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Desc">
            <summary>
            Represents the Data Manipulation Language (DML) DESC operator.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Length">
            <summary>
            Represents the Data Manipulation Language (DML) Length function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.Equals(System.Object)">
            <summary>
            Determines whether the current object equals obj.
            </summary>
            <param name="obj">The object to compare.</param>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.GetHashCode">
            <summary>
            Serves as a hash function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.PropertyExpression`1.All">
            <summary>
            Returns a <see cref="T:FlyweightObjects.PropertyExpression`1"/> specifiying all properties to be selected.
            </summary>
        </member>
        <member name="P:FlyweightObjects.PropertyExpression`1.Empty">
            <summary>
            Represents an unspecified expression.
            </summary>
        </member>
        <member name="M:FlyweightObjects.Column`1.#ctor">
            <summary>
            Creates an instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.Column`1.#ctor(System.String)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="name">The property name that is adorned with a <see cref="T:FlyweightObjects.DataColumnAttribute"/>.</param>
        </member>
        <member name="M:FlyweightObjects.Column`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="property">An expression which represents the property which is adorned with a <see cref="T:FlyweightObjects.DataColumnAttribute"/>.</param>
        </member>
        <member name="T:FlyweightObjects.FunctionType">
            <summary>
            Represents a supported Data Manipulation Language (DML) function.
            </summary>
        </member>
        <member name="F:FlyweightObjects.FunctionType.Avg">
            <summary>
            Avg aggregate function.
            </summary>
        </member>
        <member name="F:FlyweightObjects.FunctionType.Min">
            <summary>
            Min aggregate function.
            </summary>
        </member>
        <member name="F:FlyweightObjects.FunctionType.Max">
            <summary>
            Max aggregate function.
            </summary>
        </member>
        <member name="F:FlyweightObjects.FunctionType.Count">
            <summary>
            Count aggregate function.
            </summary>
        </member>
        <member name="F:FlyweightObjects.FunctionType.CountDistinct">
            <summary>
            Count dstinct aggregate function.
            </summary>
        </member>
        <member name="F:FlyweightObjects.FunctionType.Len">
            <summary>
            Length function.
            </summary>
        </member>
        <member name="F:FlyweightObjects.FunctionType.Upper">
            <summary>
            Upper case function.
            </summary>
        </member>
        <member name="F:FlyweightObjects.FunctionType.Lower">
            <summary>
            Lower case function.
            </summary>
        </member>
        <member name="F:FlyweightObjects.FunctionType.Trim">
            <summary>
            Trim function.
            </summary>
        </member>
        <member name="F:FlyweightObjects.FunctionType.LTrim">
            <summary>
            Left trim function.
            </summary>
        </member>
        <member name="F:FlyweightObjects.FunctionType.RTrim">
            <summary>
            Right trim function.
            </summary>
        </member>
        <member name="F:FlyweightObjects.FunctionType.Substr">
            <summary>
            Substring function.
            </summary>
        </member>
        <member name="F:FlyweightObjects.FunctionType.Sum">
            <summary>
            Sum aggregate function.
            </summary>
        </member>
        <member name="T:FlyweightObjects.PropertyExpressionType">
            <summary>
            Represents the interpreted type of <see cref="T:FlyweightObjects.PropertyExpression"/>.
            </summary>
        </member>
        <member name="F:FlyweightObjects.PropertyExpressionType.Join">
            <summary>
            A Join expression.
            </summary>
        </member>
        <member name="F:FlyweightObjects.PropertyExpressionType.Operator">
            <summary>
            An Operator expression.
            </summary>
        </member>
        <member name="F:FlyweightObjects.PropertyExpressionType.Function">
            <summary>
            A function expression.
            </summary>
        </member>
        <member name="T:FlyweightObjects.Function">
            <summary>
            Represents an abstraction of a database function.
            </summary>
        </member>
        <member name="M:FlyweightObjects.Function.#ctor(FlyweightObjects.FunctionType,System.Object[])">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="functionType">The type of function.</param>
            <param name="parameters">The parameters for the function.</param>
        </member>
        <member name="P:FlyweightObjects.Function.FunctionType">
            <summary>
            Gets the <see cref="P:FlyweightObjects.Function.FunctionType"/> for the current <see cref="T:FlyweightObjects.Function"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.Function.Parameters">
            <summary>
            Gets the parameters of the current <see cref="T:FlyweightObjects.Function"/>.
            </summary>
        </member>
        <member name="P:FlyweightObjects.Function.FunctionName">
            <summary>
            Gets the name of the current <see cref="T:FlyweightObjects.Function"/>.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ExpressionConverter`1">
            <summary>
            Converts an <see cref="T:System.Linq.Expressions.Expression"/> to a <see cref="T:FlyweightObjects.ExpressionConverter`1"/>
            </summary>
        </member>
        <member name="M:FlyweightObjects.ExpressionConverter`1.Convert(System.Linq.Expressions.Expression)">
            <summary>
            Converts the supplied <see cref="T:System.Linq.Expressions.Expression"/> to a <see cref="T:FlyweightObjects.ExpressionConverter`1"/>
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:FlyweightObjects.JoinType">
            <summary>
            Represents a join type for a <see cref="T:FlyweightObjects.QueryExpression`1"/>.
            </summary>
        </member>
        <member name="F:FlyweightObjects.JoinType.InnerJoin">
            <summary>
            An INNER JOIN expression.
            </summary>
        </member>
        <member name="F:FlyweightObjects.JoinType.LeftOuterJoin">
            <summary>
            A LEFT OUTER JOIN expression.
            </summary>
        </member>
        <member name="F:FlyweightObjects.JoinType.RightOuterJoin">
            <summary>
            A RIGHT OUTER JOIN expression.
            </summary>
        </member>
        <member name="F:FlyweightObjects.JoinType.FullOuterJoin">
            <summary>
            A FULL OUTER JOIN expression.
            </summary>
        </member>
        <member name="F:FlyweightObjects.JoinType.CrossJoin">
            <summary>
            A CROSS JOIN expression.
            </summary>
        </member>
        <member name="T:FlyweightObjects.QueryExpression`1">
             <summary>
             Represents a provider independent query.
             </summary>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 var qe = new QueryExpression<Product>()
            
                 .Select(true, 0, ProductCategory.Properties.Name)
                 .From<Product>()
                 .Join<ProductCategory>(Product.Properties.ProductSubcategoryID == ProductCategory.Properties.ProductCategoryID)
                 .Where(Product.Properties.ProductID.Between(350, 360))
                 .OrderBy(ProductCategory.Properties.Name);
            
                 var products = context.Select<Product>(qe);
                 Console.WriteLine("Count is {0}", products.Count<Product>());
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Select(FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Select(System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Select(System.Boolean,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="distinct">Determines whether a distinct set should be returned.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Select(System.Boolean,System.Int32,FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the SELECT keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="distinct">Determines whether a distinct set should be returned.</param>
            <param name="limit">The maximum number of objects to return.</param>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to select.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Insert">
            <summary>
            Represents the INSERT INTO keywords of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Insert(FlyweightObjects.PropertyExpression{`0}[])">
            <summary>
            Represents the INSERT INTO keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members to be inserted.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Update">
            <summary>
            Represents the UPDATE keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Delete">
            <summary>
            Represents the DELETE keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.From``1">
            <summary>
            Represents the FROM keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to serve as the source of From.</typeparam>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Set(FlyweightObjects.PropertyExpression{`0}[])">
            <summary>
            Represents the SET keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of generic <see cref="T:FlyweightObjects.PropertyExpression"/> members whose values should be set.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Values(System.Object[])">
            <summary>
            Represents the VALUES keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="values">The values to be inserted.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Join``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the INNER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.LeftJoin``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the LEFT OUTER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.RightJoin``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the RIGHT OUTER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.FullJoin``1(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the FULL OUTER JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
            <param name="joinExpression">A property expression in the form of A=B.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.CrossJoin``1">
            <summary>
            Represents the CROSS JOIN keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <typeparam name="T">The type to join.</typeparam>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.GroupBy(FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the GROUP BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members by which to group.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.GroupByAll(FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the Group By All keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="properties">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members by which to group.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Having(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the HAVING keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="havingExpression">The expression which limits an aggregate function.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Union">
            <summary>
            Represents the UNION keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.UnionAll">
            <summary>
            Represents the Union All keywords of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Where(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the WHERE keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="whereExpression">The crtieria used to limit the results of the query.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.OrderBy(FlyweightObjects.PropertyExpression[])">
            <summary>
            Represents the ORDER BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="sortExpressions">An array of <see cref="T:FlyweightObjects.PropertyExpression"/> members by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.OrderBy(System.Int32)">
            <summary>
            Represents the ORDER BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="ordinal">The ordinal postiion by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.OrderBy(System.Int32[])">
            <summary>
            Represents the ORDER BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="ordinals">An array of ordinals by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.OrderBy(System.String)">
            <summary>
            Represents the ORDER BY keywords of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="alias">The alias by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Desc">
            <summary>
            Represents the DESC keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Asc">
            <summary>
            Represents the ASC keyword of a Data Manipulation Language (DML) statement.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.And(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the AND keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="whereExpression">The crtieria used to limit the statement.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.Or(FlyweightObjects.PropertyExpression)">
            <summary>
            Represents the OR keyword of a Data Manipulation Language (DML) statement.
            </summary>
            <param name="whereExpression">The crtieria used to limit the statement.</param>
            <seealso cref="M:FlyweightObjects.QueryExpression`1.Where(FlyweightObjects.PropertyExpression)"/>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.ToCommand">
            <summary>
            Returns an instance of an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.ToCommand(FlyweightObjects.IQueryBuilder{`0})">
            <summary>
            Returns an instance of an <see cref="T:FlyweightObjects.IStorageCommand"/>.
            </summary>
            <param name="queryBuilder">The <see cref="T:FlyweightObjects.IQueryBuilder`1"/> used to interpret the query.</param>
        </member>
        <member name="M:FlyweightObjects.QueryExpression`1.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
        </member>
        <member name="P:FlyweightObjects.QueryExpression`1.Pagination">
            <summary>
            Gets or sets the pagination details for the query.
            </summary>
        </member>
        <member name="P:FlyweightObjects.QueryExpression`1.FlyweightObjects#IRuntimeMethodQuery{TSource}#MethodQueue">
            <summary>
            Gets a generic Queue of <see cref="T:FlyweightObjects.RuntimeMethod"/> representing the methods called to construct a query.
            </summary>
        </member>
        <member name="P:FlyweightObjects.QueryExpression`1.FlyweightObjects#IRuntimeMethodQuery{TSource}#Command">
            <summary>
            Gets or sets the <see cref="T:FlyweightObjects.IStorageCommand"/> runtime interpretation.
            </summary>
        </member>
        <member name="T:FlyweightObjects.QueryResult">
             <summary>
             Provides a surrogate object to hold unbound query results. This class may be used in lieu of a strongly typed
             domain class by exposing a serializable dictionary of name value pairs representing columns returned in 
             a select statement.
             </summary>
             <example>
             The following example uses a Product and ProductCategory class from the Microsoft AdventureWorks SQL Server sample database.
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 var qe = new QueryExpression<QueryResult>()
            
                 .Select(Product.Properties.ProductID, ProductInventory.Properties.Quantity.Max().As("MaxInventoryQty"))
                 .From<Product>()
                 .Join<ProductInventory>(Product.Properties.ProductID == ProductInventory.Properties.ProductID)
                 .Where(Product.Properties.DiscontinuedDate.IsNull())
                 .GroupBy(Product.Properties.ProductID)
                 .Having(ProductInventory.Properties.LocationID.Count() > 0)
                 .OrderBy(ProductInventory.Properties.Quantity.Max().Desc());
            
                 var qr = context.Select<QueryResult>(qe);
                 Console.WriteLine("Maximum inventory quantity is {0}", qr[0]["MaxInventoryQty"]);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.QueryResult.#ctor">
            <summary>
            Represents the <see cref="T:FlyweightObjects.PropertyStorage"/> which manages manages state of member fields.
            </summary>
        </member>
        <member name="M:FlyweightObjects.QueryResult.#ctor(FlyweightObjects.PropertyStorage)">
            <summary>
            /// Constructs a new instance of the class.
            </summary>
            <param name="storage"></param>
        </member>
        <member name="P:FlyweightObjects.QueryResult.Storage">
            <summary>
            Gets the <see cref="T:FlyweightObjects.PropertyStorage"/> which manages manages state of member fields.
            </summary>
        </member>
        <member name="P:FlyweightObjects.QueryResult.FlyweightObjects#IFlyweight#Storage">
            <summary>
            Gets or sets the <see cref="T:FlyweightObjects.PropertyStorage"/>  which manages state for member fields.
            </summary>
        </member>
        <member name="P:FlyweightObjects.QueryResult.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:FlyweightObjects.QueryResult.Item(System.String)">
            <summary>
            Gets or sets the value using the specified field name.
            </summary>
            <param name="index">The name of the field.</param>
            <returns></returns>
        </member>
        <member name="T:FlyweightObjects.ChannelType">
            <summary>
            The channel type used to construct a new ServiceListener.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ChannelType.Tcp">
            <summary>
            A TCP remoting channel.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ChannelType.Http">
            <summary>
            An HTTP remoting channel.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ServiceListenerBase">
            <summary>
            Provides a windows service implementation of a remoting listener service.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ServiceListenerBase.#ctor(System.Type,FlyweightObjects.ChannelType,System.Int32)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="remotedType">The MarshalByRefObject type to remote.</param>
            <param name="channelType">The type of channel to use.</param>
            <param name="port">The port number to open.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceListenerBase.#ctor(System.Type,FlyweightObjects.ChannelType,System.Int32,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="channelType">The type of channel to use.</param>
            <param name="port">The port number to open.</param>
            <param name="remotedType">The MarshalByRefObject type to remote.</param>
            <param name="secureChannel">Determines whether or not to use a secure channel.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceListenerBase.#ctor(System.Type,FlyweightObjects.ChannelType,System.Int32,System.Boolean,System.Runtime.Remoting.CustomErrorsModes)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="channelType">The type of channel to use.</param>
            <param name="port">The port number to open.</param>
            <param name="remotedType">The MarshalByRefObject type to remote.</param>
            <param name="secureChannel">Determines whether or not to use a secure channel.</param>
            <param name="customErrorModes">Sets the CustomErrorModes for the RemotingConfiguration.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceListenerBase.#ctor(System.Type,FlyweightObjects.ChannelType,System.Int32,System.Boolean,System.Runtime.Remoting.WellKnownObjectMode)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="remotedType">The MarshalByRefObject type to remote.</param>
            <param name="channelType">The type of channel to use.</param>
            <param name="port">The port number to open.</param>
            <param name="secureChannel">Determines whether or not to use a secure channel.</param>
            <param name="remotedObjectMode">The mode (Singleton or SingleCall) for the remoted type.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceListenerBase.Start">
            <summary>
            Starts the service.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ServiceListenerBase.OnStart(System.String[])">
            <summary>
            Starts the service.
            </summary>
            <param name="args">Arguments for the service.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceListenerBase.OnStop">
            <summary>
            Stops the service.
            </summary>
        </member>
        <member name="F:FlyweightObjects.ServiceListenerBase.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ServiceListenerBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FlyweightObjects.ServiceListenerBase.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ServiceListenerBase.ChannelType">
            <summary>
            Gets the ChannelType used by the service.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ServiceListenerBase.ServerChannel">
            <summary>
            Gets the IChannel used by the service.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ServiceListenerBase.Port">
            <summary>
            Gets the port used by the service.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ServiceListenerBase.RemotedType">
            <summary>
            Gets the MarshalByRefObject type remoted by the service.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ServiceListenerBase.SecureChannel">
            <summary>
            Gets whether or not to use a secure channel for the service.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ServiceListenerBase.RemotedObjectMode">
            <summary>
            Gets the WellKnownObjectMode for the service's remoted type(s).
            </summary>
        </member>
        <member name="P:FlyweightObjects.ServiceListenerBase.CustomErrorsModes">
            <summary>
            Gets the CustomErrorsModes property for the remoting configuration.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ServiceListenerBase.ApplicationName">
            <summary>
            Gets the application name for the instance of the class.
            </summary>
        </member>
        <member name="T:FlyweightObjects.SortDirection">
            <summary>
            The direction of a sort.
            </summary>
        </member>
        <member name="F:FlyweightObjects.SortDirection.Asc">
            <summary>
            Sort in ascending order.
            </summary>
        </member>
        <member name="F:FlyweightObjects.SortDirection.Desc">
            <summary>
            Sort in descending order.
            </summary>
        </member>
        <member name="T:FlyweightObjects.SortExpression`1">
            <summary>
            Represents an expression that also has a <see cref="T:FlyweightObjects.SortDirection"/> associated to it.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FlyweightObjects.SortExpression`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="expression">An expression specifying the property by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.SortExpression`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},FlyweightObjects.SortDirection)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="expression">An expression specifying the property by which to sort.</param>
            <param name="direction">The direction of the sort order.</param>
        </member>
        <member name="M:FlyweightObjects.SortExpression`1.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specifies the property that should sorted.
            </summary>
            <param name="expression">An expression specifying the property by which to sort.</param>
        </member>
        <member name="M:FlyweightObjects.SortExpression`1.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},FlyweightObjects.SortDirection)">
            <param name="expression">An expression specifying the property by which to sort.</param>
            <param name="direction">The direction of the sort order.</param>
        </member>
        <member name="P:FlyweightObjects.SortExpression`1.Direction">
            <summary>
            Gets or sets the direction of the sort order.
            </summary>
        </member>
        <member name="P:FlyweightObjects.SortExpression`1.Expression">
            <summary>
            Gets or sets the <see cref="P:FlyweightObjects.SortExpression`1.Expression"/> for the sorting.
            </summary>
        </member>
        <member name="T:FlyweightObjects.StorageFacility">
            <summary>
            Represents the facility that fulfilled the request.
            </summary>
        </member>
        <member name="F:FlyweightObjects.StorageFacility.StorageProvider">
            <summary>
            The request was fulfilled by a <see cref="T:FlyweightObjects.IStorageProvider"/>.
            </summary>
        </member>
        <member name="F:FlyweightObjects.StorageFacility.CacheManager">
            <summary>
            The request was fulfilled by a <see cref="T:FlyweightObjects.ICacheManager"/>.
            </summary>
        </member>
        <member name="T:FlyweightObjects.ResponseMessage">
            <summary>
            Represents a statuc message for a given operation or domain model.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ResponseMessage.#ctor">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResponseMessage.ServerName">
            <summary>
            Gets or sets the server name associated with processing a request.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResponseMessage.ExecutionTime">
            <summary>
            Gets the <see cref="T:System.TimeSpan"/> representing the execution time of the last operation.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResponseMessage.StatusCode">
            <summary>
            Gets or sets the <see cref="P:FlyweightObjects.ResponseMessage.StatusCode"/> of the message.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResponseMessage.Message">
            <summary>
            Gets or sets the message text.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResponseMessage.Exception">
            <summary>
            Gets or sets an <see cref="P:FlyweightObjects.ResponseMessage.Exception"/> object if an error has been thrown.
            </summary>
        </member>
        <member name="P:FlyweightObjects.ResponseMessage.StorageFacility">
            <summary>
            Represents the facility that fulfilled the request.
            </summary>
        </member>
        <member name="T:FlyweightObjects.StorageProviderException">
            <summary>
            Represents an exception thrown when processing a command, exposing the <see cref="T:FlyweightObjects.IStorageCommand"/> which was 
            issued to the provider.
            </summary>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database. Because the SqlText of the <see cref="T:FlyweightObjects.StorageCommand"/>
            is malformed, a <see cref="T:FlyweightObjects.StorageProviderException"/> will be thrown. Note that if you are calling a command from across process boundaries, you will need to 
            catch a base <see cref="T:System.Exception"/> and cast its inner exception as a <see cref="T:FlyweightObjects.StorageProviderException"/> to see applicable data about the command.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                try
                {
                    Product product = null;
                    if (context.TrySelect<Product>(new StorageCommand("SELECT * Production.Product WHERE ProductID = 355"), out product))
                    {
                        Console.WriteLine("Product name is {0}", product.Name);
                    }
                }
                catch (StorageProviderException e)
                {
                    Console.WriteLine(e.ToString());
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:FlyweightObjects.StorageProviderException.#ctor(FlyweightObjects.StorageProviderType,FlyweightObjects.IStorageCommand,System.Exception)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="providerType">The <see cref="T:FlyweightObjects.StorageProviderType"/> associated with the exception.</param>
            <param name="command">The <see cref="T:FlyweightObjects.IStorageCommand"/> which caused the exception.</param>
            <param name="innerException">The inner exception thrown by the ADO.NET provider.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the class specifically for deserialization purposes.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance for the deserialization.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> for the deserialization.</param>
        </member>
        <member name="M:FlyweightObjects.StorageProviderException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Adds the extended member data for serialization purposes.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains the class meta data.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> used during serialization.</param>
        </member>
        <member name="P:FlyweightObjects.StorageProviderException.ProviderType">
            <summary>
            Gets the <see cref="T:FlyweightObjects.StorageProviderType"/> associated with the exception.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StorageProviderException.Command">
            <summary>
            Gets the <see cref="T:FlyweightObjects.IStorageCommand"/> that threw the exception.
            </summary>
        </member>
        <member name="T:FlyweightObjects.StorageProviderType">
            <summary>
            Represents an enumerated value of supported <see cref="T:FlyweightObjects.IStorageProvider"/>s.
            </summary>
        </member>
        <member name="F:FlyweightObjects.StorageProviderType.SqlServer">
            <summary>
            Microsoft SQL Server database
            </summary>
        </member>
        <member name="F:FlyweightObjects.StorageProviderType.SqlServerCe">
            <summary>
            Microsoft SQL Server Compact Edition database
            </summary>
        </member>
        <member name="F:FlyweightObjects.StorageProviderType.MsJet">
            <summary>
            Microsoft Jet database
            </summary>
        </member>
        <member name="F:FlyweightObjects.StorageProviderType.MySql">
            <summary>
            MySQL database
            </summary>
        </member>
        <member name="F:FlyweightObjects.StorageProviderType.Oracle">
            <summary>
            Oracle database
            </summary>
        </member>
        <member name="T:FlyweightObjects.StoredProcedure">
             <summary>
             Represents a stored procedure in storage.
             </summary>
             <example>
             The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database. In order to run the example, you must create the 
             following stored procedure.
             <code>
             SET ANSI_NULLS ON
             GO
             SET QUOTED_IDENTIFIER ON
             GO
             CREATE PROCEDURE GetProductByProductID 
                 @p_ProductID int
             AS
             BEGIN
                 SET NOCOUNT ON;
                 SELECT      Production.Product.* 
                 FROM        Production.Product 
                 WHERE       Production.Product.ProductID = @p_ProductID;
             END
             GO
            </code>
             <code>
             <![CDATA[
             using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
             {
                 // Create a new StoredProcedure instance, specifying the target's name
                 StoredProcedure sp = new StoredProcedure("dbo.GetProductByProductID");
                 
                 // Add the required parameters
                 sp.Parameters.Add(new Parameter("@p_ProductID", 1, DbType.Int32));
                 
                 // Retrieve a product object and print its name
                 Product product = context.Select<Product>(sp).ToSingle();
                 Console.WriteLine("Product Name: {0}", product.Name);
             }     
             ]]>
             </code>
             </example>
        </member>
        <member name="M:FlyweightObjects.StoredProcedure.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="P:FlyweightObjects.StoredProcedure.ProcedureName">
            <summary>
            Gets the stored procedure name.
            </summary>
        </member>
        <member name="T:FlyweightObjects.TcpClientContext`1">
            <summary>
            Represents the generic class for clients using the Tcp protocol.
            </summary>
            <typeparam name="TService">The custom <see cref="T:FlyweightObjects.IServiceContext"/> implementation exposed by the remote service.</typeparam>
        </member>
        <member name="T:FlyweightObjects.TcpClientContext">
            <summary>
            Represents the class for clients using the Tcp protocol.
            </summary>
        </member>
        <member name="M:FlyweightObjects.TcpClientContext.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="remotedType">The MarshalByRefObject type exposed by the remote service.</param>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
        </member>
        <member name="M:FlyweightObjects.TcpClientContext.#ctor(System.Type,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="remotedType">The MarshalByRefObject type exposed by the remote service.</param>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
            <param name="compressPayloads">Determines whether the request and response payloads should be compressed.</param>
            <param name="encryptPayloads">Determines whether the request and response payloads should be encrypted.</param>
        </member>
        <member name="M:FlyweightObjects.TcpClientContext.#ctor(System.Type,System.String,System.Boolean,System.Boolean,System.Byte[])">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="remotedType">The MarshalByRefObject type exposed by the remote service.</param>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
            <param name="compressPayloads">Determines whether the request and response payloads should be compressed.</param>
            <param name="key">A valid 24 byte <see cref="P:System.Security.Cryptography.TripleDES.Key"/> value to be used when encrypting and decrypting payloads.</param>
        </member>
        <member name="M:FlyweightObjects.TcpClientContext.#ctor(System.Type,System.String,System.Boolean,System.Collections.IDictionary)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="remotedType">The MarshalByRefObject type exposed by the remote service.</param>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
            <param name="properties">An <see cref="T:System.Collections.IDictionary"/> of properties specific for the remoting channel.</param>
        </member>
        <member name="M:FlyweightObjects.TcpClientContext`1.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
        </member>
        <member name="M:FlyweightObjects.TcpClientContext`1.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
            <param name="compressPayloads">Determines whether the request and response payloads should be compressed.</param>
            <param name="encryptPayloads">Determines whether the request and response payloads should be encrypted.</param>
        </member>
        <member name="M:FlyweightObjects.TcpClientContext`1.#ctor(System.String,System.Boolean,System.Boolean,System.Byte[])">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
            <param name="compressPayloads">Determines whether the request and response payloads should be compressed.</param>
            <param name="key">A valid 24 byte <see cref="P:System.Security.Cryptography.TripleDES.Key"/> value to be used when encrypting and decrypting payloads.</param>
        </member>
        <member name="M:FlyweightObjects.TcpClientContext`1.#ctor(System.String,System.Boolean,System.Collections.IDictionary)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="url">The url of the remote service.</param>
            <param name="secureChannel">Determines whether the channel should be secured.</param>
            <param name="properties">An <see cref="T:System.Collections.IDictionary"/> of properties specific for the remoting channel.</param>
        </member>
        <member name="P:FlyweightObjects.TcpClientContext`1.Service">
            <summary>
            Gets the current service to which the client connects.
            </summary>
        </member>
        <member name="T:FlyweightObjects.TcpServiceContext">
            <summary>
            Represents a server side context that can be used to process requests over via TCP remoting channels.
            </summary>
        </member>
        <member name="M:FlyweightObjects.TcpServiceContext.#ctor(System.String,FlyweightObjects.StorageProviderType)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString">The connection string to the storage.</param>
            <param name="providerType">The type of storage.</param>
        </member>
        <member name="M:FlyweightObjects.TcpServiceContext.#ctor(System.String,FlyweightObjects.StorageProviderType,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString">The connection string to the storage.</param>
            <param name="providerType">The type of storage.</param>
            <param name="compressPayloads">Determines whether the message payloads should be compressed.</param>
            <param name="encryptPayloads">Determines whether the message payloads should be encrypted.</param>
        </member>
        <member name="M:FlyweightObjects.TcpServiceContext.#ctor(System.String,FlyweightObjects.StorageProviderType,System.Boolean,System.Byte[])">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="connectionString">The connection string to the storage.</param>
            <param name="providerType">The type of storage.</param>
            <param name="compressPayloads">Determines whether the message payloads should be compressed.</param>
            <param name="key">A valid 24 byte <see cref="P:System.Security.Cryptography.TripleDES.Key"/> value to be used when encrypting and decrypting payloads.</param>
        </member>
        <member name="M:FlyweightObjects.TcpServiceContext.#ctor(System.Type)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="defaultBusinessLogicType">The default <see cref="T:FlyweightObjects.BusinessLogicBase`1"/> implementation for the domain.</param>
        </member>
        <member name="M:FlyweightObjects.TcpServiceContext.#ctor(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="defaultBusinessLogicType">The default <see cref="T:FlyweightObjects.BusinessLogicBase`1"/> implementation for the domain.</param>
            <param name="compressPayloads">Determines whether the message payloads should be compressed.</param>
            <param name="encryptPayloads">Determines whether the message payloads should be encrypted.</param>
        </member>
        <member name="T:FlyweightObjects.DataAttributeUtilities">
            <summary>
            Represents a grouping of internal utility methods.
            </summary>
        </member>
        <member name="M:FlyweightObjects.DataAttributeUtilities.GetDataTableAttribute(System.Type)">
            <summary>
            Returns a <see cref="T:FlyweightObjects.DataTableAttribute"/> for the specified type argument. 
            </summary>
            <param name="type">The type to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.DataAttributeUtilities.GetDataColumnAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Returns a <see cref="T:FlyweightObjects.DataColumnAttribute"/> for the specified <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.DataAttributeUtilities.GetDataRelationAttributes(System.Reflection.PropertyInfo)">
            <summary>
            Returns an array of <see cref="T:FlyweightObjects.DataRelationAttribute"/> attributes for the specified <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> object to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.DataAttributeUtilities.GetDataColumnAttributes(System.Type)">
            <summary>
            Gets a list of <see cref="T:FlyweightObjects.DataColumnAttribute"/> from the type using the internal cache.
            </summary>
            <param name="type">The type to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.DataAttributeUtilities.GetAutoIncrementDataColumn(System.Type)">
            <summary>
            Gets <see cref="T:FlyweightObjects.DataColumnAttribute"/> representing an auto-incremented field.
            </summary>
            <param name="type">The type to interrogate.</param>
        </member>
        <member name="M:FlyweightObjects.DataAttributeUtilities.GetDataColumnIdentifiers(System.Type)">
            <summary>
            Gets a list <see cref="T:FlyweightObjects.DataColumnAttribute"/> representing key indentifiers from the type using the internal cache.
            </summary>
            <param name="type">The type to interrogate.</param>
        </member>
        <member name="T:FlyweightObjects.ValidationException">
            <summary>
            Represents a validation exception.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ValidationException.#ctor">
            <summary>
            Constructs a new instance of the class.
            </summary>
        </member>
        <member name="M:FlyweightObjects.ValidationException.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class.
            </summary>
            <param name="message">The error message for the exception.</param>
        </member>
        <member name="M:FlyweightObjects.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the class specifically for deserialization purposes.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance for the deserialization.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> for the deserialization.</param>
        </member>
        <member name="T:FlyweightObjects.XmlSerializer">
            <summary>
            Performs XML serialization routines.
            </summary>
            <example>
            The following example uses a Product class from the Microsoft AdventureWorks SQL Server sample database.
            <code>
            <![CDATA[
            using (var context = new DataContext(@"Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=localhost;", StorageProviderType.SqlServer))
            {
                // Retrieve a product from storage
                Product p1 = context.Select<Product>(1).ToSingle();
                Console.WriteLine("ProductID: {0}", p1.Name);
                       
                // Serialize the object as XML
                string xml = XmlSerializer.Serialize<Product>(p1);
                
                // Deserialize the product 
                Product p2 = XmlSerializer.Deserialize<Product>(xml);
                Console.WriteLine("ProductID: {0}", p2.Name);
            }
            ]]>
            </code>
            </example>   
        </member>
        <member name="M:FlyweightObjects.XmlSerializer.Serialize(System.Object)">
            <summary>
            Serializes an object into an XML string.
            </summary>
            <param name="source">The object to serialize.</param>
        </member>
        <member name="M:FlyweightObjects.XmlSerializer.Serialize(System.Object,System.Boolean,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Serializes an object into an XML string.
            </summary>
            <param name="source">The object to serialize.</param>
            <param name="includeDeclaration">Determines whether the declaration should appear at the top of the returned XML.</param>
            <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces"/> to add.</param>
        </member>
        <member name="M:FlyweightObjects.XmlSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes an object into the type of T.
            </summary>
            <typeparam name="T">The type of object expected to be deserialized.</typeparam>
            <param name="xml">The xml string of the obejct.</param>
            <returns></returns>
        </member>
    </members>
</doc>
